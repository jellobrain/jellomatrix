<?php

function save_imagepng($canvas,$file){
  // Store output.
  ob_start();
  // Output to buffer.
  imagePNG($canvas);
  // Write buffer to file.
  file_put_contents($file, ob_get_contents(), FILE_BINARY);
  // Clear and turn off buffer.
  ob_end_clean();
}

/**
 * Implements hook_theme().
 */
function jellomatrix_theme($existing, $type, $theme, $path) {
  return array (
    'jellomatrix' => array(
      'render element' => 'custom_page',
      'path' => $path . '/templates',
      'template' => 'jellomatrix',
    ),
  );
}


function jellomatrix_circle_detection($increment, $tone, $interval, $radius, $direction) {

  $circle_point_array = array();
  $slice = (360/$tone);
  $point = array();
  for($i=0;$i<$tone;$i++){
    $angle = (pi()*($slice * $i))/180.0;
    $newx = (($radius) * cos(($increment)*$angle));
    $newy = (($radius) * sin(($increment)*$angle));
    $point['newx'] = $newx;
    $point['newy'] = $newy;
    array_push($circle_point_array,$point);
  }

  foreach ($circle_point_array as $key=>$point) {
    $circle_point_array[$key]['newx'] = (int)($circle_point_array[$key]['newx'])+$radius;
    $circle_point_array[$key]['newy'] = (int)($circle_point_array[$key]['newy'])+$radius;
  }
  //dpm($direction);
  //dpm($circle_point_array);
  unlink("./sites/default/files/" . $direction . "_circle.png");

  $canvas = imagecreatetruecolor($radius*2, $radius*2);
  $back = imagecolorallocate($canvas, 255, 255, 255);
  imagefilledrectangle($canvas, 0, 0, $radius*2, $radius*2, $back);
  imagesetthickness($canvas , 2);

  foreach($circle_point_array as $key=>$point) {
    if ($direction == 'f') {
      $color = imagecolorallocate($canvas, 37, 182, 137);
    }
    if ($direction == 'h') {
      $color = imagecolorallocate($canvas, 37, 102, 200);
    }
    if ($direction == 'b') {
      $color = imagecolorallocate($canvas, 187, 102, 137);
    }
    if (isset($circle_point_array[$key+1])) {
      imageline($canvas, $point['newx'], $point['newy'], $circle_point_array[$key+1]['newx'], $circle_point_array[$key+1]['newy'], $color);
    } else {
      imageline($canvas, $point['newx'], $point['newy'], $circle_point_array[0]['newx'], $circle_point_array[0]['newy'], $color);
    }
  }

  header('Content-Type: image/png');
  save_imagepng($canvas, "./sites/default/files/" . $direction . "_circle.png");
  imagepng($canvas, "./sites/default/files/" . $direction . "_circle.png");

  $url = "./sites/default/files/" . $direction . "_circle.png";
  imagecreatefromstring(file_get_contents($url));

  return $canvas;
}

function jellomatrix_circle_grid($tone, $interval, $radius) {
  $circle_point_array = array();
  header("Content-Type: image/png");
  $canvas = @imagecreate(3*$radius, 3*$radius)
  or die("Cannot Initialize new GD image stream");
  //$canvas = imagecreatetruecolor($radius*2, $radius*2);
  $back = imagecolorallocate($canvas, 245, 245, 245);
  imagefilledellipse($canvas, 0, 0, $radius*2, $radius*2, $back);
  imagesetthickness($canvas , 1);

  $red = imagecolorallocate($canvas, 153, 0, 0);
  $purple = imagecolorallocate($canvas, 153, 0, 153);
  $arc = 360/$interval;
  $linebit = $tone/$radius;
  for($i=0;$i<=360;$i+=$arc) {
    //$x = round(cos($i)*400)+450;
    //$y = round(sin($i)*400)+450;
    for($l=0;$l<=$tone+2;$l++) {
      $bit = $linebit*$l*(1.5*$radius);
      $x = round(cos(deg2rad($i))*($bit))+((1.5*$radius));
      $y = round(sin(deg2rad($i))*($bit))+((1.5*$radius));
      imagefilledellipse($canvas, $x, $y, 7, 7, $red);
      imageline($canvas, (1.5*$radius), (1.5*$radius), $x, $y, $purple);
    }
  }
  save_imagepng($canvas,"./sites/default/files/circle_grid.png");
  imagepng( $canvas, "./sites/default/files/circle_grid.png" );

  $url = "./sites/default/files/circle_grid.png";
  imagecreatefromstring(file_get_contents($url));

  return $canvas;
}

function jellomatrix_to_arg($arg) {
  if ($arg == '%') {
    return 'none';
  }
  else {
    return $arg;
  }
}

function jellomatrix_phi_equation($spliced_matrix, $tone, $interval) {


}

function jellomatrix_primes($tone) {
  $primes = array();
  $primes[] = 1;
  // Numbers to be checked as prime.
  for($i=1;$i<=$tone;$i++){
		$counter = 0;
    // All divisible factors.
		for($j=1;$j<=$i;$j++){
			if($i % $j==0){
				$counter++;
			}
		}
		// Prime requires 2 rules ( divisible by 1 and divisible by itself).
		if($counter==2){
			$primes[] = $i;
	  }
  }
  return $primes;
}

/*
 *
 * name: jellomatrix_prime_basetone
 * @param = $tone, $interval
 * @return = array()
 *
 */
function jellomatrix_prime_basetone($tone, $interval) {
  $matrix_count = 1;
  $prime_bt = array();

  // Make sure the line above took.
  if ($interval >= $tone) {
    $balance = $interval - $tone;
    $row = 0;
    for ($i = 1; $i <= $interval; $i++) {
      $row++;
      $record = 'first';
      $column = 0;
      for ($t = 1; $t <= $tone; $t++) {
        $column++;
        if ($record == 'first') {
          if ($i <= $tone) {
            $prime_bt[$i][$t]['tone'] = $i;
          }
          else {
            $prime_bt[$i][$t]['tone'] = $i-$tone;
            $sm_ct = 0;
            while ($prime_bt[$i][$t]['tone'] > $tone) {
              $prime_bt[$i][$t]['tone'] = $prime_bt[$i][$t]['tone']-$tone;
              $sm_ct++;
            }
          }
          $prime_bt[$i][$t]['column'] = $column;
          $prime_bt[$i][$t]['row'] = $row;
          $prime_bt[$i][$t]['grid_x'] = $column;
          $prime_bt[$i][$t]['grid_y'] = $row;
          $prime_bt[$i][$t]['count'] = (($column-1)*$interval)+$row;
          $prime_bt[$i][$t]['interval'] = floor($prime_bt[$i][$t]['count']/$tone*$interval);
          $prime_bt[$i][$t]['color'] = '#333';
          $prime_bt[$i][$t]['opacity'] = 1;
          $prime_bt[$i][$t]['padding'] = 3;
          $prime_bt[$i][$t]['background'] = '#fafafa';
          $record = $prime_bt[$i][$t]['tone'];
        }
        else {
          if (2*$record <= $interval) {
            while ($record >= $tone) {
              $record = $record-$tone;
            }
          }
          $new_record = $record + $balance;
          while ($new_record > $tone) {
            $new_record = $new_record - $tone;
          }

          $record = $new_record;


          $prime_bt[$i][$t]['tone'] = $record;
          $prime_bt[$i][$t]['column'] = $column;
          $prime_bt[$i][$t]['row'] = $row;
          $prime_bt[$i][$t]['grid_x'] = $column;
          $prime_bt[$i][$t]['grid_y'] = $row;
          $prime_bt[$i][$t]['count'] = (($column-1)*$interval)+$row;
          $prime_bt[$i][$t]['interval'] = floor($prime_bt[$i][$t]['count']/$tone*$interval);
          $prime_bt[$i][$t]['color'] = '#333';
          $prime_bt[$i][$t]['opacity'] = 1;
          $prime_bt[$i][$t]['padding'] = 3;
          $prime_bt[$i][$t]['background'] = '#fafafa';
        }
        $matrix_count++;
      }
    }
  }

  return $prime_bt;
}

/*
 *
 * name: jellomatrix_response_basetone
 * @param = $tone, $interval
 * @return = array()
 *
 */
function jellomatrix_response_basetone($tone, $interval) {
  $matrix_count = 1;
  $response_bt = array();

  // Make sure the line above took.
  if ($interval >= $tone) {
    $balance = $interval - $tone;
    $row = 0;
    for ($i = 1; $i <= $interval; $i++) {
      $row++;
      $record = 'first';
      $column = 0;
      for ($t = $tone; $t >= 1; $t--) {
        $column++;
        if ($record == 'first') {
          if ($i == 1 ) {
            $response_bt[$i][$t]['tone'] = $t;
          }
          else/*if ($i > 1 && $tone >= $i )*/ {
            $response_bt[$i][$t]['tone'] = $tone - ($i-1);
          }
          while ($response_bt[$i][$t]['tone'] <= 0) {
            $response_bt[$i][$t]['tone'] = $response_bt[$i][$t]['tone']+$tone;
          }
          $response_bt[$i][$t]['column'] = $column;
          $response_bt[$i][$t]['row'] = $row;
          $response_bt[$i][$t]['grid_x'] = $column;
          $response_bt[$i][$t]['grid_y'] = $row;
          $response_bt[$i][$t]['count'] = (($column-1)*$interval)+$row;
          $response_bt[$i][$t]['interval'] = floor($response_bt[$i][$t]['count']/$tone*$interval);
          $response_bt[$i][$t]['color'] = '#333';
          $response_bt[$i][$t]['opacity'] = 1;
          $response_bt[$i][$t]['padding'] = 3;
          $response_bt[$i][$t]['background'] = '#fafafa';
          $record = $response_bt[$i][$t]['tone'];
        }
        else {
          while ($record <= 0) {
            $record = $record+$tone;
          }

          $new_record = $record - $balance;
          while ($new_record <= 0) {
            $new_record = $new_record + $tone;
          }
          $record = $new_record;

          $response_bt[$i][$t]['tone'] = $record;
          $response_bt[$i][$t]['column'] = $column;
          $response_bt[$i][$t]['row'] = $row;
          $response_bt[$i][$t]['grid_x'] = $column;
          $response_bt[$i][$t]['grid_y'] = $row;
          $response_bt[$i][$t]['count'] = (($column-1)*$interval)+$row;
          $response_bt[$i][$t]['interval'] = floor($response_bt[$i][$t]['count']/$tone*$interval);
          $response_bt[$i][$t]['color'] = '#333';
          $response_bt[$i][$t]['opacity'] = 1;
          $response_bt[$i][$t]['padding'] = 3;
          $response_bt[$i][$t]['background'] = '#fafafa';
        }
      }
      $matrix_count++;
    }
  }

  return $response_bt;
}


/*
 *
 * name: jellomatrix_doubleflip_response_basetone
 * @param = $tone, $interval
 * @return = array()
 *
 */
function jellomatrix_doubleflip_response_basetone($tone, $interval) {
  $matrix_count = 1;
  $response_bt = array();

  // Make sure the line above took.
  if ($interval >= $tone) {
    $balance = $interval - $tone;
    $row = 0;
    for ($i = 1; $i <= $interval; $i++) {
      $row++;
      $column = 0;
      $record = 'first';
      for ($t = 1; $t <= $tone; $t++) {
        $column++;
        if ($record == 'first') {
          if ($i == 1 ) {
            $response_bt[$i][$t]['tone'] = $tone;
          }
          else/*if ($i > 1 && $tone >= $i )*/ {
            $response_bt[$i][$t]['tone'] = $tone - ($i-1);
          }
          while ($response_bt[$i][$t]['tone'] <= 0) {
            $response_bt[$i][$t]['tone'] = $response_bt[$i][$t]['tone']+$tone;
          }
          $response_bt[$i][$t]['column'] = $column;
          $response_bt[$i][$t]['row'] = $row;
          $response_bt[$i][$t]['grid_x'] = $column;
          $response_bt[$i][$t]['grid_y'] = $row;
          $response_bt[$i][$t]['count'] = (($column-1)*$interval)+$row; //BOOKMARK
          $response_bt[$i][$t]['interval'] = floor($response_bt[$i][$t]['count']/$tone*$interval);
          $response_bt[$i][$t]['color'] = '#333';
          $response_bt[$i][$t]['opacity'] = 1;
          $response_bt[$i][$t]['padding'] = 3;
          $response_bt[$i][$t]['background'] = '#fafafa';
          $record = $response_bt[$i][$t]['tone'];
          $matrix_count++;
        }
        else {
          while ($record <= 0) {
            $record = $record+$tone;
          }

          $new_record = $record - $balance;
          while ($new_record <= 0) {
            $new_record = $new_record + $tone;
          }
          $record = $new_record;

          $response_bt[$i][$t]['tone'] = $record;
          $response_bt[$i][$t]['column'] = $column;
          $response_bt[$i][$t]['row'] = $row;
          $response_bt[$i][$t]['grid_x'] = $column;
          $response_bt[$i][$t]['grid_y'] = $row;
          $response_bt[$i][$t]['count'] = (($column-1)*$interval)+$row;
          $response_bt[$i][$t]['interval'] = floor($response_bt[$i][$t]['count']/$tone*$interval);
          $response_bt[$i][$t]['color'] = '#333';
          $response_bt[$i][$t]['opacity'] = 1;
          $response_bt[$i][$t]['padding'] = 3;
          $response_bt[$i][$t]['background'] = '#fafafa';
          $matrix_count++;
        }
      }
    }
  }

  return $response_bt;
}


/*
 *
 * name: jellomatrix_prime_offset
 * @param = $tone, $interval
 * @return = array()
 *
 */
function jellomatrix_prime_offset($tone, $interval, $offset) {
  $matrix_count = 1;
  $prime_bt = array();

  // Make sure the line above took.
  if ($interval >= $tone) {
    $balance = $interval - $tone;
    $row = 0;
    for ($i = 1; $i <= $interval; $i++) {
      $row++;
      $record = 'first';
      $column = 0;
      for ($t = 1; $t <= $tone; $t++) {
        $column++;
        if ($record == 'first') {
          if ($i <= $tone) {
            $prime_bt[$i][$t]['tone'] = $i;
          }
          else {
            $prime_bt[$i][$t]['tone'] = $i-$tone;
            $sm_ct = 0;
            while ($prime_bt[$i][$t]['tone'] > $tone) {
              $prime_bt[$i][$t]['tone'] = $prime_bt[$i][$t]['tone']-$tone;
              $sm_ct++;
            }
          }
          $prime_bt[$i][$t]['column'] = $column;
          $prime_bt[$i][$t]['row'] = $row;
          $prime_bt[$i][$t]['grid_x'] = $column;
          $prime_bt[$i][$t]['grid_y'] = $row;
          $prime_bt[$i][$t]['count'] = (($column-1)*$interval)+$row;
          $prime_bt[$i][$t]['interval'] = floor($prime_bt[$i][$t]['count']/$tone*$interval);
          $prime_bt[$i][$t]['color'] = '#333';
          $prime_bt[$i][$t]['opacity'] = 1;
          $prime_bt[$i][$t]['padding'] = 3;
          $prime_bt[$i][$t]['background'] = '#fafafa';
          $record = $prime_bt[$i][$t]['tone'];
        }
        else {
          if (2*$record <= $interval) {
            while ($record >= $tone) {
              $record = $record-$tone;
            }
          }
          $new_record = $record + $balance;
          while ($new_record > $tone) {
            $new_record = $new_record - $tone;
          }

          $record = $new_record;


          $prime_bt[$i][$t]['tone'] = $record;
          $prime_bt[$i][$t]['column'] = $column;
          $prime_bt[$i][$t]['row'] = $row;
          $prime_bt[$i][$t]['grid_x'] = $column;
          $prime_bt[$i][$t]['grid_y'] = $row;
          $prime_bt[$i][$t]['count'] = (($column-1)*$interval)+$row;
          $prime_bt[$i][$t]['interval'] = floor($prime_bt[$i][$t]['count']/$tone*$interval);
          $prime_bt[$i][$t]['color'] = '#333';
          $prime_bt[$i][$t]['opacity'] = 1;
          $prime_bt[$i][$t]['padding'] = 3;
          $prime_bt[$i][$t]['background'] = '#fafafa';
        }
        $matrix_count++;
      }
    }
  }

  if ($offset < 0) {
    for ($i = 1; $i <= $offset; $i++) {
      array_shift($prime_bt);
    }
  }
  elseif ($offset > 0) {
    for ($i = 1; $i <= $offset; $i++) {
      array_pop($prime_bt);
    }
  }

  $old_arr = $prime_bt;
  $prime_bt = array();
  $i = 1;
  foreach($old_arr as $old_val) {
      $prime_bt[$i]  = $old_val;
      $i++;
  }
  foreach($prime_bt as $r=>$row) {
    foreach ($row as $i=>$item) {
      $prime_bt[$r][$i]['row'] = $r;
      $prime_bt[$r][$i]['grid_y'] = $r;
    }
  }

  return $prime_bt;
}

/*
 *
 * name: jellomatrix_response_offset
 * @param = $tone, $interval
 * @return = array()
 *
 */
function jellomatrix_response_offset($tone, $interval, $offset) {
  $matrix_count = 1;
  $response_bt = array();

  // Make sure the line above took.
  if ($interval >= $tone) {
    $balance = $interval - $tone;
    $row = 0;
    for ($i = 1; $i <= $interval; $i++) {
      $row++;
      $record = 'first';
      $column = 0;
      for ($t = $tone; $t >= 1; $t--) {
        $column++;
        if ($record == 'first') {
          if ($i == 1 ) {
            $response_bt[$i][$t]['tone'] = $t;
          }
          else {
            $response_bt[$i][$t]['tone'] = $tone - ($i-1);
          }
          while ($response_bt[$i][$t]['tone'] <= 0) {
            $response_bt[$i][$t]['tone'] = $response_bt[$i][$t]['tone']+$tone;
          }
          $response_bt[$i][$t]['column'] = $column;
          $response_bt[$i][$t]['row'] = $row;
          $response_bt[$i][$t]['grid_x'] = $column;
          $response_bt[$i][$t]['grid_y'] = $row;
          $response_bt[$i][$t]['count'] = (($column-1)*$interval)+$row;
          $response_bt[$i][$t]['interval'] = floor($response_bt[$i][$t]['count']/$tone*$interval);
          $response_bt[$i][$t]['color'] = '#333';
          $response_bt[$i][$t]['opacity'] = 1;
          $response_bt[$i][$t]['padding'] = 3;
          $response_bt[$i][$t]['background'] = '#fafafa';
          $record = $response_bt[$i][$t]['tone'];
        }
        else {
          while ($record <= 0) {
            $record = $record+$tone;
          }

          $new_record = $record - $balance;
          while ($new_record <= 0) {
            $new_record = $new_record + $tone;
          }
          $record = $new_record;

          $response_bt[$i][$t]['tone'] = $record;
          $response_bt[$i][$t]['column'] = $column;
          $response_bt[$i][$t]['row'] = $row;
          $response_bt[$i][$t]['grid_x'] = $column;
          $response_bt[$i][$t]['grid_y'] = $row;
          $response_bt[$i][$t]['count'] = (($column-1)*$interval)+$row;
          $response_bt[$i][$t]['interval'] = floor($response_bt[$i][$t]['count']/$tone*$interval);
          $response_bt[$i][$t]['color'] = '#333';
          $response_bt[$i][$t]['opacity'] = 1;
          $response_bt[$i][$t]['padding'] = 3;
          $response_bt[$i][$t]['background'] = '#fafafa';
        }
      }
      $matrix_count++;
    }
  }

  if ($offset < 0) {
    for ($i = 1; $i <= $offset; $i++) {
      array_pop($response_bt);
    }
  }
  elseif ($offset > 0) {
    for ($i = 1; $i <= $offset; $i++) {
      array_shift($response_bt);
    }
  }

  $old_arr = $response_bt;
  $response_bt = array();
  $i = 1;
  foreach($old_arr as $old_val) {
      $response_bt[$i]  = $old_val;
      $i++;
  }

  foreach($response_bt as $r=>$row) {
    foreach ($row as $i=>$item) {
      $response_bt[$r][$i]['row'] = $r;
      $response_bt[$r][$i]['grid_y'] = $r;
    }
  }

  return $response_bt;
}

/*
 *
 * name: jellomatrix_doubleflip_response_offset
 * @param = $tone, $interval
 * @return = array()
 *
 */
function jellomatrix_doubleflip_response_offset($tone, $interval, $offset) {
  $matrix_count = 1;
  $response_bt = array();

  // Make sure the line above took.
  if ($interval >= $tone) {
    $balance = $interval - $tone;
    $row = 0;
    for ($i = 1; $i <= $interval; $i++) {
      $row++;
      $column = 0;
      $record = 'first';
      for ($t = 1; $t <= $tone; $t++) {
        $column++;
        if ($record == 'first') {
          if ($i == 1 ) {
            $response_bt[$i][$t]['tone'] = $tone;
          }
          else/*if ($i > 1 && $tone >= $i )*/ {
            $response_bt[$i][$t]['tone'] = $tone - ($i-1);
          }
          while ($response_bt[$i][$t]['tone'] <= 0) {
            $response_bt[$i][$t]['tone'] = $response_bt[$i][$t]['tone']+$tone;
          }
          $response_bt[$i][$t]['column'] = $column;
          $response_bt[$i][$t]['row'] = $row;
          $response_bt[$i][$t]['grid_x'] = $column;
          $response_bt[$i][$t]['grid_y'] = $row;
          $response_bt[$i][$t]['count'] = (($column-1)*$interval)+$row;
          $response_bt[$i][$t]['interval'] = floor($response_bt[$i][$t]['count']/$tone*$interval);
          $response_bt[$i][$t]['color'] = '#333';
          $response_bt[$i][$t]['opacity'] = 1;
          $response_bt[$i][$t]['padding'] = 3;
          $response_bt[$i][$t]['background'] = '#fafafa';
          $record = $response_bt[$i][$t]['tone'];
          $matrix_count++;
        }
        else {
          while ($record <= 0) {
            $record = $record+$tone;
          }

          $new_record = $record - $balance;
          while ($new_record <= 0) {
            $new_record = $new_record + $tone;
          }
          $record = $new_record;

          $response_bt[$i][$t]['tone'] = $record;
          $response_bt[$i][$t]['column'] = $column;
          $response_bt[$i][$t]['row'] = $row;
          $response_bt[$i][$t]['grid_x'] = $column;
          $response_bt[$i][$t]['grid_y'] = $row;
          $response_bt[$i][$t]['count'] = (($column-1)*$interval)+$row;
          $response_bt[$i][$t]['interval'] = floor($response_bt[$i][$t]['count']/$tone*$interval);
          $response_bt[$i][$t]['color'] = '#333';
          $response_bt[$i][$t]['opacity'] = 1;
          $response_bt[$i][$t]['padding'] = 3;
          $response_bt[$i][$t]['background'] = '#fafafa';
          $matrix_count++;
        }
      }
    }
  }


  if ($offset < 0) {
    for ($i = 1; $i <= $offset; $i++) {
      array_pop($response_bt);
    }
  }
  elseif ($offset > 0) {
    for ($i = 1; $i <= $offset; $i++) {
      array_shift($response_bt);
    }
  }

  $old_arr = $response_bt;
  $response_bt = array();
  $i = 1;
  foreach($old_arr as $old_val) {
      $response_bt[$i]  = $old_val;
      $i++;
  }

  foreach($response_bt as $r=>$row) {
    foreach ($row as $i=>$item) {
      $response_bt[$r][$i]['row'] = $r;
      $response_bt[$r][$i]['grid_y'] = $r;
    }
  }

  return $response_bt;
}

/**
 *
 * name: jellomatrix_spliced_basetone
 * @param $prime_matrix
 * @param $response_matrix
 * @param $tone
 * @param $interval
 * @return array = array()
 *
 * @internal param $ = $prime_matrix, $prime_reversed
 */
function jellomatrix_spliced_basetone($prime_matrix, $response_matrix, $tone, $interval) {

  $spliced_bt = array();
  for ($i = 1; $i <= $interval; $i++) {
    $count = 1;
    for ($t = 1; $t <= $tone; $t++) {
      if ($prime_matrix[$i][$t]['count'] == 1) {
        $prime_matrix[$i][$t]['spliced_count'] = $prime_matrix[$i][$t]['count']*$prime_matrix[$i][$t]['column'];
        $spliced_bt[$i][$count] = $prime_matrix[$i][$t];
        $prime_splice_record = $prime_matrix[$i][$t]['spliced_count'];
        $count++;
        $response_matrix[$i][$t]['spliced_count'] = $interval + ($response_matrix[$i][$t]['count']*$response_matrix[$i][$t]['column']);
        $response_matrix[$i][$t]['column'] = $prime_matrix[$i][$t]['column']+1;
        $response_matrix[$i][$t]['grid_x'] = $prime_matrix[$i][$t]['column']+1;
        $spliced_bt[$i][$count] = $response_matrix[$i][$t];
        $response_splice_record = $response_matrix[$i][$t]['spliced_count'];
        $count++;
      }
      else { //BOOKMARK
        if (isset($response_splice_record)) {
          if (isset($prime_splice_record)) {
            $prime_matrix[$i][$t]['spliced_count'] = $prime_splice_record + $interval;
            $prime_matrix[$i][$t]['column'] = ($prime_matrix[$i][$t]['column'] * 2) - 1;
            $prime_matrix[$i][$t]['grid_x'] = $prime_matrix[$i][$t]['column'];
            $spliced_bt[$i][$count] = $prime_matrix[$i][$t];
            $count++;
            $response_matrix[$i][$t]['spliced_count'] = $response_splice_record + $interval;
            $response_matrix[$i][$t]['column'] = $prime_matrix[$i][$t]['column'] + 1;
            $response_matrix[$i][$t]['grid_x'] = $prime_matrix[$i][$t]['column']+1;
            $spliced_bt[$i][$count] = $response_matrix[$i][$t];
            $response_splice_record = $response_matrix[$i][$t]['spliced_count'];
            $count++;
          }
        }
      }
    }
  }
  return $spliced_bt;
}

/**
 *
 * name: jellomatrix_doubleflip_spliced_basetone
 * @param $prime_matrix
 * @param $response_matrix
 * @param $tone
 * @param $interval
 * @return array = array()
 *
 * @internal param $ = $prime_matrix, $prime_reversed
 */
function jellomatrix_doubleflip_spliced_basetone($prime_matrix, $response_matrix, $tone, $interval) {

  $spliced_bt = array();
  for ($i = 1; $i <= $interval; $i++) {
    $count = 1;
    for ($t = 1; $t <= $tone; $t++) {
      if ($prime_matrix[$i][$t]['count'] == 1) {
        $prime_matrix[$i][$t]['spliced_count'] = $count;
        $spliced_bt[$i][$count] = $prime_matrix[$i][$t];
        $prime_splice_record = $prime_matrix[$i][$t]['spliced_count'];
        $count++;
        $response_matrix[$i][$t]['spliced_count'] = $count;
        $response_matrix[$i][$t]['column'] = $prime_matrix[$i][$t]['column']+1;
        $response_matrix[$i][$t]['grid_x'] = $prime_matrix[$i][$t]['column']+1;
        $spliced_bt[$i][$count] = $response_matrix[$i][$t];
        $response_splice_record = $response_matrix[$i][$t]['spliced_count'];
        $count++;
      }
      else {
        if (isset($response_splice_record)) {
          if (isset($prime_splice_record)) {
            $prime_matrix[$i][$t]['spliced_count'] = $count;
            $prime_matrix[$i][$t]['column'] = ($prime_matrix[$i][$t]['column'] * 2) - 1;
            $prime_matrix[$i][$t]['grid_x'] = $prime_matrix[$i][$t]['column'];
            $spliced_bt[$i][$count] = $prime_matrix[$i][$t];
            $count++;
            $response_matrix[$i][$t]['spliced_count'] = $count;
            $response_matrix[$i][$t]['column'] = $prime_matrix[$i][$t]['column'] + 1;
            $response_matrix[$i][$t]['grid_x'] = $prime_matrix[$i][$t]['column']+1;
            $spliced_bt[$i][$count] = $response_matrix[$i][$t];
            $response_splice_record = $response_matrix[$i][$t]['spliced_count'];
            $count++;
          }
        }
      }
    }
  }

  return $spliced_bt;
}



/**
 *
 * name: jellomatrix_spliced_offset
 * @param $prime_matrix
 * @param $response_matrix
 * @param $tone
 * @param $interval
 * @param $offset
 * @return array = array()
 *
 * @internal param $ = $prime_matrix, $prime_reversed
 */
function jellomatrix_spliced_offset($prime_matrix, $response_matrix, $tone, $interval, $offset) {
  $spliced_bt = array();

  $intoff = $interval - abs($offset);
  for ($i = 1; $i <= $intoff; $i++) {
    $count = 1;
    for ($t = 1; $t <= $tone; $t++) {
      if ($prime_matrix[$i][$t]['count'] == 1) {
        $prime_matrix[$i][$t]['spliced_count'] = $prime_matrix[$i][$t]['count']*$prime_matrix[$i][$t]['column'];
        $spliced_bt[$i][$count] = $prime_matrix[$i][$t];
        $prime_splice_record = $prime_matrix[$i][$t]['spliced_count'];
        $count++;
        $response_matrix[$i][$t]['spliced_count'] = $interval + ($response_matrix[$i][$t]['count']*$response_matrix[$i][$t]['column']);
        $response_matrix[$i][$t]['column'] = $prime_matrix[$i][$t]['column']+1;
        $response_matrix[$i][$t]['grid_x'] = $prime_matrix[$i][$t]['column']+1;
        $spliced_bt[$i][$count] = $response_matrix[$i][$t];
        $response_splice_record = $response_matrix[$i][$t]['spliced_count'];
        $count++;
      }
      else {
        if (isset($response_splice_record)) {
          if (isset($prime_splice_record)) {
            $prime_matrix[$i][$t]['spliced_count'] = $prime_splice_record + $interval;
            $prime_matrix[$i][$t]['column'] = ($prime_matrix[$i][$t]['column'] * 2) - 1;
            $prime_matrix[$i][$t]['grid_x'] = $prime_matrix[$i][$t]['column'];
            $spliced_bt[$i][$count] = $prime_matrix[$i][$t];
            $count++;
            $response_matrix[$i][$t]['spliced_count'] = $response_splice_record + $interval;
            $response_matrix[$i][$t]['column'] = $prime_matrix[$i][$t]['column'] + 1;
            $response_matrix[$i][$t]['grid_x'] = $prime_matrix[$i][$t]['column'] + 1;
            $spliced_bt[$i][$count] = $response_matrix[$i][$t];
            $response_splice_record = $response_matrix[$i][$t]['spliced_count'];
            $count++;
          }
        }
      }
    }
  }
  return $spliced_bt;
}

/**
 *
 * name: jellomatrix_doubleflip_spliced_offset
 * @param $prime_matrix
 * @param $response_matrix
 * @param $tone
 * @param $interval
 * @param $offset
 * @return array = array()
 *
 * @internal param $ = $prime_matrix, $prime_reversed
 */
function jellomatrix_doubleflip_spliced_offset($prime_matrix, $response_matrix, $tone, $interval, $offset) {
  $spliced_bt = array();

  $intoff = $interval - abs($offset);
  for ($i = 1; $i <= $intoff; $i++) {
    $count = 1;
    for ($t = 1; $t <= $tone; $t++) {
      if ($prime_matrix[$i][$t]['count'] == 1) {
        $prime_matrix[$i][$t]['spliced_count'] = $prime_matrix[$i][$t]['count']*$prime_matrix[$i][$t]['column'];
        $spliced_bt[$i][$count] = $prime_matrix[$i][$t];
        $prime_splice_record = $prime_matrix[$i][$t]['spliced_count'];
        $count++;
        $response_matrix[$i][$t]['spliced_count'] =  $interval + ($response_matrix[$i][$t]['count']*$response_matrix[$i][$t]['column']);
        $response_matrix[$i][$t]['column'] = $prime_matrix[$i][$t]['column']+1;
        $response_matrix[$i][$t]['grid_x'] = $prime_matrix[$i][$t]['column']+1;
        $spliced_bt[$i][$count] = $response_matrix[$i][$t];
        $response_splice_record = $response_matrix[$i][$t]['spliced_count'];
        $count++;
      }
      else {
        if (isset($response_splice_record)) {
          if (isset($prime_splice_record)) {
            $prime_matrix[$i][$t]['spliced_count'] =  $prime_splice_record + $interval;
            $prime_matrix[$i][$t]['column'] = ($prime_matrix[$i][$t]['column'] * 2) - 1;
            $prime_matrix[$i][$t]['grid_x'] = $prime_matrix[$i][$t]['column'];
            $spliced_bt[$i][$count] = $prime_matrix[$i][$t];
            $count++;
            $response_matrix[$i][$t]['spliced_count'] =  $response_splice_record + $interval;
            $response_matrix[$i][$t]['column'] = $prime_matrix[$i][$t]['column'] + 1;
            $response_matrix[$i][$t]['grid_x'] = $prime_matrix[$i][$t]['column'] + 1;
            $spliced_bt[$i][$count] = $response_matrix[$i][$t];
            $response_splice_record = $response_matrix[$i][$t]['spliced_count'];
            $count++;
          }
        }
      }
    }
  }
  return $spliced_bt;
}

function jellomatrix_wave_preparation($prime_matrix, $tone, $interval, $spliced_matrix) {
  
  $prime_series = array();
  
  $prime_series_calculator = (($tone + 1) / 2);
  for ($t = 0; $t < $tone; $t++) {
    if ($t == 0) {
      $prime_series[$t] = 1;
      $next = 1;
    } elseif (isset($next) && $next >= 1) {
      $progression = $next + $prime_series_calculator;
      if ($progression > $tone) {
        $progression = $progression - $tone;
      }
      $prime_series[$t] = $progression;
      $next = $progression;
    }
  }
  
  // Interesting to note that this can be taken away as it does not seem to matter.
  // Except on certain ones which it does matter one way or another on.
  $prime_series_reversed = array_reverse($prime_series);
  
  foreach ($spliced_matrix as $key => $spliced_row) {
    $fount = 1;
    foreach ($spliced_row as $k => $item) {
      if (isset($spliced_matrix[$key][$k + 1]['tone'])) {
        if ($spliced_matrix[$key][$k + 1]['tone'] == $spliced_matrix[$key][$k]['tone']) {
          $spliced_matrix[$key][$k]['wave_limit'] = 'active';
          $spliced_matrix[$key][$k + 1]['pole_shift'] = 'right';  // TODO: 2=right value, 1=left value
          $spliced_matrix[$key][$k]['pole_shift'] = 'left';  // TODO: 2=right value, 1=left value
          if ($fount == 1) {
            $spliced_matrix[$key][$k]['first'] = 1;
          }
          $fount++;
        }
        else {
          $return = (2*$tone) - 1;
          if (isset($spliced_matrix[$key][$return]['tone']) && $spliced_matrix[$key][$return]['tone'] == $spliced_matrix[$key][$k]['tone'] && $k == 1 && $fount == 1) {
            $spliced_matrix[$key][$k]['wave_limit'] = 'active';
            $spliced_matrix[$key][$k]['pole_shift'] = 'right';  // TODO: 2=right value, 1=left value
            if ($fount == 1) {
              $spliced_matrix[$key][$k]['first'] = 1;
            }
            $fount++;
          }
        }
        
        foreach ($prime_series as $position => $note) {
          if ($item['tone'] == $note) {
            // We don't want to start at zero.
            $spliced_matrix[$key][$k]['scale_position'] = $position + 1;
          }
        }
      }
      if (isset($spliced_matrix[$key][$k - 1]['tone'])) {
        if ($spliced_matrix[$key][$k - 1]['tone'] == $spliced_matrix[$key][$k]['tone']) {
          $fount++;
          $spliced_matrix[$key][$k]['wave_limit'] = 'active';
          $spliced_matrix[$key][$k - 1]['pole_shift'] = 'left';  // TODO: 2=right value, 1=left value
          $spliced_matrix[$key][$k]['pole_shift'] = 'right';  // TODO: 2=right value, 1=left value
        }
        foreach ($prime_series as $position => $note) {
          if ($item['tone'] == $note) {
            // We don't want to start at zero.
            $spliced_matrix[$key][$k]['scale_position'] = $position + 1;
          }
        }
      }
      if (!isset($spliced_matrix[$key][$k + 1]['tone'])) {
        $bridge_kplus = ($k + 1) - (2 * $tone);
        if ($spliced_matrix[$key][$bridge_kplus]['tone'] == $spliced_matrix[$key][$k]['tone']) {
          $fount++;
          $spliced_matrix[$key][$k]['wave_limit'] = 'active';
          $spliced_matrix[$key][$bridge_kplus]['pole_shift'] = 'right';  // TODO: 2=right value, 1=left value
          $spliced_matrix[$key][$k]['pole_shift'] = 'left';  // TODO: 2=right value, 1=left value
        }
        foreach ($prime_series as $position => $note) {
          if ($item['tone'] == $note) {
            // We don't want to start at zero.
            $spliced_matrix[$key][$k]['scale_position'] = $position + 1;
          }
        }
      }
      if (!isset($spliced_matrix[$key][$k - 1]['tone'])) {
        $bridge_kminus = ($k - 1) + (2 * $tone);
        if ($spliced_matrix[$key][$bridge_kminus]['tone'] == $spliced_matrix[$key][$k]['tone']) {
          $fount++;
          $spliced_matrix[$key][$k]['wave_limit'] = 'active';
          $spliced_matrix[$key][$bridge_kminus]['pole_shift'] = 'left';  // TODO: 2=right value, 1=left value
          $spliced_matrix[$key][$k]['pole_shift'] = 'right';  // TODO: 2=right value, 1=left value
        }
        foreach ($prime_series as $position => $note) {
          if ($item['tone'] == $note) {
            // We don't want to start at zero.
            $spliced_matrix[$key][$k]['scale_position'] = $position + 1;
          }
        }
      }
    }
    unset($fount);
  }
  
  foreach ($spliced_matrix as $key => $spliced_row) {
    foreach ($spliced_row as $k => $item) {
      if (!isset($item['scale_position'])) {
        $no_scales = 'no scales';
      }
      if (isset($item['pole_shift']) && !isset($no_scales)) {
        if ($item['pole_shift'] == 'left') {
          $spliced_matrix[$key][$k]['scale'] = $spliced_matrix[$key][$k]['scale_position'];
          $spliced_matrix[$key][$k]['phase_color'] = 'red';
          if (isset($spliced_matrix[$key][$k]['scale']) && isset($spliced_matrix[$key][$k]['scale_position'])) {
            if (isset($spliced_matrix[$key + 1][$k - 2]) && isset($spliced_matrix[$key][$k]['scale'])) {
              if ($spliced_matrix[$key][$k]['scale_position'] < $tone) {
                if ($spliced_matrix[$key + 1][$k - 2]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] + 1) {
                  $spliced_matrix[$key + 1][$k - 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                  $spliced_matrix[$key + 1][$k - 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                }
              } else {
                if ($spliced_matrix[$key + 1][$k - 2]['scale_position'] == 1) {
                  $spliced_matrix[$key + 1][$k - 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                  $spliced_matrix[$key + 1][$k - 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                }
              }
            }
            if (isset($spliced_matrix[$key - 1][$k - 2]) && isset($spliced_matrix[$key][$k]['scale'])) {
              if ($spliced_matrix[$key][$k]['scale_position'] < $tone) {
                if ($spliced_matrix[$key - 1][$k - 2]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] + 1) {
                  $spliced_matrix[$key - 1][$k - 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                  $spliced_matrix[$key - 1][$k - 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                }
              } else {
                if ($spliced_matrix[$key - 1][$k - 2]['scale_position'] == 1) {
                  $spliced_matrix[$key - 1][$k - 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                  $spliced_matrix[$key - 1][$k - 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                }
              }
            }
            if (!isset($spliced_matrix[$key + 1][$k - 2]) && isset($spliced_matrix[$key][$k]['scale']) && isset($spliced_matrix[$key][$k]['scale_position'])) {
              unset($new_key);
              unset($bridge_kplus);
              if (!isset($spliced_matrix[$key + 1])) {
                $new_key = ($key + 1) - $interval;
                if (!isset($spliced_matrix[$new_key][$k - 2])) {
                  $bridge_kplus = (2 * $tone) + ($k - 2);
                }
              }
              if (isset($spliced_matrix[$key + 1])) {
                if (!isset($spliced_matrix[$key + 1][$k - 2])) {
                  $bridge_kplus = (2 * $tone) + ($k - 2);
                }
              }
              if (isset($new_key) && !isset($bridge_kplus)) {
                if ($spliced_matrix[$key][$k]['scale_position'] < $tone) {
                  if ($spliced_matrix[$new_key][$k - 2]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] + 1) {
                    $spliced_matrix[$new_key][$k - 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$new_key][$k - 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                } else {
                  if ($spliced_matrix[$new_key][$k - 2]['scale_position'] == 1) {
                    $spliced_matrix[$new_key][$k - 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$new_key][$k - 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                }
              }
              if (isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix[$key][$k]['scale_position'] < $tone) {
                  if ($spliced_matrix[$new_key][$bridge_kplus]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] + 1) {
                    $spliced_matrix[$new_key][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                } else {
                  if ($spliced_matrix[$new_key][$bridge_kplus]['scale_position'] == 1) {
                    $spliced_matrix[$new_key][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                }
              }
              if (!isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix[$key][$k]['scale_position'] < $tone) {
                  if ($spliced_matrix[$key + 1][$bridge_kplus]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] + 1) {
                    $spliced_matrix[$key + 1][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$key + 1][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                } else {
                  if ($spliced_matrix[$key + 1][$bridge_kplus]['scale_position'] == 1) {
                    $spliced_matrix[$key + 1][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$key + 1][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                }
              }
            }
            if (!isset($spliced_matrix[$key - 1][$k - 2]) && isset($spliced_matrix[$key][$k]['scale'])) {
              unset($new_key);
              unset($bridge_kplus);
              if (!isset($spliced_matrix[$key - 1])) {
                $new_key = ($key - 1) + $interval;
                if (!isset($spliced_matrix[$new_key][$k - 2])) {
                  $bridge_kplus = (2 * $tone) + ($k - 2);
                }
              }
              if (isset($spliced_matrix[$key - 1])) {
                if (!isset($spliced_matrix[$key - 1][$k - 2])) {
                  $bridge_kplus = (2 * $tone) + ($k - 2);
                }
              }
              if (isset($new_key) && !isset($bridge_kplus)) {
                if ($spliced_matrix[$key][$k]['scale_position'] < $tone && isset($spliced_matrix[$new_key][$k - 2]['scale_position'])) {
                  if ($spliced_matrix[$new_key][$k - 2]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] + 1) {
                    $spliced_matrix[$new_key][$k - 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$new_key][$k - 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                } else {
                  if ($spliced_matrix[$new_key][$k - 2]['scale_position'] == 1) {
                    $spliced_matrix[$new_key][$k - 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$new_key][$k - 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                }
              }
              if (isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix[$key][$k]['scale_position'] < $tone && isset($spliced_matrix[$new_key][$bridge_kplus]['scale_position'])) {
                  if ($spliced_matrix[$new_key][$bridge_kplus]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] + 1) {
                    $spliced_matrix[$new_key][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                } else {
                  if (isset($spliced_matrix[$new_key][$bridge_kplus]['scale_position']) && $spliced_matrix[$new_key][$bridge_kplus]['scale_position'] == 1) {
                    $spliced_matrix[$new_key][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                }
              }
              if (!isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix[$key][$k]['scale_position'] < $tone && isset($spliced_matrix[$key - 1][$bridge_kplus]['scale_position'])) {
                  if ($spliced_matrix[$key - 1][$bridge_kplus]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] + 1) {
                    $spliced_matrix[$key - 1][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$key - 1][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                } else {
                  if ($spliced_matrix[$key - 1][$bridge_kplus]['scale_position'] == 1) {
                    $spliced_matrix[$key - 1][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$key - 1][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                }
              }
            }
          }
        }
        if ($item['pole_shift'] == 'right' && isset($spliced_matrix[$key][$k]['scale_position'])) {
          $spliced_matrix[$key][$k]['scale'] = $spliced_matrix[$key][$k]['scale_position'];
          $spliced_matrix[$key][$k]['phase_color'] = 'green';
          if (isset($spliced_matrix[$key][$k]['scale'])) {
            if (isset($spliced_matrix[$key + 1][$k + 2]) && isset($spliced_matrix[$key][$k]['scale'])) {
              if ($spliced_matrix[$key][$k]['scale_position'] > 1) {
                if ($spliced_matrix[$key + 1][$k + 2]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] - 1) {
                  $spliced_matrix[$key + 1][$k + 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                  if (isset($spliced_matrix[$key + 1][$k + 2]['phase_color'])) {
                    $spliced_matrix[$key + 1][$k + 2]['phase_color'] = 'purple';
                  } else {
                    $spliced_matrix[$key + 1][$k + 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                }
              } else {
                if ($spliced_matrix[$key + 1][$k + 2]['scale_position'] == $tone) {
                  $spliced_matrix[$key + 1][$k + 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                  if (isset($spliced_matrix[$key + 1][$k + 2]['phase_color'])) {
                    $spliced_matrix[$key + 1][$k + 2]['phase_color'] = 'purple';
                  } else {
                    
                    $spliced_matrix[$key + 1][$k + 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                }
              }
            }
            if (isset($spliced_matrix[$key - 1][$k + 2]) && isset($spliced_matrix[$key][$k]['scale'])) {
              if ($spliced_matrix[$key][$k]['scale_position'] > 1) {
                if ($spliced_matrix[$key - 1][$k + 2]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] - 1) {
                  $spliced_matrix[$key - 1][$k + 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                  if (isset($spliced_matrix[$key - 1][$k + 2]['phase_color'])) {
                    $spliced_matrix[$key - 1][$k + 2]['phase_color'] = 'purple';
                  } else {
                    $spliced_matrix[$key - 1][$k + 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                }
              } else {
                if ($spliced_matrix[$key - 1][$k + 2]['scale_position'] == $tone) {
                  $spliced_matrix[$key - 1][$k + 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                  if (isset($spliced_matrix[$key - 1][$k + 2]['phase_color'])) {
                    $spliced_matrix[$key - 1][$k + 2]['phase_color'] = 'purple';
                  } else {
                    $spliced_matrix[$key - 1][$k + 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                }
              }
            }
            if (!isset($spliced_matrix[$key + 1][$k + 2]) && isset($spliced_matrix[$key][$k]['scale'])) {
              unset($new_key);
              unset($bridge_kplus);
              if (!isset($spliced_matrix[$key + 1])) {
                $new_key = ($key + 1) - $interval;
                if (!isset($spliced_matrix[$new_key][$k + 2])) {
                  $bridge_kplus = ($k + 2) - (2 * $tone);
                }
              }
              if (isset($spliced_matrix[$key + 1])) {
                if (!isset($spliced_matrix[$key + 1][$k + 2])) {
                  $bridge_kplus = ($k + 2) - (2 * $tone);
                }
              }
              if (isset($bridge_kplus)) {
                if ($bridge_kplus > (2 * $tone)) {
                  $bridge_kplus = (3 * $tone) - $bridge_kplus;
                }
                if ($bridge_kplus < 1) {
                  $bridge_kplus = $bridge_kplus + $tone;
                }
              }
              if (isset($new_key) && !isset($bridge_kplus)) {
                if ($spliced_matrix[$key][$k]['scale_position'] > 1 && isset($spliced_matrix[$new_key][$k + 2]['scale_position'])) {
                  if ($spliced_matrix[$new_key][$k + 2]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] - 1) {
                    $spliced_matrix[$new_key][$k + 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    if (isset($spliced_matrix[$new_key][$k + 2]['phase_color'])) {
                      $spliced_matrix[$new_key][$k + 2]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix[$new_key][$k + 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                    }
                  }
                } else {
                  if ($spliced_matrix[$new_key][$k + 2]['scale_position'] == $tone) {
                    $spliced_matrix[$new_key][$k + 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    $spliced_matrix[$new_key][$k + 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                  }
                }
              }
              if (isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix[$key][$k]['scale_position'] > 1 && isset($spliced_matrix[$new_key][$bridge_kplus]['scale_position'])) {
                  if ($spliced_matrix[$new_key][$bridge_kplus]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] - 1) {
                    $spliced_matrix[$new_key][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    if (isset($spliced_matrix[$new_key][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix[$new_key][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                    }
                  }
                } else {
                  if ($spliced_matrix[$new_key][$bridge_kplus]['scale_position'] == $tone) {
                    $spliced_matrix[$new_key][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    if (isset($spliced_matrix[$new_key][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix[$new_key][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                    }
                  }
                }
              }
              if (!isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix[$key][$k]['scale_position'] > 1 && isset($spliced_matrix[$key + 1][$bridge_kplus]['scale_position'])) {
                  if ($spliced_matrix[$key + 1][$bridge_kplus]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] - 1) {
                    $spliced_matrix[$key + 1][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    if (isset($spliced_matrix[$key + 1][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix[$key + 1][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix[$key + 1][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                    }
                  }
                } else {
                  if ($spliced_matrix[$key + 1][$bridge_kplus]['scale_position'] == $tone) {
                    $spliced_matrix[$key + 1][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    if (isset($spliced_matrix[$key + 1][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix[$key + 1][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix[$key + 1][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                    }
                  }
                }
              }
            }
            if (!isset($spliced_matrix[$key - 1][$k + 2]) && isset($spliced_matrix[$key][$k]['scale'])) {
              unset($new_key);
              unset($bridge_kplus);
              if (!isset($spliced_matrix[$key - 1])) {
                $new_key = ($key - 1) + $interval;
                if (!isset($spliced_matrix[$new_key][$k + 2])) {
                  $bridge_kplus = ($k + 2) - (2 * $tone);
                }
              }
              if (isset($spliced_matrix[$key - 1])) {
                if (!isset($spliced_matrix[$key - 1][$k + 2])) {
                  $bridge_kplus = ($k + 2) - (2 * $tone);
                }
              }
              if (isset($bridge_kplus)) {
                if ($bridge_kplus > (2 * $tone)) {
                  $bridge_kplus = (3 * $tone) - $bridge_kplus;
                }
                if ($bridge_kplus < 1) {
                  $bridge_kplus = $bridge_kplus + $tone;
                }
              }
              if (isset($new_key) && !isset($bridge_kplus)) {
                if ($spliced_matrix[$key][$k]['scale_position'] > 1 && isset($spliced_matrix[$new_key][$k + 2]['scale_position'])) {
                  if ($spliced_matrix[$new_key][$k + 2]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] - 1) {
                    $spliced_matrix[$new_key][$k + 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    if (isset($spliced_matrix[$new_key][$k + 2]['phase_color'])) {
                      $spliced_matrix[$new_key][$k + 2]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix[$new_key][$k + 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                    }
                  }
                } else {
                  if (isset($bridge_plus) && isset($spliced_matrix[$new_key][$bridge_kplus]['scale_position']) && $spliced_matrix[$new_key][$k + 2]['scale_position'] == $tone) {
                    $spliced_matrix[$new_key][$k + 2]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    if (isset($spliced_matrix[$new_key][$k + 2]['phase_color'])) {
                      $spliced_matrix[$new_key][$k + 2]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix[$new_key][$k + 2]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                    }
                  }
                }
              }
              if (isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix[$key][$k]['scale_position'] > 1 && isset($spliced_matrix[$new_key][$bridge_kplus]['scale_position'])) {
                  if ($spliced_matrix[$new_key][$bridge_kplus]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] - 1) {
                    $spliced_matrix[$new_key][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    if (isset($spliced_matrix[$new_key][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix[$new_key][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                    }
                  }
                } else {
                  if ($spliced_matrix[$new_key][$bridge_kplus]['scale_position'] == $tone) {
                    $spliced_matrix[$new_key][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    if (isset($spliced_matrix[$new_key][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix[$new_key][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                    }
                  }
                }
              }
              if (!isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix[$key][$k]['scale_position'] > 1 && isset($spliced_matrix[$key - 1][$bridge_kplus]['scale_position'])) {
                  if ($spliced_matrix[$key - 1][$bridge_kplus]['scale_position'] == $spliced_matrix[$key][$k]['scale_position'] - 1) {
                    $spliced_matrix[$key - 1][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    if (isset($spliced_matrix[$key - 1][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix[$key - 1][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix[$key - 1][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                    }
                  }
                } else {
                  if ($spliced_matrix[$key - 1][$bridge_kplus]['scale_position'] == $tone) {
                    $spliced_matrix[$key - 1][$bridge_kplus]['scale'] = $spliced_matrix[$key][$k]['scale'];
                    if (isset($spliced_matrix[$key - 1][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix[$key - 1][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix[$key - 1][$bridge_kplus]['phase_color'] = $spliced_matrix[$key][$k]['phase_color'];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  // NOW USING THE REVERSE PRIME SERIES.
  $spliced_matrix_reversed = $spliced_matrix;
  
  foreach ($spliced_matrix_reversed as $key => $spliced_row) {
    $dount = 1;
    foreach ($spliced_row as $k => $item) {
      if (isset($spliced_matrix_reversed[$key][$k + 1]['tone'])) {
        if ($spliced_matrix_reversed[$key][$k + 1]['tone'] == $spliced_matrix_reversed[$key][$k]['tone']) {
          $spliced_matrix_reversed[$key][$k]['wave_limit'] = 'active';
          $spliced_matrix_reversed[$key][$k + 1]['pole_shift'] = 'right';  // TODO: 2=right value, 1=left value
          $spliced_matrix_reversed[$key][$k]['pole_shift'] = 'left';  // TODO: 2=right value, 1=left value
          if ($dount == 1) {
            $spliced_matrix[$key][$k]['first'] = 1;
          }
          $dount++;
        }
        foreach ($prime_series_reversed as $position => $note) {
          if ($item['tone'] == $note) {
            // We don't want to start at zero.
            $spliced_matrix_reversed[$key][$k]['scale_position'] = $position + 1;
          }
        }
      }
      if (isset($spliced_matrix_reversed[$key][$k - 1]['tone'])) {
        if ($spliced_matrix_reversed[$key][$k - 1]['tone'] == $spliced_matrix_reversed[$key][$k]['tone']) {
          $dount++;
          $spliced_matrix_reversed[$key][$k]['wave_limit'] = 'active';
          $spliced_matrix_reversed[$key][$k - 1]['pole_shift'] = 'left';  // TODO: 2=right value, 1=left value
          $spliced_matrix_reversed[$key][$k]['pole_shift'] = 'right';  // TODO: 2=right value, 1=left value
        }
        foreach ($prime_series_reversed as $position => $note) {
          if ($item['tone'] == $note) {
            // We don't want to start at zero.
            $spliced_matrix_reversed[$key][$k]['scale_position'] = $position + 1;
          }
        }
      }
      if (!isset($spliced_matrix_reversed[$key][$k + 1]['tone'])) {
        $bridge_kplus = ($k + 1) - (2 * $tone);
        if ($spliced_matrix_reversed[$key][$bridge_kplus]['tone'] == $spliced_matrix_reversed[$key][$k]['tone']) {
          $dount++;
          $spliced_matrix_reversed[$key][$k]['wave_limit'] = 'active';
          $spliced_matrix_reversed[$key][$bridge_kplus]['pole_shift'] = 'right';  // TODO: 2=right value, 1=left value
          $spliced_matrix_reversed[$key][$k]['pole_shift'] = 'left';  // TODO: 2=right value, 1=left value
        }
        foreach ($prime_series_reversed as $position => $note) {
          if ($item['tone'] == $note) {
            // We don't want to start at zero.
            $spliced_matrix_reversed[$key][$k]['scale_position'] = $position + 1;
          }
        }
      }
      if (!isset($spliced_matrix_reversed[$key][$k - 1]['tone'])) {
        $bridge_kminus = ($k - 1) + (2 * $tone);
        if ($spliced_matrix_reversed[$key][$bridge_kminus]['tone'] == $spliced_matrix_reversed[$key][$k]['tone']) {
          $dount++;
          $spliced_matrix_reversed[$key][$k]['wave_limit'] = 'active';
          $spliced_matrix_reversed[$key][$bridge_kminus]['pole_shift'] = 'left';  // TODO: 2=right value, 1=left value
          $spliced_matrix_reversed[$key][$k]['pole_shift'] = 'right';  // TODO: 2=right value, 1=left value
        }
        foreach ($prime_series_reversed as $position => $note) {
          if ($item['tone'] == $note) {
            // We don't want to start at zero.
            $spliced_matrix_reversed[$key][$k]['scale_position'] = $position + 1;
          }
        }
      }
    }
  }
  
  foreach ($spliced_matrix_reversed as $key => $spliced_row) {
    $qount = 1;
    foreach ($spliced_row as $k => $item) {
      if (!isset($item['scale_position'])) {
        $no_scales = 'no scales';
      }
      if (isset($item['pole_shift']) && !isset($no_scales)) {
        if ($item['pole_shift'] == 'left') {
          $spliced_matrix_reversed[$key][$k]['scale'] = $spliced_matrix_reversed[$key][$k]['scale_position'];
          $spliced_matrix_reversed[$key][$k]['phase_color'] = 'red';
          if (isset($spliced_matrix_reversed[$key][$k]['scale']) && isset($spliced_matrix_reversed[$key][$k]['scale_position'])) {
            if (isset($spliced_matrix_reversed[$key + 1][$k - 2]) && isset($spliced_matrix_reversed[$key][$k]['scale'])) {
              if ($spliced_matrix_reversed[$key][$k]['scale_position'] < $tone) {
                if ($spliced_matrix_reversed[$key + 1][$k - 2]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] + 1) {
                  $spliced_matrix_reversed[$key + 1][$k - 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                  $spliced_matrix_reversed[$key + 1][$k - 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                }
              } else {
                if ($spliced_matrix_reversed[$key + 1][$k - 2]['scale_position'] == 1) {
                  $spliced_matrix_reversed[$key + 1][$k - 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                  $spliced_matrix_reversed[$key + 1][$k - 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                }
              }
            }
            if (isset($spliced_matrix_reversed[$key - 1][$k - 2]) && isset($spliced_matrix_reversed[$key][$k]['scale'])) {
              if ($spliced_matrix_reversed[$key][$k]['scale_position'] < $tone) {
                if ($spliced_matrix_reversed[$key - 1][$k - 2]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] + 1) {
                  $spliced_matrix_reversed[$key - 1][$k - 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                  $spliced_matrix_reversed[$key - 1][$k - 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                }
              } else {
                if ($spliced_matrix_reversed[$key - 1][$k - 2]['scale_position'] == 1) {
                  $spliced_matrix_reversed[$key - 1][$k - 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                  $spliced_matrix_reversed[$key - 1][$k - 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                }
              }
            }
            if (!isset($spliced_matrix_reversed[$key + 1][$k - 2]) && isset($spliced_matrix_reversed[$key][$k]['scale']) && isset($spliced_matrix_reversed[$key][$k]['scale_position'])) {
              unset($new_key);
              unset($bridge_kplus);
              if (!isset($spliced_matrix_reversed[$key + 1])) {
                $new_key = ($key + 1) - $interval;
                if (!isset($spliced_matrix_reversed[$new_key][$k - 2])) {
                  $bridge_kplus = (2 * $tone) + ($k - 2);
                }
              }
              if (isset($spliced_matrix_reversed[$key + 1])) {
                if (!isset($spliced_matrix_reversed[$key + 1][$k - 2])) {
                  $bridge_kplus = (2 * $tone) + ($k - 2);
                }
              }
              if (isset($new_key) && !isset($bridge_kplus)) {
                if ($spliced_matrix_reversed[$key][$k]['scale_position'] < $tone && isset($spliced_matrix_reversed[$new_key][$k - 2]['scale_position'])) {
                  if ($spliced_matrix_reversed[$new_key][$k - 2]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] + 1) {
                    $spliced_matrix_reversed[$new_key][$k - 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$new_key][$k - 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                } else {
                  if ($spliced_matrix_reversed[$new_key][$k - 2]['scale_position'] == 1) {
                    $spliced_matrix_reversed[$new_key][$k - 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$new_key][$k - 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                }
              }
              if (isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix_reversed[$key][$k]['scale_position'] < $tone && isset($spliced_matrix_reversed[$new_key][$bridge_kplus]['scale_position'])) {
                  if ($spliced_matrix_reversed[$new_key][$bridge_kplus]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] + 1) {
                    $spliced_matrix_reversed[$new_key][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                } else {
                  if ($spliced_matrix_reversed[$new_key][$bridge_kplus]['scale_position'] == 1) {
                    $spliced_matrix_reversed[$new_key][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                }
              }
              if (!isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix_reversed[$key][$k]['scale_position'] < $tone && isset($spliced_matrix_reversed[$key + 1][$bridge_kplus]['scale_position'])) {
                  if ($spliced_matrix_reversed[$key + 1][$bridge_kplus]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] + 1) {
                    $spliced_matrix_reversed[$key + 1][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$key + 1][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                } else {
                  if ($spliced_matrix_reversed[$key + 1][$bridge_kplus]['scale_position'] == 1) {
                    $spliced_matrix_reversed[$key + 1][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$key + 1][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                }
              }
            }
            if (!isset($spliced_matrix_reversed[$key - 1][$k - 2]) && isset($spliced_matrix_reversed[$key][$k]['scale'])) {
              unset($new_key);
              unset($bridge_kplus);
              if (!isset($spliced_matrix_reversed[$key - 1])) {
                $new_key = ($key - 1) + $interval;
                if (!isset($spliced_matrix_reversed[$new_key][$k - 2])) {
                  $bridge_kplus = (2 * $tone) + ($k - 2);
                }
              }
              if (isset($spliced_matrix_reversed[$key - 1])) {
                if (!isset($spliced_matrix_reversed[$key - 1][$k - 2])) {
                  $bridge_kplus = (2 * $tone) + ($k - 2);
                }
              }
              if (isset($new_key) && !isset($bridge_kplus)) {
                if ($spliced_matrix_reversed[$key][$k]['scale_position'] < $tone) {
                  if ($spliced_matrix_reversed[$new_key][$k - 2]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] + 1) {
                    $spliced_matrix_reversed[$new_key][$k - 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$new_key][$k - 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                } else {
                  if ($spliced_matrix_reversed[$new_key][$k - 2]['scale_position'] == 1) {
                    $spliced_matrix_reversed[$new_key][$k - 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$new_key][$k - 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                }
              }
              if (isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix_reversed[$key][$k]['scale_position'] < $tone) {
                  if ($spliced_matrix_reversed[$new_key][$bridge_kplus]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] + 1) {
                    $spliced_matrix_reversed[$new_key][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                } else {
                  if ($spliced_matrix_reversed[$new_key][$bridge_kplus]['scale_position'] == 1) {
                    $spliced_matrix_reversed[$new_key][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                }
              }
              if (!isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix_reversed[$key][$k]['scale_position'] < $tone) {
                  if ($spliced_matrix_reversed[$key - 1][$bridge_kplus]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] + 1) {
                    $spliced_matrix_reversed[$key - 1][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$key - 1][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                } else {
                  if ($spliced_matrix_reversed[$key - 1][$bridge_kplus]['scale_position'] == 1) {
                    $spliced_matrix_reversed[$key - 1][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$key - 1][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                }
              }
            }
          }
        }
        if ($item['pole_shift'] == 'right' && isset($spliced_matrix_reversed[$key][$k]['scale_position'])) {
          $spliced_matrix_reversed[$key][$k]['scale'] = $spliced_matrix_reversed[$key][$k]['scale_position'];
          $spliced_matrix_reversed[$key][$k]['phase_color'] = 'green';
          if (isset($spliced_matrix_reversed[$key][$k]['scale'])) {
            if (isset($spliced_matrix_reversed[$key + 1][$k + 2]) && isset($spliced_matrix_reversed[$key][$k]['scale'])) {
              if ($spliced_matrix_reversed[$key][$k]['scale_position'] > 1) {
                if ($spliced_matrix_reversed[$key + 1][$k + 2]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] - 1) {
                  $spliced_matrix_reversed[$key + 1][$k + 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                  if (isset($spliced_matrix_reversed[$key + 1][$k + 2]['phase_color'])) {
                    $spliced_matrix_reversed[$key + 1][$k + 2]['phase_color'] = 'purple';
                  } else {
                    $spliced_matrix_reversed[$key + 1][$k + 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                }
              } else {
                if ($spliced_matrix_reversed[$key + 1][$k + 2]['scale_position'] == $tone) {
                  $spliced_matrix_reversed[$key + 1][$k + 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                  if (isset($spliced_matrix_reversed[$key + 1][$k + 2]['phase_color'])) {
                    $spliced_matrix_reversed[$key + 1][$k + 2]['phase_color'] = 'purple';
                  } else {
                    
                    $spliced_matrix_reversed[$key + 1][$k + 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                }
              }
            }
            if (isset($spliced_matrix_reversed[$key - 1][$k + 2]) && isset($spliced_matrix_reversed[$key][$k]['scale'])) {
              if ($spliced_matrix_reversed[$key][$k]['scale_position'] > 1) {
                if ($spliced_matrix_reversed[$key - 1][$k + 2]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] - 1) {
                  $spliced_matrix_reversed[$key - 1][$k + 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                  if (isset($spliced_matrix_reversed[$key - 1][$k + 2]['phase_color'])) {
                    $spliced_matrix_reversed[$key - 1][$k + 2]['phase_color'] = 'purple';
                  } else {
                    $spliced_matrix_reversed[$key - 1][$k + 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                }
              } else {
                if ($spliced_matrix_reversed[$key - 1][$k + 2]['scale_position'] == $tone) {
                  $spliced_matrix_reversed[$key - 1][$k + 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                  if (isset($spliced_matrix_reversed[$key - 1][$k + 2]['phase_color'])) {
                    $spliced_matrix_reversed[$key - 1][$k + 2]['phase_color'] = 'purple';
                  } else {
                    $spliced_matrix_reversed[$key - 1][$k + 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                }
              }
            }
            if (!isset($spliced_matrix_reversed[$key + 1][$k + 2]) && isset($spliced_matrix_reversed[$key][$k]['scale'])) {
              unset($new_key);
              unset($bridge_kplus);
              if (!isset($spliced_matrix_reversed[$key + 1])) {
                $new_key = ($key + 1) - $interval;
                if (!isset($spliced_matrix_reversed[$new_key][$k + 2])) {
                  $bridge_kplus = ($k + 2) - (2 * $tone);
                }
              }
              if (isset($spliced_matrix_reversed[$key + 1])) {
                if (!isset($spliced_matrix_reversed[$key + 1][$k + 2])) {
                  $bridge_kplus = ($k + 2) - (2 * $tone);
                }
              }
              if (isset($bridge_kplus)) {
                if ($bridge_kplus > (2 * $tone)) {
                  $bridge_kplus = (3 * $tone) - $bridge_kplus;
                }
                if ($bridge_kplus < 1) {
                  $bridge_kplus = $bridge_kplus + $tone;
                }
              }
              if (isset($new_key) && !isset($bridge_kplus)) {
                if ($spliced_matrix_reversed[$key][$k]['scale_position'] > 1 && isset($spliced_matrix_reversed[$new_key][$k + 2]['scale_position'])) {
                  if ($spliced_matrix_reversed[$new_key][$k + 2]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] - 1) {
                    $spliced_matrix_reversed[$new_key][$k + 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    if (isset($spliced_matrix_reversed[$new_key][$k + 2]['phase_color'])) {
                      $spliced_matrix_reversed[$new_key][$k + 2]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix_reversed[$new_key][$k + 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                    }
                  }
                } else {
                  if ($spliced_matrix_reversed[$new_key][$k + 2]['scale_position'] == $tone) {
                    $spliced_matrix_reversed[$new_key][$k + 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    $spliced_matrix_reversed[$new_key][$k + 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                  }
                }
              }
              if (isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix_reversed[$key][$k]['scale_position'] > 1 && isset($spliced_matrix_reversed[$new_key][$bridge_kplus]['scale_position'])) {
                  if ($spliced_matrix_reversed[$new_key][$bridge_kplus]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] - 1) {
                    $spliced_matrix_reversed[$new_key][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    if (isset($spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                    }
                  }
                } else {
                  if ($spliced_matrix_reversed[$new_key][$bridge_kplus]['scale_position'] == $tone) {
                    $spliced_matrix_reversed[$new_key][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    if (isset($spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                    }
                  }
                }
              }
              if (!isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix_reversed[$key][$k]['scale_position'] > 1 && isset($spliced_matrix_reversed[$key + 1][$bridge_kplus]['scale_position'])) {
                  if ($spliced_matrix_reversed[$key + 1][$bridge_kplus]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] - 1) {
                    $spliced_matrix_reversed[$key + 1][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    if (isset($spliced_matrix_reversed[$key + 1][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix_reversed[$key + 1][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix_reversed[$key + 1][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                    }
                  }
                } else {
                  if ($spliced_matrix_reversed[$key + 1][$bridge_kplus]['scale_position'] == $tone) {
                    $spliced_matrix_reversed[$key + 1][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    if (isset($spliced_matrix_reversed[$key + 1][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix_reversed[$key + 1][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix_reversed[$key + 1][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                    }
                  }
                }
              }
            }
            if (!isset($spliced_matrix_reversed[$key - 1][$k + 2]) && isset($spliced_matrix_reversed[$key][$k]['scale'])) {
              unset($new_key);
              unset($bridge_kplus);
              if (!isset($spliced_matrix_reversed[$key - 1])) {
                $new_key = ($key - 1) + $interval;
                if (!isset($spliced_matrix_reversed[$new_key][$k + 2])) {
                  $bridge_kplus = ($k + 2) - (2 * $tone);
                }
              }
              if (isset($spliced_matrix_reversed[$key - 1])) {
                if (!isset($spliced_matrix_reversed[$key - 1][$k + 2])) {
                  $bridge_kplus = ($k + 2) - (2 * $tone);
                }
              }
              if (isset($bridge_kplus)) {
                if ($bridge_kplus > (2 * $tone)) {
                  $bridge_kplus = (3 * $tone) - $bridge_kplus;
                }
                if ($bridge_kplus < 1) {
                  $bridge_kplus = $bridge_kplus + $tone;
                }
              }
              if (isset($new_key) && !isset($bridge_kplus)) {
                if ($spliced_matrix_reversed[$key][$k]['scale_position'] > 1 && isset($spliced_matrix_reversed[$new_key][$k + 2]['scale_position'])) {
                  if ($spliced_matrix_reversed[$new_key][$k + 2]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] - 1) {
                    $spliced_matrix_reversed[$new_key][$k + 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    if (isset($spliced_matrix_reversed[$new_key][$k + 2]['phase_color'])) {
                      $spliced_matrix_reversed[$new_key][$k + 2]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix_reversed[$new_key][$k + 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                    }
                  }
                } else {
                  if ($spliced_matrix_reversed[$new_key][$k + 2]['scale_position'] == $tone) {
                    $spliced_matrix_reversed[$new_key][$k + 2]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    if (isset($spliced_matrix_reversed[$new_key][$k + 2]['phase_color'])) {
                      $spliced_matrix_reversed[$new_key][$k + 2]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix_reversed[$new_key][$k + 2]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                    }
                  }
                }
              }
              if (isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix_reversed[$key][$k]['scale_position'] > 1 && isset($spliced_matrix_reversed[$new_key][$bridge_kplus]['scale_position'])) {
                  if ($spliced_matrix_reversed[$new_key][$bridge_kplus]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] - 1) {
                    $spliced_matrix_reversed[$new_key][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    if (isset($spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                    }
                  }
                } else {
                  if ($spliced_matrix_reversed[$new_key][$bridge_kplus]['scale_position'] == $tone) {
                    $spliced_matrix_reversed[$new_key][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    if (isset($spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix_reversed[$new_key][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                    }
                  }
                }
              }
              if (!isset($new_key) && isset($bridge_kplus)) {
                if ($spliced_matrix_reversed[$key][$k]['scale_position'] > 1 && isset($spliced_matrix_reversed[$key - 1][$bridge_kplus]['scale_position'])) {
                  if ($spliced_matrix_reversed[$key - 1][$bridge_kplus]['scale_position'] == $spliced_matrix_reversed[$key][$k]['scale_position'] - 1) {
                    $spliced_matrix_reversed[$key - 1][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    if (isset($spliced_matrix_reversed[$key - 1][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix_reversed[$key - 1][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix_reversed[$key - 1][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                    }
                  }
                } else {
                  if ($spliced_matrix_reversed[$key - 1][$bridge_kplus]['scale_position'] == $tone) {
                    $spliced_matrix_reversed[$key - 1][$bridge_kplus]['scale'] = $spliced_matrix_reversed[$key][$k]['scale'];
                    if (isset($spliced_matrix_reversed[$key - 1][$bridge_kplus]['phase_color'])) {
                      $spliced_matrix_reversed[$key - 1][$bridge_kplus]['phase_color'] = 'purple';
                    } else {
                      $spliced_matrix_reversed[$key - 1][$bridge_kplus]['phase_color'] = $spliced_matrix_reversed[$key][$k]['phase_color'];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  // Horizontal Scale
  $hscale = array();
  $h_scale_sum_ratios = array();
  $cs = 0;
  $array_count = 0;
  foreach ($prime_matrix as $k => $prime_row) {
    $cs++;
    foreach ($prime_row as $key => $value) {
      if ($cs == 1) {
        //dpm('one');
        $hscale[$array_count] = $prime_matrix[$k][$key]['tone'];
        $array_count++;
        if (!empty($prime_matrix[$k][$key + 1])) {
          if ($prime_matrix[$k][$key]['tone'] - $prime_matrix[$k][$key + 1]['tone'] >= 0) {
            //dpm('ltr');
            $h_scale_sum_ratios['ltr'] = $prime_matrix[$k][$key]['tone'] - $prime_matrix[$k][$key + 1]['tone'];
          }
          else {
            if (!empty($prime_matrix[$k][$tone]['tone'])) {
              //dpm('ltr');
              $h_scale_sum_ratios['ltr'] = $prime_matrix[$k][$key]['tone'] - $prime_matrix[$k][$tone]['tone'];
            }
          }
        }
        if (!empty($prime_matrix[$k][$key - 1])) {
          if ($prime_matrix[$k][$key]['tone'] - $prime_matrix[$k][$key - 1]['tone'] >= 0) {
            //dpm('rtl');
            $h_scale_sum_ratios['rtl'] = $prime_matrix[$k][$key]['tone'] - $prime_matrix[$k][$key - 1]['tone'];
          }
          else {
            if (!empty($prime_matrix[$k][$tone]['tone']) && $prime_matrix[$k][$key]['tone'] - $prime_matrix[$k][$tone]['tone'] >= 0) {
              //dpm('rtl');
              $h_scale_sum_ratios['rtl'] = $prime_matrix[$k][$key]['tone'] - $prime_matrix[$k][$key - 1]['tone'];
            }
          }
        }
      }
    }
  }

  if (isset($h_scale_sum_ratios['rtl']) || isset($h_scale_sum_ratios['ltr'])) {
    $scaled = '<span class="blue-text">HORIZONTAL SCALE [<->] (' . $h_scale_sum_ratios['rtl'] . '/' . $h_scale_sum_ratios['ltr'] . '): ';
    $hscaled = '<span class="blue-text">HORIZONTAL SCALE [<->] (' . $h_scale_sum_ratios['rtl'] . '/' . $h_scale_sum_ratios['ltr'] . '): ';
  }
  if (!empty($hscale)) {
    foreach ($hscale as $array => $value) {
      $scaled .= $value . ', ';
      $hscaled .= $value . ', ';
    }
    $scaled .= '</span>';
    $hscaled .= '</span>';
  }
  //dpm($hscale);
  
  // Forward Slash Diagonal
  $fscale = array();
  $f_scale_sum_ratios = array();
  $cs = 0;
  $array_count = 0;
  foreach ($prime_matrix as $k => $prime_row) {
    $cs++;
    foreach ($prime_row as $key => $value) {
      if ($cs == $tone + 1 && $prime_matrix[$k][$key]['tone'] == 1) {
        $fscale[$array_count] = $prime_matrix[$k][$key]['tone'];
        $array_count++;
        for ($i = 1; $i <= $tone; $i++) {
          if (!empty($prime_matrix[$k - $i][$key + $i])) {
            $fscale[$array_count] = $prime_matrix[$k - $i][$key + $i]['tone'];
            $array_count++;
            if (!empty($prime_matrix[$k - $i - 1][$key + $i + 1])) {
              if ($prime_matrix[$k - $i][$key + $i]['tone'] - $prime_matrix[$k - $i - 1][$key + $i + 1]['tone'] >= 0) {
                $f_scale_sum_ratios['ltr'] = $prime_matrix[$k - $i][$key + $i]['tone'] - $prime_matrix[$k - $i - 1][$key + $i + 1]['tone'];
              }
              elseif ($prime_matrix[$k - $i][$key + $i]['tone'] - $prime_matrix[$k - $i - 1][$key + $i + 1]['tone'] < 0 && $prime_matrix[$k - $i - 1][$key + $i]['tone'] - $prime_matrix[$k - $i - 2][$key + $i + 1]['tone'] >= 0) {
                $f_scale_sum_ratios['ltr'] = $prime_matrix[$k - $i - 1][$key + $i]['tone'] - $prime_matrix[$k - $i - 2][$key + $i + 1]['tone'];
              }
            }
            if (!empty($prime_matrix[$k - $i + 1][$key + $i - 1])) {
              if ($prime_matrix[$k - $i][$key + $i]['tone'] - $prime_matrix[$k - $i + 1][$key + $i - 1]['tone'] >= 0) {
                $f_scale_sum_ratios['rtl'] = $prime_matrix[$k - $i][$key + $i]['tone'] - $prime_matrix[$k - $i + 1][$key + $i - 1]['tone'];
              }
            }
          }
        }
      }
    }
  }
  if (isset($f_scale_sum_ratios['rtl']) && isset($f_scale_sum_ratios['ltr'])) {
    $scaled .= '<br><span class="groen-text">FORWARD SLASH DIAGONAL SCALE [/] (' . $f_scale_sum_ratios['rtl'] . '/' . $f_scale_sum_ratios['ltr'] . '): ';
    $fscaled = '<br><span class="groen-text">FORWARD SLASH DIAGONAL SCALE [/] (' . $f_scale_sum_ratios['rtl'] . '/' . $f_scale_sum_ratios['ltr'] . '): ';
  }
  if (!empty($fscale)) {
    foreach ($fscale as $array => $value) {
      $scaled .= $value . ', ';
      $fscaled .= $value . ', ';
    }
    $scaled .= '</span>';
    $fscaled .= '</span>';
  }
  //dpm($fscale);
  
  // Backward Slash Diagonal
  $bscale = array();
  $b_scale_sum_ratios = array();
  $cs = 0;
  $array_count = 0;
  foreach ($prime_matrix as $k => $prime_row) {
    $cs++;
    foreach ($prime_row as $key => $value) {
      if ($cs == 1 && $prime_matrix[$k][$key]['tone'] == 1) {
        $bscale[$array_count] = $prime_matrix[$k][$key]['tone'];
        $array_count++;
        for ($i = 1; $i <= $tone; $i++) {
          if (!empty($prime_matrix[$k + $i][$key + $i])) {
            $bscale[$array_count] = $prime_matrix[$k + $i][$key + $i]['tone'];
            $array_count++;
            if (!empty($prime_matrix[$k + $i + 1][$key + $i + 1])) {

              if ($prime_matrix[$k + $i][$key + $i]['tone'] - $prime_matrix[$k + $i + 1][$key + $i + 1]['tone'] >= 0) {
                $b_scale_sum_ratios['ltr'] = $prime_matrix[$k + $i][$key + $i]['tone'] - $prime_matrix[$k + $i + 1][$key + $i + 1]['tone'];
              }
              elseif ($prime_matrix[$k + $i][$key + $i]['tone'] - $prime_matrix[$k + $i + 1][$key + $i + 1]['tone'] < 0 && $prime_matrix[$k + $i + 1][$key + $i + 1]['tone'] - $prime_matrix[$k + $i + 2][$key + $i + 2]['tone'] >= 0) {
                $b_scale_sum_ratios['ltr'] = $prime_matrix[$k + $i][$key + $i]['tone'] - $prime_matrix[$k + $i + 1][$key + $i + 1]['tone'];
              }
            }
            if (!empty($prime_matrix[$k + $i - 1][$key + $i - 1])) {
              if ($prime_matrix[$k + $i][$key + $i]['tone'] - $prime_matrix[$k + $i - 1][$key + $i - 1]['tone'] >= 0) {
                $b_scale_sum_ratios['rtl'] = $prime_matrix[$k + $i][$key + $i]['tone'] - $prime_matrix[$k + $i - 1][$key + $i - 1]['tone'];
              }
            }
          }
        }
      }
    }
  }
  if (isset($b_scale_sum_ratios['rtl']) && isset($b_scale_sum_ratios['ltr'])) {
    $scaled .= '<br><span class="salmon-text">BACKWARD SLASH DIAGONAL SCALE [\] (' . $b_scale_sum_ratios['rtl'] . '/' . $b_scale_sum_ratios['ltr'] . '): ';
    $bscaled = '<br><span class="salmon-text">BACKWARD SLASH DIAGONAL SCALE [\] (' . $b_scale_sum_ratios['rtl'] . '/' . $b_scale_sum_ratios['ltr'] . '): ';
  }
  if (!empty($bscale)) {
    foreach ($bscale as $array => $value) {
      $scaled .= $value . ', ';
      $bscaled .= $value . ', ';
    }
    $scaled .= '</span>';
    $bscaled .= '</span>';
  }
  //dpm($bscale);
  
  
  $scales = array('h' => $hscale, 'f' => $fscale, 'b' => $bscale);
  
  //dpm($scales);
  $wave_detection = array(
    'scales' => $scales,
    'scaled' => $scaled,
    'hscale' => $hscale,
    'hscaled' => $hscaled,
    'fscale' => $fscale,
    'fscaled' => $fscaled,
    'bscale' => $bscale,
    'bscaled' => $bscaled,
  );
  if (!empty($h_scale_sum_ratios)) {
    $wave_detection['h_scale_sum_ratios'] = $h_scale_sum_ratios;
  }
  if (!empty($f_scale_sum_ratios)) {
    $wave_detection['f_scale_sum_ratios'] = $f_scale_sum_ratios;
  }
  if (!empty($b_scale_sum_ratios)) {
    $wave_detection['b_scale_sum_ratios'] = $b_scale_sum_ratios;
  }
  if (!empty($h_scale_sum_ratios['rtl'])) {
    $h_increment = $h_scale_sum_ratios['rtl'];
    $wave_detection['h_increment'] = $h_increment;
  }
  if (!empty($f_scale_sum_ratios['rtl'])) {
    $f_increment = $f_scale_sum_ratios['rtl'];
    $wave_detection['f_increment'] = $f_increment;
  }
  if (!empty($b_scale_sum_ratios['rtl'])) {
    $b_increment = $b_scale_sum_ratios['rtl'];
    $wave_detection['b_increment'] = $b_increment;
  }
  if (!empty($spliced_matrix)) {
    $wave_detection['spliced_matrix'] = $spliced_matrix;
  }
  if (!empty($spliced_matrix_reversed)) {
    $wave_detection['spliced_matrix_reversed'] = $spliced_matrix_reversed;
  }
  if (!empty($scales)) {
    $wave_detection['scales'] = $scales;
  }
  
  unset($scales);
  unset($scaled);
  unset($hscale);
  unset($hscaled);
  unset($fscale);
  unset($fscaled);
  unset($bscale);
  unset($bscaled);
  unset($spliced_matrix);
  unset($spliced_matrix_reversed);
  unset($h_scale_sum_ratios);
  unset($f_scale_sum_ratios);
  unset($b_scale_sum_ratios);
  unset($h_increment);
  unset($f_increment);
  unset($b_increment);
  
  return $wave_detection;
}

function jellomatrix_get_colors() {

  $hexvalues = [];
  $hexvalues = array(0 => "f", 1 => "e", 2 => "d", 3 => "c", 4 => "b", 5 => "a", 6 => "9", 7 => "8", 8 => "7", 9 => "6", 10 => "5", 11 => "4", 12 => "3", 13 => "2", 14 => "1", 15 => "0");

  // get 6 random indexes from array $hexvalues
  $hexvalue = shuffle($hexvalues);
  $color_hex[0] = $hexvalues[0];
  shuffle($hexvalues);
  $color_hex[1] = $hexvalues[0];
  shuffle($hexvalues);
  $color_hex[2] = $hexvalues[0];
  shuffle($hexvalues);
  $color_hex[3] = $hexvalues[0];
  shuffle($hexvalues);
  $color_hex[4] = $hexvalues[0];
  shuffle($hexvalues);
  $color_hex[5] = $hexvalues[0];

  $color_array = implode("", $color_hex);

  if (strlen($color_array) != 6) {
    $color_array = '000000';
  }
  $color = $color_array;
  $prependHash = FALSE;

  IF(STRPOS($color,'#')!==FALSE) {
    $prependHash = TRUE;
    $color       = STR_REPLACE('#',NULL,$color);
  }

  SWITCH($len=STRLEN($color)) {
    CASE 3:
      $color=PREG_REPLACE("/(.)(.)(.)/","\\1\\1\\2\\2\\3\\3",$color);
    CASE 6:
      BREAK;
    DEFAULT:
      TRIGGER_ERROR("Invalid hex length ($len). Must be (3) or (6)", E_USER_ERROR);
  }

  IF(!PREG_MATCH('/[a-f0-9]{6}/i',$color)) {
    $color = HTMLENTITIES($color);
    TRIGGER_ERROR( "Invalid hex string #$color", E_USER_ERROR );
  }

  $r = DECHEX(255-HEXDEC(SUBSTR($color,0,2)));
  $r = (STRLEN($r)>1)?$r:'0'.$r;
  $g = DECHEX(255-HEXDEC(SUBSTR($color,2,2)));
  $g = (STRLEN($g)>1)?$g:'0'.$g;
  $b = DECHEX(255-HEXDEC(SUBSTR($color,4,2)));
  $b = (STRLEN($b)>1)?$b:'0'.$b;

  $color_inverse = ($prependHash?'#':NULL).$r.$g.$b;

  $colors = array(
    'color_text' => '#' . $color_inverse,
    'color_background' => '#' . $color_array
  );

  return $colors;
}

function jellomatrix_wave_detection($spliced_matrix, $spliced_matrix_reversed, $tone, $interval, $scale, $dir/*, $scales*/) {
  //dpm($scale);
  $color_array = [];
  $color_array = [
    0 => 'indianred',
    1 => 'darkolivegreen',
    2 => 'greenyellow',
    3 => 'seagreen',
    4 => 'pink',
    5 => 'darkorange',
    6 => 'steelblue',
    7 => 'dodgerblue',
    8 => 'gold',
    9 => 'coral',
    10 => 'plum',
    11 => 'darkgreen',
    12 => 'lightpink',
    13 => 'orange',
    14 => 'lightblue',
    15 => 'steelblue',
    16 => 'olive',
    17 => 'tomato',
    18 => 'powderblue',
    19 => 'olivedrab',
    20 => 'lavenderblush',
    21 => 'gold',
    22 => 'cadetblue',
    23 => 'cornflowerblue',
    24 => 'goldenrod',
    25 => 'rosybrown',
    26 => 'cornsilk',
    27 => 'mediumslateblue',
    28 => 'yellowgreen',
    29 => 'lavendar',
    30 => 'thistle',
    31 => 'darkkhaki',
    32 => 'purple',
    33 => 'lightgoldenrod',
    34 => 'mediumseagreen',
    35 => 'chocolate',
    36 => 'skyblue',
    37 => 'mediumorchid',
    38 => 'lightsteelblue',
    39 => 'deeppink',
    40 => 'plum',
    41 => 'khaki',
    42 => 'slateblue',
    43 => 'lightseagreen',
    44 => 'darkorange',
    45 => 'turquoise',
    46 => 'royalblue',
    47 => 'seashell',
    48 => 'mistyrose',
    50 => 'cadetblue',
    51 => 'teal',
    52 => 'gold',
    53 => 'darksalmon',
    54 => 'darkseagreen',
    55 => 'lightsalmon',
    56 => 'darkmagenta',
    57 => 'deepskyblue',
    58 => 'navy',
    59 => 'goldenrod',
    60 => 'lighskyblue',
    61 => 'salmon',
    62 => 'orangered',
    63 => 'brown',
    64 => 'azure',
    65 => 'pink',
    66 => 'firebrick',
    67 => 'maroon',
    68 => 'rebeccapurple',
    69 => 'khaki',
    70 => 'darkolivegreen',
    71 => 'pink',
    72 => 'indigo',
    73 => 'seagreen',
    74 => 'pink',
    75 => 'darkorange',
    76 => 'dodgerblue',
    77 => 'coral',
    78 => 'paleturquiose',
    79 => 'darkgreen',
    80 => 'lightpink',
    81 => 'orange',
    82 => 'lightrblue',
    83 => 'steelblue',
    84 => 'tomato',
    85 => 'powderblue',
    86 => 'olivedrab',
    87 => 'lavenderblush',
    88 => 'gold',
    89 => 'cadetblue',
    90 => 'cornflowerblue',
    91 => 'goldenrod',
    92 => 'rosybrown',
    93 => 'cornsilk',
    94 => 'mediumslateblue',
    95 => 'yellowgreen',
    96 => 'lavendar',
    97 => 'thistle',
    98 => 'darkkhaki',
    99 => 'purple',
    100 => 'lightgoldenrod',
    101 => 'mediumseagreen',
    102 => 'chocolate',
    103 => 'skyblue',
    104 => 'mediumorchid',
    105 => 'lightsteelblue',
    106 => 'deeppink',
    107 => 'plum',
    108 => 'khaki',
    109 => 'slateblue',
    110 => 'papayawhip',
    111 => 'darkorange',
    112 => 'turquoise',
    113 => 'royalblue',
    114 => 'mistyrose',
    115 => 'cadetblue',
    116 => 'teal',
    117 => 'gold',
    118 => 'darksalmon',
    119 => 'darkseagreen',
    120 => 'lightsalmon',
    121 => 'darkmagenta',
    122 => 'deepskyblue',
    123 => 'navy',
    124 => 'goldenrod',
    125 => 'lighskyblue',
    126 => 'salmon',
    127 => 'orangered',
    128 => 'brown',
    129 => 'azure',
    130 => 'pink',
    131 => 'firebrick',
    132 => 'maroon',
    133 => 'rebeccapurple',
    134 => 'khaki',
    135 => 'darkolivegreen',
    136 => 'pink',
    137 => 'indianred',
    138 => 'greenyellow',
  ];

  // Gets rid of empty arrays.
  $color_array = array_reverse($color_array);
  //dpm($scales);
  //foreach ($scales as $d => $scale) {
    //if ($dir == 'h') {  // TODO
      
      //dpm('dir ' . $dir);
      $wave_boundary_count = 1;

      foreach ($spliced_matrix as $key => $spliced_row) {
        foreach ($spliced_row as $k => $item) {
          if (isset($item['wave_limit'])) {
            if ($item['wave_limit'] == 'active' && $item['column'] <= 1) {
              $wave_boundary_count++;
              $spliced_matrix[$key][$k]['wave_limit_processed'] = 1;
              $current_position = $spliced_matrix[$key][$k];
              if ($wave_boundary_count % 2 == 0) {
                $spliced_matrix[$key][$k]['wave_vertical'] = 'top';
              } else {
                $spliced_matrix[$key][$k]['wave_vertical'] = 'bottom';
              }
  
              // test
              if (isset($spliced_matrix[$key][$k]['wave'])) {
                dpm('beep');
                //unset($spliced_matrix[$key][$k]['wave']);
              }
  
              $vertical_directions = array('down', 'up');
  
              foreach ($vertical_directions as $v_dir) {
                //dpm('v ' . $v_dir . ' | p ' . $p);
                for ($i = 1; $i <= $tone; $i++) {
                  //dpm('i ' . $i);
                  ////dpm('jump = ' . $i);
                  ///
                  // $k is the column value.

                  // $p is the pole value (where numbers duplicate is it the first or the second?). My question is
                  // which 'p' value (1 or 2) is at the front or back...This variable name or value should be rethought...

                  // $i is the value of the $tone but ends up representing here the possible number of columns between
                  // occurrences of the wave which cannot exceed the value of the tone (this might be arbitrary as a
                  // designation and might wanted to get tested later as a TODO.

                  if (isset($current_position['pole_shift']) && $current_position['pole_shift'] == 'right') {
                    $pole = 0;
                  }
                  if (isset($current_position['pole_shift']) && $current_position['pole_shift'] == 'left') {
                    $pole = 1;
                  }

                  $twotone = 2*$tone;
                  //dpm('2tone: ' . $twotone);

                  //dpm($current_position);
                  if (isset($current_position['pole_shift'])) {

                    $k_i_p = $k + $i + $pole;
                    $twok_i_p = $k + (2 * $i) + $pole;
                    $threek_i_p = $k + (3 * $i) + $pole;
                    $k_i_pp = $k + $i + 1 + $pole;
                    $twok_i_pp = $k + (2 * $i) + 1 + $pole;
                    $threek_i_pp = $k + (3 * $i) + 1 + $pole;
                    $k_i_pnp = $k + $i - 1 + $pole;
                    $twok_i_pnp = $k + (2 * $i) - 1 + $pole;
                    $threek_i_pnp = $k + (3 * $i) - 1 + $pole;

                    ////dpm('vertical direction = ' . $v_dir);
                    if ($current_position['pole_shift'] == 'right') {
                      //dpm('poleshiftright');
                    }
                    if ($current_position['pole_shift'] == 'left') {
                      //dpm('poleshiftleft');
                    }

                    $twoktone = $twok_i_p - $twotone;
                    $threektone = $twok_i_p + $i - $twotone;
                    //$threektone = $threek_i_p - $twotone;
                    $twokptone = $twok_i_pp - $twotone;
                    $threekptone = $twok_i_pp + $i - $twotone;
                    //$threekptone = $threek_i_pp - $twotone;
                    if ($twoktone > $twotone) {
                      //dpm($twoktone);
                    }
                    if ($twokptone > $twotone) {
                      //dpm($twokptone);
                    }
                    if ($threektone > $twotone) {
                      //dpm($threektone);
                    }
                    if ($threekptone > $twotone) {
                      //dpm($threekptone);
                    }
                    //dpm($key);
                    //dpm($k);
                    $nadjacent = 0;
                    $stop = 0;
                    $next_position = [];
                    $next_next_position = [];
                    $next_next_next_position = [];
                    $next_adjacent_position = [];
                    $next_next_adjacent_position = [];
                    $next_next_next_adjacent_position = [];

                    if (!empty($spliced_matrix[$key][$k + 1]) && $spliced_matrix[$key][$k + 1]['tone'] == $spliced_matrix[$key][$k]['tone'] && $spliced_matrix[$key][$k + 1]['row'] == $spliced_matrix[$key][$k]['row']) {
                      $next_position = $spliced_matrix[$key][$k + 1];
                      $next_adjacent_position = $spliced_matrix[$key][$k + 2];
                      $nadjacent++;

                    }
                    if (!empty($spliced_matrix[$key + 1][$k_i_p]['tone']) && $spliced_matrix[$key][$k + 1]['tone'] != $spliced_matrix[$key][$k]['tone'] && $v_dir == 'down') {
                      $next_position = $spliced_matrix[$key + 1][$k_i_p];
                      if (!empty($spliced_matrix[$key + 1][$k_i_p + 1])) {
                        $next_adjacent_position = $spliced_matrix[$key + 1][$k_i_p + 1];
                      }
                    }
                    if (!empty($spliced_matrix[$key - 1][$k_i_p]['tone']) && $spliced_matrix[$key][$k + 1]['tone'] != $spliced_matrix[$key][$k]['tone'] && $v_dir == 'up') {
                      $next_position = $spliced_matrix[$key - 1][$k_i_p];
                      if (!empty($spliced_matrix[$key - 1][$k_i_p + 1])) {
                        $next_adjacent_position = $spliced_matrix[$key - 1][$k_i_p + 1];
                      }
                    }

                    //dpm($current_position);
                    //dpm($next_adjacent_position);

                    if (!empty($next_adjacent_position['tone']) && $next_adjacent_position['tone'] == $next_position['tone']) {
                      $next_next_position = $next_adjacent_position;
                      $next_next_next_position = $spliced_matrix[$key][$twok_i_p + 1];
                      $nadjacent++;
                      $stop = 1;
                    }

                    //dpm('NEXTPOSITION:' . $v_dir);
                    //dpm($next_position);
                    if (!empty($next_position) && $stop == 0) {
                      //dpm($i . '/' . $v_dir . '/tone/' . $next_adjacent_position['tone'] . '/sp/' . $next_adjacent_position['scale_position'] . '/col/' . $next_adjacent_position['column'] . '/row/' . $next_adjacent_position['row']);
                      //dpm($i . '/' . $v_dir . '/tone/' . $spliced_matrix[$key][$twok_i_p + 1]['tone'] . '/sp/' . $spliced_matrix[$key][$twok_i_p + 1]['scale_position'] . '/col/' . $spliced_matrix[$key][$twok_i_p + 1]['column'] . '/row/' . $spliced_matrix[$key][$twok_i_p + 1]['row']);
                      if (!empty($next_adjacent_position['tone']) && $next_position['tone'] == $next_adjacent_position['tone']) {
                        $next_next_position = $spliced_matrix[$key + 1][$twok_i_p + 1];
                        $nadjacent++;

                      } else {
                        if ($nadjacent == 0) {
                          //dpm('2AY');
                          if (!empty($spliced_matrix[$key + 2][$twok_i_p]['tone']) && $v_dir == 'down') {
                            //dpm('2EY');
                            $next_next_position = $spliced_matrix[$key + 2][$twok_i_p];
                            if (!empty($spliced_matrix[$key + 2][$twok_i_p + 1]['tone']) && $spliced_matrix[$key + 2][$twok_i_pp]['tone'] != NULL) {
                              //dpm('2OY');
                              //dpm($spliced_matrix[$key + 2][$twok_i_pp]);
                              $next_next_adjacent_position = $spliced_matrix[$key + 2][$twok_i_p + 1];
                            } else {
                              $column = $twok_i_p + 1;
                              //dpm('2EEYY: ' . $column);
                              if ($column > $twotone) {
                                $twokk_i_p = $column - $twotone;
                              }
                              if (!empty($spliced_matrix[$key + 2][$twokk_i_p]['tone'])) {
                                $next_next_adjacent_position = $spliced_matrix[$key + 2][$twokk_i_p];
                              }
                            }
                          } elseif ($twoktone > 0 && !empty($spliced_matrix[$key + 2][$twoktone]['tone']) && $v_dir == 'down') {
                            //dpm('2BY');
                            $next_next_position = $spliced_matrix[$key + 2][$twoktone];
                            //dpm($spliced_matrix[$key + 2][$twoktone]);
                            if (!empty($spliced_matrix[$key + 2][$twokptone]['tone'])) {
                              //dpm('2FY');
                              $next_next_adjacent_position = $spliced_matrix[$key + 2][$twokptone];
                              //dpm($spliced_matrix[$key + 2][$twokptone]);
                            }
                          }

                          //dpm('2UAY');
                          if (!empty($spliced_matrix[$key - 2][$twok_i_p]['tone']) && $v_dir == 'up') {
                            $next_next_position = $spliced_matrix[$key - 2][$twok_i_p];
                            //dpm('2UEY');
                            if (!empty($spliced_matrix[$key - 2][$twok_i_p + 1]['tone']) && $spliced_matrix[$key - 2][$twok_i_pp]['tone'] != NULL) {
                              //dpm('2UOY');
                              //dpm($spliced_matrix[$key - 2][$twok_i_pp]);
                              $next_next_adjacent_position = $spliced_matrix[$key - 2][$twok_i_p + 1];
                            } else {
                              $column = $twok_i_p + 1;
                              //dpm('2UEEYY: ' . $column);
                              if ($column > $twotone) {
                                $twokk_i_p = $column - $twotone;
                              }
                              if (!empty($spliced_matrix[$key - 2][$twokk_i_p]['tone'])) {
                                $next_next_adjacent_position = $spliced_matrix[$key - 2][$twokk_i_p];
                              }
                            }
                          } elseif ($twoktone > 0 && !empty($spliced_matrix[$key - 2][$twoktone]['tone']) && $v_dir == 'up') {
                            //dpm('2UBY');
                            $next_next_position = $spliced_matrix[$key - 2][$twoktone];
                            //dpm($spliced_matrix[$key - 2][$twoktone]);
                            if (!empty($spliced_matrix[$key - 2][$twokptone]['tone'])) {
                              //dpm('2UFY');
                              $next_next_adjacent_position = $spliced_matrix[$key - 2][$twokptone];
                              //dpm($spliced_matrix[$key - 2][$twokptone]);
                            }
                          }
                        }
                        else {
                          if ($nadjacent >= 1 && $stop == 0) {
                            //dpm('2AY');
                            if (!empty($spliced_matrix[$key + 1][$k_i_p]['tone']) && $v_dir == 'down') {
                              //dpm('2EY');
                              $next_next_position = $spliced_matrix[$key + 1][$k_i_p];
                              if (!empty($spliced_matrix[$key + 1][$k_i_p + 1]['tone']) && $spliced_matrix[$key + 1][$k_i_p + 1]['tone'] != NULL) {
                                //dpm('2OY');
                                //dpm($spliced_matrix[$key + 1][$twok_i_pp]);
                                $next_next_adjacent_position = $spliced_matrix[$key + 1][$k_i_p + 1];
                              } else {
                                $column = $k_i_p + 1;
                                //dpm('2EEYY: ' . $column);
                                if ($column > $tone) {
                                  $kk_i_p = $column - $tone;
                                }
                                if (!empty($spliced_matrix[$key + 1][$kk_i_p]['tone'])) {
                                  $next_next_adjacent_position = $spliced_matrix[$key + 1][$kk_i_p];
                                }
                              }
                            } elseif ($twoktone > 0 && !empty($spliced_matrix[$key + 1][$twoktone]['tone']) && $v_dir == 'down') {
                              //dpm('2BY');
                              $next_next_position = $spliced_matrix[$key + 1][$twoktone];
                              //dpm($spliced_matrix[$key + 1][$ktone]);
                              if (!empty($spliced_matrix[$key + 2][$twoktone + 1]['tone'])) {
                                //('2FY');
                                $next_next_adjacent_position = $spliced_matrix[$key + 1][$twoktone + 1];
                                //dpm($spliced_matrix[$key + 1][$kptone]);
                              }
                            }

                            //dpm('2UAY');
                            if (!empty($spliced_matrix[$key - 1][$k_i_p]['tone']) && $v_dir == 'up') {
                              $next_next_position = $spliced_matrix[$key - 1][$k_i_p];
                              //dpm('2UEY');
                              if (!empty($spliced_matrix[$key - 1][$k_i_p + 1]['tone']) && $spliced_matrix[$key - 1][$k_i_p + 1]['tone'] != NULL) {
                                //dpm('2UOY');
                                //dpm($spliced_matrix[$key - 1][$twok_i_p]);
                                $next_next_adjacent_position = $spliced_matrix[$key - 1][$k_i_p + 1];
                              } else {
                                $column = $k_i_p + 1;
                                //dpm('2UEEYY: ' . $column);
                                if ($column > $tone) {
                                  $kk_i_p = $column - $tone;
                                }
                                if (!empty($spliced_matrix[$key - 1][$kk_i_p]['tone'])) {
                                  $next_next_adjacent_position = $spliced_matrix[$key - 1][$kk_i_p];
                                }
                              }
                            } elseif ($tone > 0 && !empty($spliced_matrix[$key - 1][$tone]['tone']) && $v_dir == 'up') {
                              //dpm('2UBY');
                              $next_next_position = $spliced_matrix[$key - 1][$tone];
                              //dpm($spliced_matrix[$key - 1][$ktone]);
                              if (!empty($spliced_matrix[$key - 1][$tone + 1]['tone'])) {
                                //dpm('2UFY');
                                $next_next_adjacent_position = $spliced_matrix[$key - 1][$tone + 1];
                                //dpm($spliced_matrix[$key - 1][$kptone]);
                              }
                            }
                          }
                        }
                      }
                    }

                    if ($nadjacent == 0 && !empty($next_position['tone']) && !empty($next_next_position['tone']) && $stop == 0) {

                      if (!empty($next_next_position['tone']) && !empty($next_next_adjacent_position['tone']) && $next_next_position['tone'] == $next_next_adjacent_position['tone']) {
                        $next_next_next_position = $next_next_adjacent_position;
                        $nadjacent++;
                      } else {
                        //dpm('3AY');
                        if (!empty($spliced_matrix[$key + 3][$threek_i_p]['tone']) && $v_dir == 'down') {
                          //dpm('3EY');
                          $next_next_next_position = $spliced_matrix[$key + 3][$threek_i_p];
                          if (!empty($spliced_matrix[$key + 3][$threek_i_pp]['tone']) && $spliced_matrix[$key + 3][$threek_i_pp]['tone'] != NULL) {
                            //dpm('3OY');
                            //dpm($spliced_matrix[$key + 3][$threek_i_pp]);
                            $next_next_next_adjacent_position = $spliced_matrix[$key + 3][$threek_i_pp];
                          } else {
                            $column = $threek_i_pp;
                            //dpm('3EEYY: ' . $column);
                            if ($column > $twotone) {
                              $threekk_i_p = $column - $twotone;
                            }
                            if (!empty($spliced_matrix[$key + 3][$threekk_i_p]['tone'])) {
                              $next_next_next_adjacent_position = $spliced_matrix[$key + 3][$threekk_i_p];
                            }
                          }
                        } elseif ($threektone > 0 && !empty($spliced_matrix[$key + 3][$threektone]['tone']) && $v_dir == 'down') {
                          //dpm('3BY');
                          $next_next_next_position = $spliced_matrix[$key + 3][$threektone];
                          //dpm($spliced_matrix[$key + 3][$threektone]);
                          if (!empty($spliced_matrix[$key + 3][$threekptone]['tone'])) {
                            //dpm('3FY');
                            $next_next_next_adjacent_position = $spliced_matrix[$key + 3][$threekptone];
                            //dpm($spliced_matrix[$key + 3][$threekptone]);
                          }
                        }
                        //dpm('3UAY');
                        if (!empty($spliced_matrix[$key - 3][$threek_i_p]['tone']) && $v_dir == 'up') {
                          //dpm('3UEY');
                          $next_next_next_position = $spliced_matrix[$key - 3][$threek_i_p];
                          if (!empty($spliced_matrix[$key - 3][$threek_i_pp]['tone']) && $spliced_matrix[$key - 3][$threek_i_pp]['tone'] != NULL) {
                            //dpm('3UOY');
                            //dpm($spliced_matrix[$key - 3][$threek_i_pp]);
                            $next_next_next_adjacent_position = $spliced_matrix[$key - 3][$threek_i_pp];
                          } else {
                            $column = $threek_i_pp;
                            //dpm('3UEEYY: ' . $column);
                            if ($column > $twotone) {
                              $threekk_i_p = $column - $twotone;
                            }
                            if (!empty($spliced_matrix[$key - 3][$threekk_i_p]['tone'])) {
                              $next_next_next_adjacent_position = $spliced_matrix[$key - 3][$threekk_i_p];
                            }
                          }
                        } elseif ($threektone > 0 && !empty($spliced_matrix[$key - 3][$threektone]['tone']) && $v_dir == 'up') {
                          //dpm('3BUY');
                          $next_next_next_position = $spliced_matrix[$key - 3][$threektone];
                          //dpm($spliced_matrix[$key - 3][$threektone]);
                          if (!empty($spliced_matrix[$key - 3][$threekptone]['tone'])) {
                            //dpm('3FUY');
                            $next_next_next_adjacent_position = $spliced_matrix[$key - 3][$threekptone];
                            //dpm($spliced_matrix[$key - 3][$threekptone]);
                          }
                        }
                      }
                    }
                    else {

                      if ($nadjacent >= 1 && !empty($next_position['tone']) && !empty($next_next_position['tone']) && $stop == 0) {
                        if (!empty($next_next_position['tone']) && !empty($next_next_adjacent_position['tone']) && $next_next_position['tone'] == $next_next_adjacent_position['tone']) {
                          $next_next_next_position = $next_next_adjacent_position;
                          $nadjacent++;
                        } else {
                          //dpm('3AY');
                          if (!empty($spliced_matrix[$key + 2][$twok_i_p]['tone']) && $v_dir == 'down') {
                            //dpm('3EY');
                            $next_next_next_position = $spliced_matrix[$key + 2][$twok_i_p];
                            if (!empty($spliced_matrix[$key + 2][$twok_i_p + 1]['tone']) && $spliced_matrix[$key + 2][$twok_i_p + 1]['tone'] != NULL) {
                              //dpm('3OY');
                              //dpm($spliced_matrix[$key + 3][$twok_i_pp]);
                              $next_next_next_adjacent_position = $spliced_matrix[$key + 2][$twok_i_p + 1];
                            } else {
                              $column = $twok_i_p + 1;
                              //dpm('3EEYY: ' . $column);
                              if ($column > $twotone) {
                                $twokk_i_p = $column - $twotone;
                              }
                              if (!empty($spliced_matrix[$key + 2][$twokk_i_p]['tone'])) {
                                $next_next_next_adjacent_position = $spliced_matrix[$key + 2][$twokk_i_p];
                              }
                            }
                          } elseif ($twoktone - 1 > 0 && !empty($spliced_matrix[$key + 2][$twoktone]['tone']) && $v_dir == 'down') {
                            //dpm('3BY');
                            $next_next_next_position = $spliced_matrix[$key + 2][$twoktone];
                            //dpm($spliced_matrix[$key + 2][$twoktone]);
                            if (!empty($spliced_matrix[$key + 2][$twoktone + 1]['tone'])) {
                              //dpm('3FY');
                              $next_next_next_adjacent_position = $spliced_matrix[$key + 2][$twoktone + 1];
                              //dpm($spliced_matrix[$key + 2][$twokptone]);
                            }
                          }
                          //dpm('3UAY');
                          if (!empty($spliced_matrix[$key - 2][$twok_i_p]['tone']) && $v_dir == 'up') {
                            //dpm('3UEY');
                            $next_next_next_position = $spliced_matrix[$key - 2][$twok_i_p];
                            if (!empty($spliced_matrix[$key - 2][$twok_i_p + 1]['tone']) && $spliced_matrix[$key - 2][$twok_i_p + 1]['tone'] != NULL) {
                              //dpm('3UOY');
                              //dpm($spliced_matrix[$key - 2][$twok_i_pp]);
                              $next_next_next_adjacent_position = $spliced_matrix[$key - 2][$twok_i_p + 1];
                            } else {
                              $column = $twok_i_p + 1;
                              //dpm('3UEEYY: ' . $column);
                              if ($column > $twotone) {
                                $twokk_i_p = $column - $twotone;
                              }
                              if (!empty($spliced_matrix[$key - 2][$twokk_i_p]['tone'])) {
                                $next_next_next_adjacent_position = $spliced_matrix[$key - 2][$twokk_i_p];
                              }
                            }
                          } elseif ($twoktone > 0 && !empty($spliced_matrix[$key - 2][$twoktone]['tone']) && $v_dir == 'up') {
                            //dpm('3BUY');
                            $next_next_next_position = $spliced_matrix[$key - 2][$twoktone];
                            //dpm($spliced_matrix[$key - 2][$twoktone]);
                            if (!empty($spliced_matrix[$key - 2][$twoktone + 1]['tone'])) {
                              //dpm('3FUY');
                              $next_next_next_adjacent_position = $spliced_matrix[$key - 2][$twoktone + 1];
                              //dpm($spliced_matrix[$key - 2][$twokptone]);
                            }
                          }
                        }
                      }
                    }


                    //dpm($spliced_matrix[$key][$k]['pole_shift']);
                    //dpm('jumpColumns' . $v_dir . '(' . $i . ') ' . $k . ', ' . $k_i_p . ', ' . $twok_i_p . ', ' . $threek_i_p);
                    //dpm('jumpColumns' . $v_dir . '(' . $i . ') ' . $current_position['scale_position'] . ', ' . $next_position['scale_position'] . ', ' . $next_next_position['scale_position'] . ', ' . $next_next_next_position['scale_position']);
                    //dpm('jumpp(' . $i . ') ' . $k . ', ' . $k_i_pp . ', ' . $twok_i_pp . ', ' . $threek_i_pp);
                    //dpm('jumpnp(' . $i . ') ' . $k . ', ' . $k_i_pnp . ', ' . $twok_i_pnp . ', ' . $threek_i_pnp);
                    //dpm('jumpk(' . $i . ') ' . $twokk_i_p . ', ' . $threekk_i_p);
                  }

                  if (!empty($next_position)) {
                    //dpm($v_dir . ' jump: ' . $i . ' position tone: ' . $current_position['tone'] . '/' .
                    //$next_position['tone'] . '/' . $next_next_position['tone'] . '/' .
                    //$next_next_next_position['tone']);



                    $j = 1;
                    //dpm ($scale);
                    $calc_scale = array();

                    $scale_new = [];
                    $scale_new = $scale;
                    for ($zip = 0; $zip < 2; $zip++) {
                      if (!isset($scale[3*$tone])) {
                        foreach ($scale as $s => $svalue) {
                          array_push($scale_new, $svalue);
                        }
                      }
                    }
                    $scale = $scale_new;
                    unset($scale_new);

                    //dpm($scale);

                    $check = $tone;
                    /*if($current_position['scale'] == $check) {
                      if ($next_position['scale'] != $check - 1) {
                        $current_position['scale'] = 0;
                      }
                      if($next_position['scale'] == $check  && $next_next_position['scale'] != $check - 1 && $next_next_position['scale'] != $check) {
                        $current_position['scale'] = 0;
                        $next_position['scale'] = 0;
                      }
                    }*/
                    //dpm( 'scale: ' . $scale[0] . ', ' . $scale[1] . ', ' . $scale[2] . ', ' . $scale[3] . ', ' . $scale[4] . ', ' . $scale[5] . ', ' . $scale[6] . ', ' . $scale[7] . ', ' . $scale[8] . ', ' . $scale[9] . ', ' . $scale[10] . ', ' . $scale[11]);
                    /*dpm($i . 'current (row/col/position/tone): ' . $current_position['row'] . '/<strong>' . $current_position['column'] . '</strong>/' .
                      $current_position['scale_position'] . '/' . $current_position['tone'] .'<br/>next (row/col/position/tone): ' . $next_position['row'] . '/<strong>' . $next_position['column'] . '</strong>/' .
                      $next_position['scale_position'] . '/' . $next_position['tone'] . ' - next_adjacent (row/col/position/tone): ' . $next_adjacent_position['row'] . '/' .
                      $next_adjacent_position['column'] . '/' . $next_adjacent_position['scale_position'] . '/' . $next_adjacent_position['tone'] . '<br/>nextnext (row/col/position/tone): ' .
                      $next_next_position['row'] . '/<strong>' . $next_next_position['column'] . '</strong>/' .
                      $next_next_position['scale_position'] . '/' . $next_next_position['tone'] . ' - nextnext_adjacent (row/col/position/tone): ' . $next_next_adjacent_position['row'] . '/' .
                      $next_next_adjacent_position['column'] . '/' . $next_next_adjacent_position['scale_position'] . '/' . $next_next_adjacent_position['tone'] . '<br/>nextnextnext (row/col/position/tone): ' .
                      $next_next_next_position['row'] . '/<strong>' . $next_next_next_position['column'] . '</strong>/' .
                      $next_next_next_position['scale_position'] . '/' . $next_next_next_position['tone'] . ' - nextnextnext_adjacent (row/col/position/tone): ' . $next_next_next_adjacent_position['row'] . '/' .
                      $next_next_next_adjacent_position['column'] . '/' . $next_next_next_adjacent_position['scale_position']. '/' . $next_next_next_adjacent_position['tone']);
                    dpm($next_next_position);*/
                    //dpm( 'scale: ' . $scale[0] . ', ' . $scale[1] . ', ' . $scale[2] . ', ' . $scale[3]);


                    $jount = 1;
                    $scale_record = [];
                    foreach ($scale as $s => $svalue) {
                      if (!in_array($current_position['tone'], $scale_record) && $current_position['tone'] == $svalue && $s >= $interval && $s <= 2 * $interval && isset($next_position['tone']) && $next_position['tone'] == $scale[$s] && isset($next_next_position['tone']) && $next_next_position['tone'] == $scale[$s + 1] && isset($next_next_next_position['tone']) && $next_next_next_position['tone'] == $scale[$s + 2]) {
                        $scale_record[] = $current_position['tone'];
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $current_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 1;
                        $calc_scale[$j][$jount]['tone'] = $next_next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 2;
                        $calc_scale[$j][$jount]['tone'] = $next_next_next_position['tone'];
                        $j++;
                        $jount = 1;
                      } elseif (!in_array($current_position['tone'], $scale_record) && $current_position['tone'] == $svalue && $s >= $interval && $s <= 2 * $interval && isset($next_position['tone']) && $next_position['tone'] == $scale[$s] && isset($next_next_position['tone']) && $next_next_position['tone'] == $scale[$s + 1] && isset($next_next_adjacent_position['tone']) && $next_next_adjacent_position['tone'] == $scale[$s + 1]) {
                        $scale_record[] = $current_position['tone'];
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $current_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 1;
                        $calc_scale[$j][$jount]['tone'] = $next_next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 1;
                        $calc_scale[$j][$jount]['tone'] = $next_next_next_position['tone'];
                        $j++;
                        $jount = 1;
                      } elseif (!in_array($current_position['tone'], $scale_record) && $current_position['tone'] == $svalue && $s >= $interval && $s <= 2 * $interval && isset($next_position['tone']) && $next_position['tone'] == $scale[$s + 1] && isset($next_next_position['tone']) && $next_next_position['tone'] == $scale[$s + 2] && isset($next_next_next_position['tone']) && $next_next_next_position['tone'] == $scale[$s + 3]) {
                        $scale_record[] = $current_position['tone'];
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $current_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 1;
                        $calc_scale[$j][$jount]['tone'] = $next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 2;
                        $calc_scale[$j][$jount]['tone'] = $next_next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 3;
                        $calc_scale[$j][$jount]['tone'] = $next_next_next_position['tone'];
                        $j++;
                        $jount = 1;
                      } elseif (!in_array($current_position['tone'], $scale_record) && $current_position['tone'] == $svalue && $s >= $interval && $s <= 2 * $interval && isset($next_position['tone']) && $next_position['tone'] == $scale[$s + 1] && isset($next_next_position['tone']) && $next_next_position['tone'] == $scale[$s + 2] && isset($next_next_next_position['tone']) && $next_next_next_position['tone'] == $scale[$s + 2]) {
                        $scale_record[] = $current_position['tone'];
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $current_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 1;
                        $calc_scale[$j][$jount]['tone'] = $next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 2;
                        $calc_scale[$j][$jount]['tone'] = $next_next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 2;
                        $calc_scale[$j][$jount]['tone'] = $next_next_next_position['tone'];
                        $j++;
                        $jount = 1;
                      } elseif (!in_array($current_position['tone'], $scale_record) && $current_position['tone'] == $svalue && $s >= $interval && $s <= 2 * $interval && isset($next_position['tone']) && $next_position['tone'] == $scale[$s + 1] && isset($next_next_position['tone']) && $next_next_position['tone'] == $scale[$s + 1] && isset($next_next_adjacent_position['tone']) && $next_next_adjacent_position['tone'] == $scale[$s + 2]) {
                        $scale_record[] = $current_position['tone'];
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $current_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 1;
                        $calc_scale[$j][$jount]['tone'] = $next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 1;
                        $calc_scale[$j][$jount]['tone'] = $next_next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s + 2;
                        $calc_scale[$j][$jount]['tone'] = $next_next_next_position['tone'];
                        $j++;
                        $jount = 1;
                      } elseif (!in_array($current_position['tone'], $scale_record) && $current_position['tone'] == $svalue && $s >= $interval && $s <= 2 * $interval && isset($next_position['tone']) && $next_position['tone'] == $scale[$s + 1] && isset($next_next_position['tone']) && $next_next_position['tone'] == $scale[$s + 1] && isset($next_next_next_position['tone']) && $next_next_adjacent_position['tone'] != $scale[$s + 2]) {
                        $scale_record[] = $current_position['tone'];
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $current_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 1;
                        $calc_scale[$j][$jount]['tone'] = $next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 1;
                        $calc_scale[$j][$jount]['tone'] = $next_next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 2;
                        $calc_scale[$j][$jount]['tone'] = $next_next_next_position['tone'];
                        $jount++;
                        $j++;
                        $jount = 1;
                      }

                    }

                    $jount = 1;
                    $scale_record = [];
                    foreach ($scale as $s => $svalue) {
                      if (!in_array($current_position['tone'], $scale_record) && $current_position['tone'] == $svalue && $s >= $interval && $s <= 2 * $interval && isset($next_position['tone']) && $next_position['tone'] == $scale[$s] && isset($next_next_position['tone']) && $next_next_position['tone'] == $scale[$s - 1] && isset($next_next_next_position['tone']) && $next_next_next_position['tone'] == $scale[$s - 2]) {
                        $scale_record[] = $current_position['tone'];
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $current_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 1;
                        $calc_scale[$j][$jount]['tone'] = $next_next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 2;
                        $calc_scale[$j][$jount]['tone'] = $next_next_next_position['tone'];
                        $j++;
                        $jount = 1;
                      } elseif (!in_array($current_position['tone'], $scale_record) && $current_position['tone'] == $svalue && $s >= $interval && $s <= 2 * $interval && isset($next_position['tone']) && $next_position['tone'] == $scale[$s] && isset($next_next_position['tone']) && $next_next_position['tone'] == $scale[$s - 1] && isset($next_next_next_position['tone']) && $next_next_adjacent_position['tone'] == $scale[$s - 1]) {
                        $scale_record[] = $current_position['tone'];
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $current_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 1;
                        $calc_scale[$j][$jount]['tone'] = $next_next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 1;
                        $calc_scale[$j][$jount]['tone'] = $next_next_next_position['tone'];
                        $j++;
                        $jount = 1;
                      } elseif (!in_array($current_position['tone'], $scale_record) && $current_position['tone'] == $svalue && $s >= $interval && $s <= 2 * $interval && isset($next_position['tone']) && $next_position['tone'] == $scale[$s - 1] && isset($next_next_position['tone']) && $next_next_position['tone'] == $scale[$s - 2] && isset($next_next_next_position['tone']) && $next_next_next_position['tone'] == $scale[$s - 3]) {
                        $scale_record[] = $current_position['tone'];
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $current_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 1;
                        $calc_scale[$j][$jount]['tone'] = $next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 2;
                        $calc_scale[$j][$jount]['tone'] = $next_next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 3;
                        $calc_scale[$j][$jount]['tone'] = $next_next_next_position['tone'];
                        $jount++;
                        $j++;
                        $jount = 1;
                      } elseif (!in_array($current_position['tone'], $scale_record) && $current_position['tone'] == $svalue && $s >= $interval && $s <= 2 * $interval && isset($next_position['tone']) && $next_position['tone'] == $scale[$s - 1] && isset($next_next_position['tone']) && $next_next_position['tone'] == $scale[$s - 2] && isset($next_next_next_position['tone']) && $next_next_next_position['tone'] == $scale[$s - 2]) {
                        $scale_record[] = $current_position['tone'];
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $current_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 1;
                        $calc_scale[$j][$jount]['tone'] = $next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 2;
                        $calc_scale[$j][$jount]['tone'] = $next_next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 2;
                        $calc_scale[$j][$jount]['tone'] = $next_next_next_position['tone'];
                        $jount++;
                        $j++;
                        $jount = 1;
                      } elseif (!in_array($current_position['tone'], $scale_record) && $current_position['tone'] == $svalue && $s >= $interval && $s <= 2 * $interval && isset($next_position['tone']) && $next_position['tone'] == $scale[$s - 1] && isset($next_next_position['tone']) && $next_next_position['tone'] == $scale[$s - 1] && isset($next_next_next_position['tone']) && $next_next_adjacent_position['tone'] == $scale[$s - 2]) {
                        $scale_record[] = $current_position['tone'];
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $current_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 1;
                        $calc_scale[$j][$jount]['tone'] = $next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 1;
                        $calc_scale[$j][$jount]['tone'] = $next_next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 2;
                        $calc_scale[$j][$jount]['tone'] = $next_next_next_position['tone'];
                        $jount++;
                        $j++;
                        $jount = 1;
                      } elseif (!in_array($current_position['tone'], $scale_record) && $current_position['tone'] == $svalue && $s >= $interval && $s <= 2 * $interval && isset($next_position['tone']) && $next_position['tone'] == $scale[$s - 1] && isset($next_next_position['tone']) && $next_next_position['tone'] == $scale[$s - 1] && isset($next_next_next_position['tone']) && $next_next_adjacent_position['tone'] != $scale[$s - 2]) {
                        $scale_record[] = $current_position['tone'];
                        $calc_scale[$j][$jount]['scale'] = $s;
                        $calc_scale[$j][$jount]['tone'] = $current_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 1;
                        $calc_scale[$j][$jount]['tone'] = $next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 1;
                        $calc_scale[$j][$jount]['tone'] = $next_next_position['tone'];
                        $jount++;
                        $calc_scale[$j][$jount]['scale'] = $s - 2;
                        $calc_scale[$j][$jount]['tone'] = $next_next_next_position['tone'];
                        $jount++;
                        $j++;
                        $jount = 1;
                      }

                    }


                    if (isset($calc_scale[1][1])) {
                      //dpm($calc_scale);
                      //dpm($i);
                    }

                    //not sure if this is still relevant...
                    foreach ($calc_scale as $cyber => $sca) {
                      foreach ($sca as $y => $scalevar) {
                        if ($scalevar['scale'] == 0) {
                          if (isset($calc_scale[1][$y - 1]['scale']) && $calc_scale[1][$y - 1]['scale'] == $tone - 1) {
                            if (isset($calc_scale[1][$y - 2]['scale']) && $calc_scale[1][$y - 2]['scale'] == $tone - 2 || isset($calc_scale[1][$y + 1]['scale']) && $calc_scale[1][$y + 1]['scale'] == 1) {
                              $calc_scale[1][$y]['scale'] = $tone;
                              if (isset($calc_scale[1][$y + 1])) {
                                $calc_scale[1][$y + 1]['scale'] = $tone + 1;
                              }
                              if (isset($calc_scale[1][$y + 2])) {
                                $calc_scale[1][$y + 2]['scale'] = $tone + 2;
                              }
                            }
                          }
                          if (isset($calc_scale[1][$y + 1]) && $calc_scale[1][$y + 1]['scale'] == $tone - 1) {
                            if (isset($calc_scale[1][$y + 2]['scale']) && $calc_scale[1][$y + 2]['scale'] == $tone - 2 || isset($calc_scale[1][$y - 1]['scale']) && $calc_scale[1][$y - 1]['scale'] == 1) {
                              $calc_scale[1][$y]['scale'] = $tone;
                              if (isset($calc_scale[1][$y - 1])) {
                                $calc_scale[1][$y - 1]['scale'] = $tone + 1;
                              }
                              if (isset($calc_scale[1][$y - 2])) {
                                $calc_scale[1][$y - 2]['scale'] = $tone + 2;
                              }
                            }
                          }
                        }
                      }
                    }

                    unset($next_position);
                    unset($next_adjacent_position);
                    unset($next_next_position);
                    unset($next_next_adjacent_position);
                    unset($next_next_next_position);
                    unset($next_next_next_adjacent_position);
                    unset($nadjacent);
                    unset($nnadjacent);


                    //if ($item['tone'] == 7) {
                      //dpm($v_dir . ' poleshift 1 (tone/scale): ' . $calc_scale[1][1]['tone'] . '/' . $calc_scale[1][2]['tone'] . '/' . $calc_scale[1][3]['tone'] . '/' . $calc_scale[1][4]['tone'] . ' | ' . $calc_scale[1][1]['scale'] . '/' . $calc_scale[1][2]['scale'] . '/' . $calc_scale[1][3]['scale'] . '/' . $calc_scale[1][4]['scale']);
                    //}
                    //  Okay, for the issue of unidirectional waves appearing, this is where they might get culled.  I amn switching the directions and testing to see what happens.
                    // The most basic use cases first.
                    if (isset($calc_scale[1][1]) && isset($calc_scale[1][2]) && isset($calc_scale[1][3])) {
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] - 1 && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] - 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale'] - 1) {
                        $h_dir = 'forward'; //TODO: changed to opposite
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] + 1 && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] + 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale'] + 1) {
                        $h_dir = 'reversed';  //TODO: changed to opposite
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] - 1 && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] - 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale']) {
                        $h_dir = 'forward'; //TODO: changed to opposite
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] + 1 && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] + 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale']) {
                        $h_dir = 'reversed';  //TODO: changed to opposite
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] + 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale']) {
                        $h_dir = 'reversed';  //TODO: changed to opposite
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] - 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale']) {
                        $h_dir = 'forward';  //TODO: changed to opposite
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] + 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale'] + 1) {
                        $h_dir = 'reversed';  //TODO: changed to opposite
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] - 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale'] - 1) {
                        $h_dir = 'forward';  //TODO: changed to opposite
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] + 1 && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale'] + 1) {
                        $h_dir = 'reversed';  //TODO: changed to opposite
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] - 1 && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale'] - 1) {
                        $h_dir = 'forward';  //TODO: changed to opposite
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }

                      // Now the wavelengths that are 3 high.
                      /*if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] - 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale'] - 1) {
                        $h_dir = 'forward';
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] + 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale'] + 1) {
                        $h_dir = 'reversed';
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] - 1 && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] - 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale']) {
                        $h_dir = 'forward';
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] + 1 && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] + 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale']) {
                        $h_dir = 'reversed';
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      // Now the wavelengths that are 2 high.
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] - 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale']) {
                        $h_dir = 'forward';
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] + 1 && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale'] + 1) {
                        $h_dir = 'reversed';
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] - 1 && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale'] - 1) {
                        $h_dir = 'forward';
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }
                      if ($calc_scale[1][1]['scale'] == $calc_scale[1][2]['scale'] + 1 && $calc_scale[1][2]['scale'] == $calc_scale[1][3]['scale'] + 1 && $calc_scale[1][3]['scale'] == $calc_scale[1][4]['scale']) {
                        $h_dir = 'reversed';
                        $tempcolor = array_pop($color_array);
                        $scale_increments[] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                        $spliced_matrix[$key][$k]['wave'][] = $calc_scale[1][1]['tone'] . ':' . $i . ':' . $v_dir . ':' . $h_dir . ':' . $tempcolor;
                      }*/
                    }
                    // TODO test
                    //unset($calc_scale);
                  }
                }
              }
            }
          }
        }
      }
  
  
  
  
      $wave_heights = array();
  
      // Find wave height;
      $wavecount = 0;
      $wave_height = 0;
      unset($first);
      
      foreach ($spliced_matrix as $key => $spliced_row) {
        foreach ($spliced_row as $k => $item) {
          
          if ($spliced_matrix[$key][$k]['column'] == 1) {
  
            if (isset($spliced_matrix[$key][$k]['wave_limit_processed']) &&
              $spliced_matrix[$key][$k]['wave_limit_processed'] == 1 && $spliced_matrix[$key][$k]['column'] == 1) {
              $save_key = 0;
              $save_k = 0;
              $save_tone = 0;

              if ($spliced_matrix[$key][$k]['tone'] == $spliced_matrix[$key][$k+1]['tone'] &&
                $spliced_matrix[$key][$k+2]['tone'] == $spliced_matrix[$key][$k+3]['tone'] ||
                $spliced_matrix[$key][$k+1]['tone'] == $spliced_matrix[$key][$k+2]['tone'] &&
                $spliced_matrix[$key][$k+3]['tone'] == $spliced_matrix[$key][$k+4]['tone']) {
                //dpm('WAVELIMIT');
                $spliced_matrix[$key][$k]['wave_limit'] == 1;
              }

              if (isset($scale_increments[$i]) /*&& $wave == $increment*/) {
                if (!isset($first) && isset($spliced_matrix[$key][$k]['wave_limit'])) {
                  if (isset($scale_increments)) {
                    foreach ($scale_increments as $i => $increment) {
                      if (isset($scale_increments[$i]) && isset($spliced_matrix[$key][$k]['wave'][$i]) && $spliced_matrix[$key][$k]['wave'][$i] == $increment
                      && !isset($first)) {

                        $wave_height == 1;
                        $wavecount == 1;

                        ////dpm($increment);
                        $explode = explode(':', $increment);
                        $jump = $explode[1];
                        $direction = $explode[2];

                        $spliced_matrix[$key][$k][$item['tone']][$direction][$jump]['wave_height'] = $wave_height;
                        $wave_heights[$item['tone']][$direction][$jump]['wave_height'] = $wave_height;
                        $save_key = $key;
                        $save_k = $k;
                        $save_tone = $item['tone'];
                        $midwave = 1;
                        $first = 'first';
                        //('first');
                      }
                    }
                  }
                }
                elseif (isset($first) && isset($spliced_matrix[$key][$k]['wave_limit'])) {
                  if (isset($scale_increments)) {
                    foreach ($scale_increments as $i => $increment) {
                      if (isset($scale_increments[$i]) && isset($spliced_matrix[$key][$k]['wave'][$i]) && $spliced_matrix[$key][$k]['wave'][$i] == $increment) {
                        $wave_height++;

                        ////dpm($increment);
                        $explode = explode(':', $increment);
                        $jump = $explode[1];
                        $direction = $explode[2];

                        $spliced_matrix[$key][$k][$item['tone']][$direction][$jump]['wave_height'] = $wave_height;
                        $spliced_matrix[$save_key][$save_k][$save_tone][$direction][$jump]['wave_height'] =
                          $wave_height;
                        $wave_heights[$item['tone']][$direction][$jump]['wave_height'] = $wave_height;
                        $wavecount++;
                        $wave_height = 1;
                        $spliced_matrix[$key][$k][$item['tone']][$direction][$jump]['wave_height'] = 1;
                        $wave_heights[$item['tone']][$direction][$jump]['wave_height'] = 1;
                        $save_key = $key;
                        $save_k = $k;
                        $save_tone = $item['tone'];
                        $midwave = 1;
                        //dpm('beginningend');
                      }
                    }
                  }
                }
                elseif (!isset($spliced_matrix[$key][$k]['wave_limit'])) {
                  //dpm(' middddddddle ');
                  $wave_height++;
                  $midwave = 0;
                }
              }
            }
          }
        }
      }
      
      //dpm($wave_heights);

      if (!empty($spliced_matrix)) {
        foreach ($spliced_matrix as $key => $spliced_row) {
          foreach ($spliced_row as $k => $item) {
            if (isset($spliced_matrix[$key][$k]['wave_limit_processed']) && $spliced_matrix[$key][$k]['wave_limit_processed'] == 1 && $spliced_matrix[$key][$k]['column'] == 1) {
              if (isset($scale_increments)) {
                foreach ($scale_increments as $i => $increment) {
                  ////dpm($increment);
                  $explode = explode(':', $increment);
                  $jump = $explode[1];
                  $direction = $explode[2];
                  $scale_direction = $explode[3];
                  $color = $explode[4];
                  //$colors = jellomatrix_get_colors();
                  $cad= 0;

                  if (isset($spliced_matrix[$key][$k]['wave'])/* odd waveform && $jump %2 == 0*/) {

                    foreach ($spliced_matrix[$key][$k]['wave'] as $w => $wave) {
                      if (isset($scale_increments[$i]) && $wave == $increment) {


                        if ($direction == 'down' && !empty($spliced_matrix[$key][$k][$item['tone']][$direction][$jump]['wave_height'])) {
                          $wave_height = $spliced_matrix[$key][$k][$item['tone']][$direction][$jump]['wave_height'];
                        }
                        if ($direction == 'up' && !empty($spliced_matrix[$key][$k][$item['tone']][$direction][$jump]['wave_height'])) {
                          $wave_height = $spliced_matrix[$key][$k][$item['tone']][$direction][$jump]['wave_height'];
                        }
                        //dpm($wave_height);


                        if ($direction == 'down' && $cad== 0) {
                          if ($item['pole_shift'] == 'left') {
                            $current_position_key = $key;
                            $current_position_k = $k + 1;
                            $spliced_matrix[$key][$k]['yellow'] = 'red';
                            $spliced_matrix[$key][$k]['rhythm'][$jump] = $jump;

                            $spliced_matrix[$key][$k]['wavelength_even'][$jump] = 1 + ($jump * ($wave_height - 1));

                            $spliced_matrix[$key][$k + 1]['yellow'] = $color;
                            $spliced_matrix[$key][$k + 1]['color_text'] = $color;
                            $spliced_matrix[$key][$k + 1]['rhythm'][$jump] = $jump;

                            $spliced_matrix[$key][$k + 1]['wavelength_even'][$jump] = 1 + ($jump * ($wave_height - 1));

                            $spliced_matrix_reversed[$key][$k]['yellow'] = 'red';
                            $spliced_matrix_reversed[$key][$k]['rhythm'][$jump] = $jump;

                            $spliced_matrix_reversed[$key][$k]['wavelength_even'][$jump] = 1 + ($jump * ($wave_height - 1));

                            $spliced_matrix_reversed[$key][$k + 1]['yellow'] = $color;
                            $spliced_matrix_reversed[$key][$k + 1]['color_text'] = $color;
                            $spliced_matrix_reversed[$key][$k + 1]['rhythm'][$jump] = $jump;

                            $spliced_matrix_reversed[$key][$k + 1]['wavelength_even'][$jump] = 1 + ($jump * ($wave_height - 1));
                            $cad++;
                          }
                          if ($item['pole_shift'] == 'right') {
                            $current_position_key = $key;
                            $current_position_k = $k;
                            $spliced_matrix[$key][$k]['yellow'] = 'red';
                            $spliced_matrix[$key][$k]['rhythm'][$jump] = $jump;

                            $spliced_matrix[$key][$k]['wavelength_even'][$jump] = 1 + ($jump * ($wave_height - 1));

                            $spliced_matrix_reversed[$key][$k]['yellow'] = 'red';
                            $spliced_matrix_reversed[$key][$k]['rhythm'][$jump] = $jump;

                            $spliced_matrix_reversed[$key][$k]['wavelength_even'][$jump] = 1 + ($jump * ($wave_height - 1));

                          }
                          if (isset($current_position_k) && isset($current_position_key)) {
                            if ($scale_direction == 'forward') {
                              $til = $tone * 5;
                              $z = 1;
                              while ($z <= $til) {
                                if (isset($spliced_matrix[$current_position_key][$current_position_k + $jump]) && $spliced_matrix[$current_position_key][$current_position_k]['tone'] != $spliced_matrix[$current_position_key][$current_position_k + 1]['tone']) {
                                  if ($direction == 'down' && isset($spliced_matrix[$current_position_key + 1][$current_position_k + $jump])) {
                                    $current_position_key = $current_position_key + 1;
                                    $current_position_k = $current_position_k + $jump;
                                    if (isset($current_position_k) && isset($current_position_key)) {
                                      $spliced_matrix[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $cad++;
                                    }
                                  } elseif ($direction == 'up' && isset($spliced_matrix[$current_position_key - 1][$current_position_k + $jump])) {
                                    $current_position_key = $current_position_key - 1;
                                    $current_position_k = $current_position_k + $jump;
                                    if (isset($current_position_k) && isset($current_position_key)) {
                                      $spliced_matrix[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $cad++;
                                    }
                                  } else {
                                    break;
                                  }
                                } elseif (isset($spliced_matrix[$current_position_key][$current_position_k + 1]) && $spliced_matrix[$current_position_key][$current_position_k]['tone'] == $spliced_matrix[$current_position_key][$current_position_k + 1]['tone']) {
                                  $current_position_k = $current_position_k + 1;
                                  $spliced_matrix[$current_position_key][$current_position_k]['yellow'] = $color;
                                  $spliced_matrix_reversed[$current_position_key][$current_position_k]['yellow'] = $color;
                                  $spliced_matrix[$current_position_key][$current_position_k]['color_text'] = $color;
                                  $spliced_matrix_reversed[$current_position_key][$current_position_k]['color_text'] = $color;
                                  $spliced_matrix[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                  $spliced_matrix_reversed[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                  $cad++;
                                  if ($direction == 'down') {
                                    $direction = 'up';
                                  } else {
                                    $direction = 'down';
                                  }
                                } else {
                                  break;
                                }
                                $z++;
                              }
                            }
                            if ($scale_direction == 'reversed') {
                              $til = $tone * 5;
                              $z = 1;
                              while ($z <= $til) {
                                if (isset($spliced_matrix[$current_position_key][$current_position_k + $jump]) && $spliced_matrix[$current_position_key][$current_position_k]['tone'] != $spliced_matrix[$current_position_key][$current_position_k + 1]['tone']) {
                                  if ($direction == 'down' && isset($spliced_matrix[$current_position_key + 1][$current_position_k + $jump])) {
                                    $current_position_key = $current_position_key + 1;
                                    $current_position_k = $current_position_k + $jump;
                                    if (isset($current_position_k) && isset($current_position_key)) {
                                      $spliced_matrix[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $cad++;
                                    }
                                  } elseif ($direction == 'up' && isset($spliced_matrix[$current_position_key - 1][$current_position_k + $jump])) {
                                    $current_position_key = $current_position_key - 1;
                                    $current_position_k = $current_position_k + $jump;
                                    if (isset($current_position_k) && isset($current_position_key)) {
                                      $spliced_matrix[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $cad++;
                                    }
                                  } else {
                                    break;
                                  }
                                } elseif (isset($spliced_matrix[$current_position_key][$current_position_k + 1]) && $spliced_matrix[$current_position_key][$current_position_k]['tone'] == $spliced_matrix[$current_position_key][$current_position_k + 1]['tone']) {
                                  $current_position_k = $current_position_k + 1;
                                  $spliced_matrix[$current_position_key][$current_position_k]['yellow'] = $color;
                                  $spliced_matrix_reversed[$current_position_key][$current_position_k]['yellow'] = $color;
                                  $spliced_matrix[$current_position_key][$current_position_k]['color_text'] = $color;
                                  $spliced_matrix_reversed[$current_position_key][$current_position_k]['color_text'] = $color;
                                  $spliced_matrix[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                  $spliced_matrix_reversed[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                  $cad++;
                                  if ($direction == 'down') {
                                    $direction = 'up';
                                  } else {
                                    $direction = 'down';
                                  }
                                } else {
                                  break;
                                }
                                $z++;
                              }
                            }
                          }
                          $cad++;
                        }
                        unset($current_position_k);
                        unset($current_position_key);
                        if ($direction == 'up' && $cad== 0) {
                          if ($item['pole_shift'] == 'left') {
                            $current_position_key = $key;
                            $current_position_k = $k + 1;
                            $spliced_matrix[$key][$k]['yellow'] = 'red';
                            $spliced_matrix[$key][$k]['rhythm'][$jump] = $jump;

                            $spliced_matrix[$key][$k]['wavelength_even'][$jump] = 1 + ($jump * ($wave_height - 1));

                            $spliced_matrix[$key][$k + 1]['yellow'] = $color;
                            $spliced_matrix[$key][$k + 1]['color_text'] = $color;
                            $spliced_matrix[$key][$k + 1]['rhythm'][$jump] = $jump;

                            $spliced_matrix[$key][$k + 1]['wavelength_even'][$jump] = 1 + ($jump * ($wave_height - 1));

                            $spliced_matrix_reversed[$key][$k]['yellow'] = 'red';
                            $spliced_matrix_reversed[$key][$k]['rhythm'][$jump] = $jump;

                            $spliced_matrix_reversed[$key][$k]['wavelength_even'][$jump] = 1 + ($jump * ($wave_height - 1));

                            $spliced_matrix_reversed[$key][$k + 1]['yellow'] = $color;
                            $spliced_matrix_reversed[$key][$k + 1]['color_text'] = $color;
                            $spliced_matrix_reversed[$key][$k + 1]['rhythm'][$jump] = $jump;

                            $spliced_matrix_reversed[$key][$k + 1]['wavelength_even'][$jump] = 1 + ($jump * ($wave_height - 1));
                            $cad++;
                          }
                          if ($item['pole_shift'] == 'right') {
                            $current_position_key = $key;
                            $current_position_k = $k;
                            $spliced_matrix[$key][$k]['yellow'] = 'red';
                            $spliced_matrix[$key][$k]['rhythm'][$jump] = $jump;

                            $spliced_matrix[$key][$k]['wavelength_even'][$jump] = 1 + ($jump * ($wave_height - 1));

                            $spliced_matrix_reversed[$key][$k]['yellow'] = 'red';
                            $spliced_matrix_reversed[$key][$k]['rhythm'][$jump] = $jump;

                            $spliced_matrix_reversed[$key][$k]['wavelength_even'][$jump] = 1 + ($jump * ($wave_height - 1));


                          }
                          if (isset($current_position_k) && isset($current_position_key)) {
                            if ($scale_direction == 'forward') {
                              $til = $tone * 5;
                              $z = 1;
                              while ($z <= $til) {
                                if (isset($spliced_matrix[$current_position_key][$current_position_k + $jump]) && $spliced_matrix[$current_position_key][$current_position_k]['tone'] != $spliced_matrix[$current_position_key][$current_position_k + 1]['tone']) {
                                  if ($direction == 'down' && isset($spliced_matrix[$current_position_key + 1][$current_position_k + $jump])) {
                                    $current_position_key = $current_position_key + 1;
                                    $current_position_k = $current_position_k + $jump;
                                    if (isset($current_position_k) && isset($current_position_key)) {
                                      $spliced_matrix[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $cad++;
                                    }
                                  } elseif ($direction == 'up' && isset($spliced_matrix[$current_position_key - 1][$current_position_k + $jump])) {
                                    $current_position_key = $current_position_key - 1;
                                    $current_position_k = $current_position_k + $jump;
                                    if (isset($current_position_k) && isset($current_position_key)) {
                                      $spliced_matrix[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $cad++;
                                    }
                                  } else {
                                    break;
                                  }
                                } elseif (isset($spliced_matrix[$current_position_key][$current_position_k + 1]) && $spliced_matrix[$current_position_key][$current_position_k]['tone'] == $spliced_matrix[$current_position_key][$current_position_k + 1]['tone']) {
                                  $current_position_k = $current_position_k + 1;
                                  $spliced_matrix[$current_position_key][$current_position_k]['yellow'] = $color;
                                  $spliced_matrix_reversed[$current_position_key][$current_position_k]['yellow'] = $color;
                                  $spliced_matrix[$current_position_key][$current_position_k]['color_text'] = $color;
                                  $spliced_matrix_reversed[$current_position_key][$current_position_k]['color_text'] = $color;
                                  $spliced_matrix[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                  $spliced_matrix_reversed[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                  $cad++;
                                  if ($direction == 'down') {
                                    $direction = 'up';
                                  } else {
                                    $direction = 'down';
                                  }
                                } else {
                                  break;
                                }
                                $z++;
                              }
                            }
                            if ($scale_direction == 'reversed') {
                              $til = $tone * 5;
                              $z = 1;
                              while ($z <= $til) {
                                if (isset($spliced_matrix[$current_position_key][$current_position_k + $jump]) && $spliced_matrix[$current_position_key][$current_position_k]['tone'] != $spliced_matrix[$current_position_key][$current_position_k + 1]['tone']) {
                                  if ($direction == 'down' && isset($spliced_matrix[$current_position_key + 1][$current_position_k + $jump])) {
                                    $current_position_key = $current_position_key + 1;
                                    $current_position_k = $current_position_k + $jump;
                                    if (isset($current_position_k) && isset($current_position_key)) {
                                      $spliced_matrix[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $cad++;
                                    }
                                  } elseif ($direction == 'up' && isset($spliced_matrix[$current_position_key - 1][$current_position_k + $jump])) {
                                    $current_position_key = $current_position_key - 1;
                                    $current_position_k = $current_position_k + $jump;
                                    if (isset($current_position_k) && isset($current_position_key)) {
                                      $spliced_matrix[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['yellow'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['color_text'] = $color;
                                      $spliced_matrix[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $spliced_matrix_reversed[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                      $cad++;
                                    }
                                  } else {
                                    break;
                                  }
                                } elseif (isset($spliced_matrix[$current_position_key][$current_position_k + 1]) && $spliced_matrix[$current_position_key][$current_position_k]['tone'] == $spliced_matrix[$current_position_key][$current_position_k + 1]['tone']) {
                                  $current_position_k = $current_position_k + 1;
                                  $spliced_matrix[$current_position_key][$current_position_k]['yellow'] = $color;
                                  $spliced_matrix_reversed[$current_position_key][$current_position_k]['yellow'] = $color;
                                  $spliced_matrix[$current_position_key][$current_position_k]['color_text'] = $color;
                                  $spliced_matrix_reversed[$current_position_key][$current_position_k]['color_text'] = $color;
                                  $spliced_matrix[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                  $spliced_matrix_reversed[$current_position_key][$current_position_k]['rhythm'][$jump] = $jump;
                                  $cad++;
                                  if ($direction == 'down') {
                                    $direction = 'up';
                                  } else {
                                    $direction = 'down';
                                  }
                                } else {
                                  break;
                                }
                                $z++;
                              }
                            }
                          }
                          $cad++; // TODO
                        }
                      }
                    }
                  }
                  //unset($jump);
                  //unset($direction);
                  //unset($scale_direction);
                  //unset($colors);
                  //unset($c);
                  //unset($explode);
                  //unset($current_position_key);
                  //unset($current_position_k);
                }
              }
            }
          }
        }
      }
  
      foreach ($spliced_matrix as $key => $spliced_row) {
        foreach ($spliced_row as $k => $item) {
          if (isset($spliced_matrix[$key][$k]['wavelength_even'])) {
            foreach ($spliced_matrix[$key][$k]['wavelength_even'] as $jump => $value) {
              $wave_interactions[$spliced_matrix[$key][$k]['tone']][$jump]['wavelength'] = $value;
            }
          }
          if (isset($spliced_matrix[$key][$k]['wavelength_odd'])) {
            foreach ($spliced_matrix[$key][$k]['wavelength_odd'] as $jump => $value) {
              $wave_interactions[$spliced_matrix[$key][$k]['tone']][$jump]['wavelength'] = $value;
            }
          }
        }
      }
  
      //dpm($wave_interactions);

      /*if (isset($wave_interactions)) {
    
        $phi = 1 / 1.618;
        $wavelength_calculation = '<div class="endtable"></div><div class="begintext"><div class="wavelength-calculation"><p>';
    
        $wavelengths = array();
        foreach ($wave_interactions as $tone => $jumps) {
          //dpm($tone);
          //dpm($jumps);
          $ucount = 0;
          $wavelengths_added = 0;
          $wavelengths_mult = 1;
          foreach ($jumps as $jump => $wavelength) {
            if ($jump % 2 == 0) {
              $ucount++;
              $wavelength_old = $wavelengths_added;
              $wavelengths_added = $wavelength_old + abs($wavelength['wavelength']);
              $wavelength_old = $ucount*$wavelengths_mult;
              $wavelengths_mult = abs($wavelength_old)*abs($wavelength['wavelength']);
              $wavelengths[$tone][abs($wavelength['wavelength'])]['jump'] = $jump;
            }
          }
          $ocount = 0;
          $owavelengths_added = 0;
          $owavelengths_mult = 1;
          foreach ($jumps as $jump => $owavelength) {
            if ($jump % 2 != 0) {
              $ocount++;
              $owavelength_old = $owavelengths_added;
              $owavelengths_added = $owavelength_old + abs($owavelength['wavelength']*$owavelength['waveheight']);
              $owavelength_old = $ocount*$owavelengths_mult;
              $owavelengths_mult = abs($owavelength_old)*abs($owavelength['wavelength']);
              $owavelengths[$tone][abs($owavelength['wavelength'])]['jump'] = $jump;
            }
          }
          //dpm($wave_height);
          if ($wavelengths_added > 0) {
            $wavelengths_phi = ($phi * $wavelengths_mult) / abs($wavelengths_added);
          }
          if ($owavelengths_added > 0) {
            $owavelengths_phi = ($phi * $owavelengths_mult) / abs($owavelengths_added);
          }
      
          $wavelength_calculation .= '<strong>EVEN Tone ' . $tone . '</strong> with <strong>' . $ucount . '</strong> wavelength/s counted.';
          if (!empty($wavelengths['tone'])) {
            foreach ($wavelengths['tone'] as $w => $value) {
              $wavelength_calculation .= '<br/>Half-wavelength for <strong>rhythm ' . $value['jump'] . '</strong> is ' . $w . '.';
            }
          }
          $wavelength_calculation .= '</strong><br/>phi(wavelengths multiplied)/wavelengths added = ' . $phi . '*' . abs($wavelengths_mult) . '/' . abs($wavelengths_added) . ' = <strong>' . $wavelengths_phi . '</strong></br>';
      
          if ($owavelengths_added > 0) {
            $wavelength_calculation .= '<strong>ODD Tone ' . $tone . '</strong> with <strong>' . $ocount . '</strong> wavelength/s counted.';
            foreach ($owavelengths['tone'] as $ow => $ovalue) {
              $wavelength_calculation .= '<br/>Half-wavelength for <strong>rhythm ' . $ovalue['jump'] . '</strong> is ' . $ow . '.';
            }
            $wavelength_calculation .= '</strong><br/>phi(wavelengths multiplied)/wavelengths added = ' . $phi . '*' . abs($owavelengths_mult) . '/' . abs($owavelengths_added) . ' = <strong>' . $owavelengths_phi . '</strong></br>';
          }
          // Retrieve an array which contains the path pieces.
          $current_path = \Drupal::service('path.current')->getPath();
          $path_args = explode('/', $current_path);
          if ($path_args[3] == 20 && $path_args[2] == 13) {
            $wavelengths_phi = (.615 * $wavelengths_mult) / abs($wavelengths_added);
            $wavelength_calculation .= '<strong>VENUS Calculation</strong> with <strong>' . $ucount . '</strong> wavelength/s counted.';
            foreach ($wavelengths[$tone] as $w => $value) {
              $wavelength_calculation .= '<br/>Half-wavelength for <strong>rhythm ' . $value['jump'] . '</strong> is ' . $w. '.';
            }
            $wavelength_calculation .= '</strong><br/>venus ratio = orbit of venus / orbit of earth = .615<br/> venus ratio(wavelengths multiplied)/wavelengths added = .615*' . abs($wavelengths_mult) . '/' . abs($wavelengths_added) . ' = <strong>' . $wavelengths_phi . '</strong></br>';
          }
        }
        $wavelength_calculation .= '</p></div></div>';
      }*/
    //}
  //}


  if (isset($no_scales)) {
  } else {

    if (!empty($spliced_matrix)) {
      $wave_detection['spliced_matrix'] = $spliced_matrix;
    }
    if (!empty($spliced_matrix_reversed)) {
      $wave_detection['spliced_matrix_reversed'] = $spliced_matrix_reversed;
    }
    if (!empty($wavelength_calculation)) {
      //$wave_detection['wavelength_calculation'] = $wavelength_calculation;
    }
    if (!empty($scale_increments)) {
      $wave_detection['scale_increments'] = $scale_increments;
    }
    //unset($spliced_matrix_reversed);
    //unset($spliced_matrix);
    //unset($wavelength_calculation);
    //unset($scale_increments);
    if (!empty($wave_detection)) {
      return $wave_detection;
    }
  }
  unset($jump);
  unset($direction);
  unset($scale_direction);
  unset($colors);
  unset($c);
  unset($count);
  unset($fount);
  unset($z);
  unset($j);
  unset($cad);
  unset($explode);
  unset($current_position_key);
  unset($current_position_k);
  unset($spliced_matrix_reversed);
  unset($spliced_matrix);
  unset($wavelength_calculation);
  unset($scale_increments);
}

function jellomatrix_increments_derivative($spliced_matrix, $tone) {
  // Now we find the increments for the DERIVATIVES.
  $increments = array();
  // Same row, forward direction.
  foreach ($spliced_matrix as $row=>$spliced_row) {
    foreach ($spliced_row as $column=>$item) {
      $neighbor_tone = 0;
      $item_tone = $item['tone'];
      $c = $item['column'];
      $c1 = $c+1;
      $r = $item['row'];
      $r1 = $r;

      if (isset($spliced_matrix[$r1][$c1]['tone'])) {
        $neighbor_tone = $spliced_matrix[$r1][$c1]['tone'];
        if ($item_tone >= $neighbor_tone) {
          $increments['row']['forward'][$row][$column] = $item_tone-$neighbor_tone;
        }
        if ($neighbor_tone > $item_tone) {
          $increments['row']['forward'][$row][$column] = $tone+$item_tone - $neighbor_tone;
        }
      }
    }
  }
  if (isset($increments['row']['forward'])) {
    foreach ($increments['row']['forward'] as $row=>$spliced_row) {
      foreach ($spliced_row as $column=>$item) {
        $neighbor_tone = 0;
        $item_tone = $item;
        $c = $column;
        $c1 = $column+1;
        $r = $row;
        $r1 = $r;

        if (isset($increments['row']['forward'][$r1][$c1])) {
          $neighbor_tone = $increments['row']['forward'][$r1][$c1];
          if ($item_tone >= $neighbor_tone) {
            $increments['row']['derivative'][$row][$column] = $item_tone-$neighbor_tone;
          }
          if ($neighbor_tone > $item_tone) {
            $increments['row']['derivative'][$row][$column] = $tone+$item_tone - $neighbor_tone;
          }
        }
      }
    }
  }
  if (isset($increments['row']['derivative'])) {
    foreach ($increments['row']['derivative'] as $row=>$spliced_row) {
      foreach ($spliced_row as $column=>$item) {
        $neighbor_tone = 0;
        $item_tone = $item;
        $c = $column;
        $c1 = $column+1;
        $r = $row;
        $r1 = $r;

        if (isset($increments['row']['derivative'][$r1][$c1])) {
          $neighbor_tone = $increments['row']['derivative'][$r1][$c1];
          if ($item_tone >= $neighbor_tone) {
            $increments['row']['derivative_2'][$row][$column] = $item_tone-$neighbor_tone;
          }
          if ($neighbor_tone > $item_tone) {
            $increments['row']['derivative_2'][$row][$column] = $tone+$item_tone - $neighbor_tone;
          }
        }
      }
    }
  }
  return $increments;
}


function jellomatrix_increments_original($spliced_matrix, $tone) {
  // And now we want to start calculating the sums of each of the rows
  // using their grid_x and grid_y values and using a counting system
  // based on the $tone value.  Oh yeah, WITHOUT a database...
  $increment_original = array();
  $count = 1;
  foreach ($spliced_matrix as $row) {
    foreach ($row as $item) {
      $tt = 0;
      $it = $item['tone'];
      $c = $item['grid_x'];
      $c1 = $c+1;
      $r = $item['grid_y'];
      $r1 = $r;
      if (isset($spliced_matrix[$r1][$c1]['tone'])) {
        $tt = $spliced_matrix[$r1][$c1]['tone'];
      }
      if ($tt>0 && $it>0) {
        if ($tt >= $it) {
          $increment_original['row']['forward'][$count][] = $tt-$it;
        }
        elseif ($it > $tt) {
          $increment_original['row']['forward'][$count][] = $tone+$tt-$it;
        }
      }
    }
    $count++;
  }
  $count = 1;
  foreach ($spliced_matrix as $row) {
    foreach ($row as $item) {
      $tt = 0;
      $it = $item['tone'];
      $c = $item['grid_x'];
      $c1 = $c-1;
      $r = $item['grid_y'];
      $r1 = $r;
      if (isset($spliced_matrix[$r1][$c1]['tone'])) {
        $tt = $spliced_matrix[$r1][$c1]['tone'];
      }
      if ($tt>0 && $it>0) {
        if ($it <= $tt && isset($tt) && isset($tt)) {
          $increment_original['row']['backward'][$count][] = $tt-$it;
        }
        elseif ($tt < $it) {
          $increment_original['row']['backward'][$count][] = $tone+$tt-$it;
        }
      }
    }
    $count++;
  }

  // And now we want to start calculating the sums of each of the diagonals
  // using their grid_x and grid_y values and using a counting system
  // based on the $tone value.  Oh yeah, WITHOUT a database...
  $count = 1;
  foreach ($spliced_matrix as $row) {
    foreach ($row as $item) {
      $tt = 0;
      $it = $item['tone'];
      $c = $item['grid_x'];
      $c1 = $c+1;
      $r = $item['grid_y'];
      $r1 = $r;
      $r1 = $r+1;
      if (isset($spliced_matrix[$r1][$c1]['tone'])) {
        $tt = $spliced_matrix[$r1][$c1]['tone'];
      }
      if ($tt>0 && $it>0) {
        if ($tt >= $it) {
          $increment_original['lrdiag']['forward'][$count][] = $tt - $it;
        }
        elseif ($it > $tt) {
          $increment_original['lrdiag']['forward'][$count][] = $tone+$tt-$it;
        }
      }
    }
    $count++;
  }
  $count = 1;
  foreach ($spliced_matrix as $row) {
    foreach ($row as $item) {
      $tt = 0;
      $it = $item['tone'];
      $c = $item['grid_x'];
      $c1 = $c-1;
      $r = $item['grid_y'];
      $r1 = $r-1;
      if (isset($spliced_matrix[$r1][$c1]['tone'])) {
        $tt = $spliced_matrix[$r1][$c1]['tone'];
      }
      if ($tt>0 && $it>0) {
        if ($it <= $tt && isset($tt)) {
          $increment_original['lrdiag']['backward'][$count][] = $tt-$it;
        }
        elseif ($tt < $it) {
          $increment_original['lrdiag']['backward'][$count][] = $tone+$tt-$it;
        }
      }
    }
    $count++;
  }
  $count = 1;
  foreach ($spliced_matrix as $row) {
    foreach ($row as $item) {
      $tt = 0;
      $it = $item['tone'];
      $c = $item['grid_x'];
      $c1 = $c+1;
      $r = $item['grid_y'];
      $r1 = $r-1;
      if (isset($spliced_matrix[$r1][$c1]['tone'])) {
        $tt = $spliced_matrix[$r1][$c1]['tone'];
      }
      if ($tt>0 && $it>0) {
        if ($tt >= $it) {
          $increment_original['rldiag']['forward'][$count][] = $tt-$it;
        }
        elseif ($it > $tt) {
          $increment_original['rldiag']['forward'][$count][] = $tone+$tt-$it;
        }
      }
    }
    $count++;
  }
  $count = 1;
  foreach ($spliced_matrix as $row) {
    $c = 1;
    foreach ($row as $item) {
      $tt = 0;
      $it = $item['tone'];
      $c = $item['grid_x'];
      $c1 = $c-1;
      $r = $item['grid_y'];
      $r1 = $r+1;
      if (isset($spliced_matrix[$r1][$c1]['tone'])) {
        $tt = $spliced_matrix[$r1][$c1]['tone'];
      }
      if ($tt>0 && $it>0) {
        if ($tt >= $it) {
          $increment_original['rldiag']['backward'][$count][] = $tt-$it;
        }
        elseif ($tt < $it) {
          $increment_original['rldiag']['backward'][$count][] = $tone+$tt-$it;
        }
      }
    }
    $count++;
  }
  return $increment_original;
}

function jellomatrix_increments_prime_derivative($prime_matrix, $tone) {
  // Now we find the increments for the DERIVATIVES.
  $increments_prime = array();
  // Same row, forward direction.
  foreach ($prime_matrix as $row=>$prime_row) {
    foreach ($prime_row as $column=>$item) {
      $neighbor_tone = 0;
      $item_tone = $item['tone'];
      $c = $item['column'];
      $c1 = $c+1;
      $r = $item['row'];
      $r1 = $r;

      if (isset($prime_matrix[$r1][$c1]['tone'])) {
        $neighbor_tone = $prime_matrix[$r1][$c1]['tone'];
        if ($item_tone >= $neighbor_tone) {
          $increments_prime['row']['forward'][$row][$column] = $item_tone-$neighbor_tone;
        }
        if ($neighbor_tone > $item_tone) {
          $increments_prime['row']['forward'][$row][$column] = $tone+$item_tone - $neighbor_tone;
        }
      }
    }
  }
  if (isset($increments['row']['forward'])) {
    foreach ($increments_prime['row']['forward'] as $row=>$prime_row) {
      foreach ($prime_row as $column=>$item) {
        $neighbor_tone = 0;
        $item_tone = $item;
        $c = $column;
        $c1 = $column+1;
        $r = $row;
        $r1 = $r;

        if (isset($increments_prime['row']['forward'][$r1][$c1])) {
          $neighbor_tone = $increments_prime['row']['forward'][$r1][$c1];
          if ($item_tone >= $neighbor_tone) {
            $increments_prime['row']['derivative'][$row][$column] = $item_tone-$neighbor_tone;
          }
          if ($neighbor_tone > $item_tone) {
            $increments_prime['row']['derivative'][$row][$column] = $tone+$item_tone - $neighbor_tone;
          }
        }
      }
    }
  }
  if (isset($increments['row']['derivative'])) {
    foreach ($increments_prime['row']['derivative'] as $row=>$prime_row) {
      foreach ($prime_row as $column=>$item) {
        $neighbor_tone = 0;
        $item_tone = $item;
        $c = $column;
        $c1 = $column+1;
        $r = $row;
        $r1 = $r;

        if (isset($increments_prime['row']['derivative'][$r1][$c1])) {
          $neighbor_tone = $increments_prime['row']['derivative'][$r1][$c1];
          if ($item_tone >= $neighbor_tone) {
            $increments_prime['row']['derivative_2'][$row][$column] = $item_tone-$neighbor_tone;
          }
          if ($neighbor_tone > $item_tone) {
            $increments_prime['row']['derivative_2'][$row][$column] = $tone+$item_tone - $neighbor_tone;
          }
        }
      }
    }
  }
  return $increments_prime;
}


function jellomatrix_harmonics($frequency) {
  // Now the harmonics.
  $harmonics = array();
  $harmonics[] = '0:0:origin';
  $harmonics[] = '1:1:C';
  $harmonics[] = '1:2:C';
  $harmonics[] = '1:3:F';
  $harmonics[] = '1:4:C';
  $harmonics[] = '1:5:G#';
  $harmonics[] = '1:6:F';
  $harmonics[] = '1:7:D';
  $harmonics[] = '1:8:C';
  $harmonics[] = '1:9:Bb';
  $harmonics[] = '1:10:G#';
  $harmonics[] = '1:11:F#';
  $harmonics[] = '1:12:F';
  $harmonics[] = '1:13:E';
  $harmonics[] = '1:14:D';
  $harmonics[] = '1:15:C#';
  $harmonics[] = '1:16:C';
  $harmonics[] = '2:1:C';
  $harmonics[] = '2:2:C';
  $harmonics[] = '2:3:F';
  $harmonics[] = '2:4:C';
  $harmonics[] = '2:5:G#';
  $harmonics[] = '2:6:F';
  $harmonics[] = '2:7:D';
  $harmonics[] = '2:8:C';
  $harmonics[] = '2:9:Bb';
  $harmonics[] = '2:10:G#';
  $harmonics[] = '2:11:F#';
  $harmonics[] = '2:12:F';
  $harmonics[] = '2:13:E';
  $harmonics[] = '2:14:D';
  $harmonics[] = '2:15:C#';
  $harmonics[] = '2:16:C';
  $harmonics[] = '3:1:G';
  $harmonics[] = '3:2:G';
  $harmonics[] = '3:3:C';
  $harmonics[] = '3:4:G';
  $harmonics[] = '3:5:Eb';
  $harmonics[] = '3:6:C';
  $harmonics[] = '3:7:A';
  $harmonics[] = '3:8:G';
  $harmonics[] = '3:9:F';
  $harmonics[] = '3:10:Eb';
  $harmonics[] = '3:11:C#';
  $harmonics[] = '3:12:C';
  $harmonics[] = '3:13:B';
  $harmonics[] = '3:14:A';
  $harmonics[] = '3:15:G#';
  $harmonics[] = '3:16:G';
  $harmonics[] = '4:1:C';
  $harmonics[] = '4:2:C';
  $harmonics[] = '4:3:F';
  $harmonics[] = '4:4:C';
  $harmonics[] = '4:5:G#';
  $harmonics[] = '4:6:F';
  $harmonics[] = '4:7:D';
  $harmonics[] = '4:8:C';
  $harmonics[] = '4:9:Bb';
  $harmonics[] = '4:10:G#';
  $harmonics[] = '4:11:F#';
  $harmonics[] = '4:12:F';
  $harmonics[] = '4:13:E';
  $harmonics[] = '4:14:D';
  $harmonics[] = '4:15:C#';
  $harmonics[] = '4:16:C';
  $harmonics[] = '5:1:E';
  $harmonics[] = '5:2:E';
  $harmonics[] = '5:3:A';
  $harmonics[] = '5:4:E';
  $harmonics[] = '5:5:C';
  $harmonics[] = '5:6:A';
  $harmonics[] = '5:7:F#';
  $harmonics[] = '5:8:E';
  $harmonics[] = '5:9:D';
  $harmonics[] = '5:10:C';
  $harmonics[] = '5:11:Bb';
  $harmonics[] = '5:12:A';
  $harmonics[] = '5:13:G';
  $harmonics[] = '5:14:F#';
  $harmonics[] = '5:15:F';
  $harmonics[] = '5:16:E';
  $harmonics[] = '6:1:G';
  $harmonics[] = '6:2:G';
  $harmonics[] = '6:3:C';
  $harmonics[] = '6:4:G';
  $harmonics[] = '6:5:Eb';
  $harmonics[] = '6:6:C';
  $harmonics[] = '6:7:A';
  $harmonics[] = '6:8:G';
  $harmonics[] = '6:9:F';
  $harmonics[] = '6:10:Eb';
  $harmonics[] = '6:11:C#';
  $harmonics[] = '6:12:C';
  $harmonics[] = '6:13:B';
  $harmonics[] = '6:14:A';
  $harmonics[] = '6:15:G#';
  $harmonics[] = '6:16:G';
  $harmonics[] = '7:1:Bb';
  $harmonics[] = '7:2:Bb';
  $harmonics[] = '7:3:Eb';
  $harmonics[] = '7:4:Bb';
  $harmonics[] = '7:5:F#';
  $harmonics[] = '7:6:Eb';
  $harmonics[] = '7:7:C';
  $harmonics[] = '7:8:Bb';
  $harmonics[] = '7:9:G#';
  $harmonics[] = '7:10:F#';
  $harmonics[] = '7:11:E';
  $harmonics[] = '7:12:Eb';
  $harmonics[] = '7:13:C#';
  $harmonics[] = '7:14:C';
  $harmonics[] = '7:15:B';
  $harmonics[] = '7:16:Bb';
  $harmonics[] = '8:1:C';
  $harmonics[] = '8:2:C';
  $harmonics[] = '8:3:F';
  $harmonics[] = '8:4:C';
  $harmonics[] = '8:5:G#';
  $harmonics[] = '8:6:F';
  $harmonics[] = '8:7:D';
  $harmonics[] = '8:8:C';
  $harmonics[] = '8:9:Bb';
  $harmonics[] = '8:10:G#';
  $harmonics[] = '8:11:F#';
  $harmonics[] = '8:12:F';
  $harmonics[] = '8:13:E';
  $harmonics[] = '8:14:D';
  $harmonics[] = '8:15:C#';
  $harmonics[] = '8:16:C';
  $harmonics[] = '9:1:D';
  $harmonics[] = '9:2:D';
  $harmonics[] = '9:3:G';
  $harmonics[] = '9:4:D';
  $harmonics[] = '9:5:Eb';
  $harmonics[] = '9:6:G';
  $harmonics[] = '9:7:E';
  $harmonics[] = '9:8:D';
  $harmonics[] = '9:9:C';
  $harmonics[] = '9:10:Bb';
  $harmonics[] = '9:11:A';
  $harmonics[] = '9:12:G';
  $harmonics[] = '9:13:F#';
  $harmonics[] = '9:14:E';
  $harmonics[] = '9:15:Eb';
  $harmonics[] = '9:16:D';
  $harmonics[] = '10:1:E';
  $harmonics[] = '10:2:E';
  $harmonics[] = '10:3:A';
  $harmonics[] = '10:4:E';
  $harmonics[] = '10:5:C';
  $harmonics[] = '10:6:A';
  $harmonics[] = '10:7:F#';
  $harmonics[] = '10:8:E';
  $harmonics[] = '10:9:D';
  $harmonics[] = '10:10:C';
  $harmonics[] = '10:11:Bb';
  $harmonics[] = '10:12:A';
  $harmonics[] = '10:13:G';
  $harmonics[] = '10:14:F#';
  $harmonics[] = '10:15:F';
  $harmonics[] = '10:16:E';
  $harmonics[] = '11:1:F#';
  $harmonics[] = '11:2:F#';
  $harmonics[] = '11:3:B';
  $harmonics[] = '11:4:F#';
  $harmonics[] = '11:5:D';
  $harmonics[] = '11:6:B';
  $harmonics[] = '11:7:G#';
  $harmonics[] = '11:8:F#';
  $harmonics[] = '11:9:Eb';
  $harmonics[] = '11:10:D';
  $harmonics[] = '11:11:C';
  $harmonics[] = '11:12:B';
  $harmonics[] = '11:13:A';
  $harmonics[] = '11:14:G#';
  $harmonics[] = '11:15:G';
  $harmonics[] = '11:16:F#';
  $harmonics[] = '12:1:G';
  $harmonics[] = '12:2:G';
  $harmonics[] = '12:3:C';
  $harmonics[] = '12:4:G';
  $harmonics[] = '12:5:Eb';
  $harmonics[] = '12:6:C';
  $harmonics[] = '12:7:A';
  $harmonics[] = '12:8:G';
  $harmonics[] = '12:9:F';
  $harmonics[] = '12:10:Eb';
  $harmonics[] = '12:11:C#';
  $harmonics[] = '12:12:C';
  $harmonics[] = '12:13:C';
  $harmonics[] = '12:14:B';
  $harmonics[] = '12:15:A';
  $harmonics[] = '12:16:G#';
  $harmonics[] = '13:1:G#';
  $harmonics[] = '13:2:G#';
  $harmonics[] = '13:3:C#';
  $harmonics[] = '13:4:G#';
  $harmonics[] = '13:5:F';
  $harmonics[] = '13:6:C#';
  $harmonics[] = '13:7:B';
  $harmonics[] = '13:8:G#';
  $harmonics[] = '13:9:F#';
  $harmonics[] = '13:10:F';
  $harmonics[] = '13:11:Eb';
  $harmonics[] = '13:12:C#';
  $harmonics[] = '13:13:C';
  $harmonics[] = '13:14:B';
  $harmonics[] = '13:15:Bb';
  $harmonics[] = '13:16:G#';
  $harmonics[] = '14:1:Bb';
  $harmonics[] = '14:2:Bb';
  $harmonics[] = '14:3:Eb';
  $harmonics[] = '14:4:Bb';
  $harmonics[] = '14:5:F#';
  $harmonics[] = '14:6:Eb';
  $harmonics[] = '14:7:C';
  $harmonics[] = '14:8:Bb';
  $harmonics[] = '14:9:G#';
  $harmonics[] = '14:10:F#';
  $harmonics[] = '14:11:E';
  $harmonics[] = '14:12:Eb';
  $harmonics[] = '14:13:C#';
  $harmonics[] = '14:14:C';
  $harmonics[] = '14:15:B';
  $harmonics[] = '14:16:Bb';
  $harmonics[] = '15:1:B';
  $harmonics[] = '15:2:B';
  $harmonics[] = '15:3:E';
  $harmonics[] = '15:4:B';
  $harmonics[] = '15:5:G';
  $harmonics[] = '15:6:E';
  $harmonics[] = '15:7:C#';
  $harmonics[] = '15:8:B';
  $harmonics[] = '15:9:A';
  $harmonics[] = '15:10:G';
  $harmonics[] = '15:11:F';
  $harmonics[] = '15:12:E';
  $harmonics[] = '15:13:D';
  $harmonics[] = '15:14:C#';
  $harmonics[] = '15:15:C';
  $harmonics[] = '15:16:B';
  $harmonics[] = '16:1:C';
  $harmonics[] = '16:2:C';
  $harmonics[] = '16:3:F';
  $harmonics[] = '16:4:C';
  $harmonics[] = '16:5:G#';
  $harmonics[] = '16:6:F';
  $harmonics[] = '16:7:D';
  $harmonics[] = '16:8:C';
  $harmonics[] = '16:9:Bb';
  $harmonics[] = '16:10:G#';
  $harmonics[] = '16:11:F#';
  $harmonics[] = '16:12:F';
  $harmonics[] = '16:13:E';
  $harmonics[] = '16:14:D';
  $harmonics[] = '16:15:C#';
  $harmonics[] = '16:16:C';
  $harmonics[] = '0:1:zero';
  $harmonics[] = '0:2:zero';
  $harmonics[] = '0:3:zero';
  $harmonics[] = '0:4:zero';
  $harmonics[] = '0:5:zero';
  $harmonics[] = '0:6:zero';
  $harmonics[] = '0:7:zero';
  $harmonics[] = '0:8:zero';
  $harmonics[] = '0:9:zero';
  $harmonics[] = '0:10:zero';
  $harmonics[] = '0:11:zero';
  $harmonics[] = '0:12:zero';
  $harmonics[] = '0:13:zero';
  $harmonics[] = '0:14:zero';
  $harmonics[] = '0:15:zero';
  $harmonics[] = '0:16:zero';
  $harmonics[] = '1:0:infinity';
  $harmonics[] = '2:0:infinity';
  $harmonics[] = '3:0:infinity';
  $harmonics[] = '4:0:infinity';
  $harmonics[] = '5:0:infinity';
  $harmonics[] = '6:0:infinity';
  $harmonics[] = '7:0:infinity';
  $harmonics[] = '8:0:infinity';
  $harmonics[] = '9:0:infinity';
  $harmonics[] = '10:0:infinity';
  $harmonics[] = '11:0:infinity';
  $harmonics[] = '12:0:infinity';
  $harmonics[] = '13:0:infinity';
  $harmonics[] = '14:0:infinity';
  $harmonics[] = '15:0:infinity';
  $harmonics[] = '16:0:infinity';
  
  $explode = [];
  foreach ($harmonics as $key => $harmonic) {
    $explode = explode(':', $harmonic);
    if ($explode[1] >= 1) {
      $freq = ($explode[0]/$explode[1])*$frequency;
    }
    if (isset($freq)) {
      $harmonics[$key] .= ':' . $freq;
    }
    else {
      $harmonics[$key] .= ':INF';
    }   
  }
  //dpm($harmonics);

  return $harmonics;
}

function jellomatrix_output_basegrid($scale_increments, $prime_matrix, $primes, $tone, $interval, $scaled, $scales) {
  $output = '';

  $output .= '<div class="begintext">';

  if (isset($scale_increments)) {
    $output .= '<div class="floatright"><h3>You have scales!</h3></div>';
  }
  else {
    $output .= '<div class="floatright"><h3>Not scale active. Try again!</h3></div>';
  }
  $output .= '</div><hr class="hr"><br></div>';
  $output .= '<div class="begingrid"><h3>The Original Matrix</h3><div class="endtext"><br></div>';
  $output .= '<table class="table begingrid" cols="' . $tone . '" rows="' . $interval . '">';
  $totalcount = $tone*$interval;
  foreach($prime_matrix as $prime_row) {
    $output .= '<tr>';
    $count = 0;
    foreach($prime_row as $item) {
      if ($item['tone']%2 != 0) {
        $color = 'white';
      }
      if ($item['tone']%2 == 0) {
        $color = 'subhighlight';
      }
      foreach ($primes as $prime) {
        if ($item['tone'] == $prime) {
          $color = 'white';
            if ($item['tone']%2 == 0) {
              $color = 'highlight';
            }
        }
      }

      /*dpm($scales);*/
      if ($item['tone'] == $scales['h'][$count]) {
        $output .= '<td class="tdgrid ' . $color . ' blue-text">' . $item['tone'] . '</td>';
      }
      elseif ($item['tone'] == $scales['f'][$count]) {
        $output .= '<td class="tdgrid ' . $color . ' groen-text">' . $item['tone'] . '</td>';
      }
      elseif ($item['tone'] == $scales['b'][$count]) {
        $output .= '<td class="tdgrid ' . $color . ' salmon-text">' . $item['tone'] . '</td>';
      }
      else {
        $output .= '<td class="tdgrid ' . $color . ' red-text">' . $item['tone'] . '</td>';
      }
      $count++;
    }
    $output .= '</tr>';
  }
  $output .= '</table></div><p><br/></p><div class="endtext"><br></div>';

  $output .= '<div class="begintext"><p><h3>Scale Pattern:</h3></p>';
  $output .= '<p>Whether you look at each row individually, or look at each diagonal row (in forward or backward \'slash\' ';
  $output .= 'directions) you will notice that the order of numbers is consistent on every row (or each direction of diagonal rows) ';
  $output .= 'and that only the starting number differs from row to row.  I refer to this as a \'scale\'.  If the scale were ';
  $output .= 'to be played in a circle consisting of the numbers of the first \'tone\' value, the shape formed would be the ';
  $output .= 'same regardless of which number you start with.';
  $output .= '</p>';
  $output .= '<p><img src="/sites/default/files/h_circle.png?t='. time().'" />';
  $output .= '&nbsp;<img src="/sites/default/files/f_circle.png?t='. time().'" />';
  $output .= '&nbsp;<img src="/sites/default/files/b_circle.png?t='. time().'" /></p><div class="endtext"><br></div></div>';
  $output .= '<p><strong>' . $scaled . '...</strong></p><hr class="hr"><p><br/></p><div class="endtext"><br></div>';

  return $output;
}

function jellomatrix_output_splicegrid_basic($spliced_matrix, $primes, $tone, $interval) {
  $output = '';

  // And then we create the spliced matrix grid.
  $output .= '<div class="begintext endtable"></div><div class="begingrid"><h3>The Basic Orientation of the Spliced Matrix</h3>';
  $output .= '<p>';
  $output .= 'Why splice the initial matrix?  This started out as a hunch, but also following the work of Jose Arguilles who ';
  $output .= 'inspired this up to a point.  But also the work of Mark Rothko and Randy Powell with their ABHA torus to which ';
  $output .= 'the matrix forms here bare some relation but which diverge from what Randy and Mark are doing in important ways. ';
  $output .= 'In my mind, splicing the matrix creates an architecture that reminded me of a battery.  I do not think this analogy ';
  $output .= 'is off-base. When we combine this notion while also looking for the patterns in the \'scales\' found in the original matrix, ';
  $output .= 'we see emergent patterns and pathways.  The next progression of images takes you through a categorization of some of those patterns.';
  $output .= '</p>';
  $output .= '<table class=" table begingrid" cols="' . $tone*2 . '" rows="' . $interval . '">';

  $request = \Drupal::request();
  $current_path = $request->getPathInfo();
  $path_args = explode('/', $current_path);
  if (isset($path_args[4])) {
    $doubleflip = $path_args[4];
  }

  for ($i = 1; $i <= $interval; $i++) {
    $output .= '<tr>';
    $count = 1;
    foreach ($spliced_matrix as $spliced_row) {
      foreach ($spliced_row as $item) {
        if ($item['row'] == $i) {
          $prime = jellomatrix_primes($tone);
          if (($item['column'])%2 == 0) {
            $item['color'] = 'green-text';
          }
          if (($item['column'])%2 != 0) {
            $item['color'] = 'red-text';
          }
          if ($item['column'] == 1 && $item['row'] == 1) {
            $item['background'] = 'green';
            $item['opacity'] = '.' . $item['tone'];
          }
          if (isset($doubleflip) && $doubleflip == 'doubleflip') {
            if ($item['column'] == 2*$tone && $item['row'] == $interval) {
              $item['background'] = 'green';
              $item['opacity'] = '.' . $item['tone'];
            }
          }
          else {
            if ($item['column'] == 2 && $item['row'] == $interval) {
              $item['background'] = 'green';
              $item['opacity'] = '.' . $item['tone'];
            }
          }
          $output .= '<td class="' . $item['column'] . 'x-' . $item['row'] . 'y ' .$item['color'] . ' tdgrid ' .$item['background'] . '">' . $item['tone'] . '</td>';
          $count++;
        }
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table><div><hr class="hr"></div></div>';

  return $output;
}

function jellomatrix_output_splicegrid_primes($spliced_matrix, $primes, $tone, $interval) {
  $output = '';

  // And then we create the spliced matrix grid.
  $output .= '<div class="begintext endtable"></div><div class="begingrid"><h3>HIGHLIGHTING PRIMES: The Spliced Matrix</h3><table class="table begingrid" cols="' . $tone*2 . '" rows="' . $interval . '">';
  for ($i = 1; $i <= $interval; $i++) {
    $output .= '<tr>';
    $count = 1;
    foreach ($spliced_matrix as $spliced_row) {
      foreach ($spliced_row as $item) {
        if ($item['row'] == $i) {
          $prime = jellomatrix_primes($tone);
          if (($item['column'])%2 == 0) {
            $item['color'] = 'green-text';
          }
          if (($item['column'])%2 != 0) {
            $item['color'] = 'red-text';
          }
          if (in_array($item['tone'], $primes)) {
            $item['background'] = 'highlight';
            $item['opacity'] = '.' . $item['tone'];
          }
          if (!in_array($item['tone'], $primes)) {
            $item['background'] = 'white';
            $item['opacity'] = '.' . $item['tone'];
          }
          $output .= '<td class="' . $item['column'] . 'x-' . $item['row'] . 'y ' .$item['color'] . ' tdgrid ' .$item['background'] . '">' . $item['tone'] . '</td>';
          $count++;
        }
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table><div><hr class="hr"></div></div>';

  return $output;
}

function jellomatrix_output_splicegrid_evenodd($spliced_matrix, $primes, $tone, $interval) {
  $output = '';

  // And then we create the spliced matrix grid.
  $output .= '<div class="begintext endtable"></div><div class="begingrid"><h3>HIGHLIGHTING EVEN+ODD: The Spliced Matrix</h3><table class="table begingrid" cols="' . $tone*2 . '" rows="' . $interval . '">';
  for ($i = 1; $i <= $interval; $i++) {
    $output .= '<tr>';
    $count = 1;
    foreach ($spliced_matrix as $spliced_row) {
      foreach ($spliced_row as $item) {
        if ($item['row'] == $i) {
          $prime = jellomatrix_primes($tone);
          if (($item['column'])%2 == 0) {
            $item['color'] = 'green-text';
          }
          if (($item['column'])%2 != 0) {
            $item['color'] = 'red-text';
          }
          if (($item['tone'])%2 == 0) {
            $item['background'] = 'white';
            $item['opacity'] = '.' . $item['tone'];
          }
          if (($item['tone'])%2 != 0) {
            $item['background'] = 'highlight';
            $item['opacity'] = '.' . $item['tone'];
          }
          $output .= '<td class="' . $item['column'] . 'x-' . $item['row'] . 'y ' . $item['color'] . ' tdgrid  ' . $item['background'] . '">' . $item['tone'] . '</td>';
          $count++;
        }
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table><div class="hr begintext"><p>Interstingly enough, the sections which seem to hold information about the vortec/ies they reflect seem to fall most often in the middle of the sine waves created by what appear to be very different "environments" or "gradients" between higher frequency oscillations of even and odd numbers (you might need to squint your eyes to see them), They are the waves defined by the more or less frequent oscillatory patterns taken as a whole.  More about this in the "Rows" calculations in the "Increments" section below.</p><hr class="hr"></div></div>';

  return $output;
}

function jellomatrix_output_splicegrid_waveforms($spliced_matrix, $splied_matrix_reversed, $primes, $tone, $interval, $boolean, $scaled/*, $scales*/)
{
  $output = '';
  if (!empty($spliced_matrix_reversed)) {
    foreach ($spliced_matrix_reversed as $spliced_row_reversed) {
      foreach ($spliced_row_reversed as $item) {
        if (isset($item['phase_color']) && !isset($item['wave_limit'])) {
          $reversed = 'reversed';
        }
      }
    }
  }
  foreach ($spliced_matrix as $spliced_row) {
    foreach ($spliced_row as $item) {
      if (isset($item['phase_color']) && !isset($item['wave_limit'])) {
        $forward = 'forward';
      }
    }
  }

  if (isset($reversed) && isset($forward)) {
    $direction = 'Bi-directional';
    $output .= '<p><br/></p><h2>Prime Series of Matrix is Bi-directional</h2>';
  }

  if (!isset($reversed) && isset($forward)) {
    $direction = 'Forward Only';
    $output .= '<p><br/></p><h2>Prime Series of Matrix is Forward Only</h2>';
  }

  if (isset($reversed) && !isset($forward)) {
    $direction = 'Reversed Only';
    $spliced_matrix = $spliced_matrix_reversed;
    $output .= '<p><br/></p><h2>Prime Series of Matrix is Reversed Only</h2>';
  }

  if ($boolean == TRUE) {
    // And then we create the spliced matrix grid using wave indicators for coloring
    // (we could use the rows at this point as well)...
    $output .= '<div class="begintext endtable"></div><div class="begingrid"><h3>WAVE FORM POLE SHIFT: Highlighting the adjacent equal values.</h3><table class="table begingrid" cols="' . $tone * 2 . '" rows="' . $interval . '">';
    for ($i = 1; $i <= $interval; $i++) {
      $output .= '<tr>';
      $count = 1;
      foreach ($spliced_matrix as $spliced_row) {
        foreach ($spliced_row as $item) {
          if (!empty($item['row']) && $item['row'] == $i) {
            $prime = jellomatrix_primes($tone);
            if (($item['column']) % 2 == 0) {
              $item['color'] = 'green-text';
            }
            if (($item['column']) % 2 != 0) {
              $item['color'] = 'red-text';
            }
            if (isset($item['pole_shift'])) {
              if ($item['pole_shift'] == 'left') {
                $item['background'] = 'yellow-background';
                $item['opacity'] = 1;
              }
              if ($item['pole_shift'] == 'right') {
                $item['background'] = 'torquoise-background';
                $item['opacity'] = 1;
              }
            }

            $output .= '<td class="' . $item['column'] . 'x-' . $item['row'] . 'y ' . $item['color'] . ' tdgrid ' . $item['background'] . '" >' . $item['tone'] . '</td>';
            $count++;
          }
        }
      }
      $output .= '</tr>';
    }
    $output .= '</table><div class="begintext endtable"></div><hr class="hr"><br></div>';
  }

  $output .= '<p><br/></p>' . $scaled . '<p><br/></p>';


  // And then we create the spliced matrix grid using wave indicators for coloring
  // (we could use the rows at this point as well)...
  $output_even = '<div class="begintext endtable"></div><div class="begingrid"><h3>WAVE FORM SCALES: The Waveform Scales: EVEN Rhythms</h3><table class="table begingrid" cols="' . $tone*2 . '" rows="' . $interval . '">';
  for ($i = 1; $i <= $interval; $i++) {
    $output_even .= '<tr>';
    $count = 1;
    foreach ($spliced_matrix as $spliced_row) {
      foreach ($spliced_row as $item) {
        if (!empty($item['row']) && $item['row'] == $i) {
          $prime = jellomatrix_primes($tone);
          if (($item['column'])%2 == 0) {
            $item['color'] = 'green-text';
          }
          if (($item['column'])%2 != 0) {
            $item['color'] = 'red-text';
          }
          if (isset($item['wave_limit'])) {
            if ($item['pole_shift'] == 'right') {
              $item['background'] = 'yellow-background-light';
              $item['opacity'] = 1;
            }
            if ($item['pole_shift'] == 'left') {
              $item['background'] = 'torquoise-background-light';
              $item['opacity'] = 1;
            }
          }
          $even = 0;
          if (isset($item['rhythm'])) {
            foreach ($item['rhythm'] as $rhythm) {
              if ($rhythm%2 == 0) {
                $even = 1;
                $evengrid = 1;
              }
            }
          }
          if (isset($item['yellow']) && isset($even) && $even == 1) {
            $item['background'] = $item['yellow'];
            $item['opacity'] = 1;
            $item['br'] = 'border-radius';
          }


          $output_even .= '<td class="' . $item['column'] . 'x-' . $item['row'] . 'y tdgrid ' . $item['background'];
          if (isset($item['br'])) {
            $output_even .= ' ' . $item['br'];
          }
          $output_even .= '" ';
          $output_even .= '><span style="background: ' . $item['background'] . ' !important;">';
          $output_even .= $item['tone'] . '</span></td>';

          $count++;

        }
      }
    }
    $output_even .= '</tr>';
  }
  $output_even .= '</table><div class="begintext endtable"></div><p></p><hr class="hr"></div>';

  if (isset($evengrid)) {
    $output .= $output_even;
    unset($evengrid);
  }

  // And then we create the spliced matric grid using wave indicators for coloring
  // (we could use the rows at this point as well)...
  $output_odd = '<div class="begintext endtable"></div><div class="begingrid"><h3>WAVE FORM SCALES: The Waveform Scales: ODD Rhythms</h3><table class="table begingrid" cols="' . $tone*2 . '" rows="' . $interval . '">';
  for ($i = 1; $i <= $interval; $i++) {
    $output_odd .= '<tr>';
    $count = 1;
    foreach ($spliced_matrix as $spliced_row) {
      foreach ($spliced_row as $item) {
        if (!empty($item['row']) && $item['row'] == $i) {
          $prime = jellomatrix_primes($tone);
          if (($item['column'])%2 == 0) {
            $item['color'] = 'green-text';
          }
          if (($item['column'])%2 != 0) {
            $item['color'] = 'red-text';
          }
          if (isset($item['wave_limit'])) {
            if ($item['pole_shift'] == 'right') {
              $item['background'] = 'yellow-background-light';
              $item['opacity'] = 1;
            }
            if ($item['pole_shift'] == 'left') {
              $item['background'] = 'torquoise-background-light';
              $item['opacity'] = 1;
            }
          }
          $odd = 0;
          if (isset($item['rhythm'])) {
            foreach ($item['rhythm'] as $rhythm) {
              if ($rhythm%2 != 0) {
                $odd = 1;
                $oddgrid = 1;
              }
            }
          }
          if (isset($item['yellow']) && isset($odd) && $odd != 0) {
            $item['background'] = $item['yellow'];
            $item['opacity'] = 1;
            $item['br'] = 'border-radius';
          }
          $output_odd .= '<td class="' . $item['column'] . 'x-' . $item['row'] . 'y tdgrid ' . $item['background'];
          if (isset($item['br'])) {
            $output_odd .= ' ' . $item['br'];
          }
          $output_odd .= '" ';
          $output_odd .= '><span>';
          $output_odd .= $item['tone'] . '</span></td>';

          $count++;
        }
      }
    }
    $output_odd .= '</tr>';
  }
  $output_odd .= '</table><div class="begintext endtable"></div><p></p><hr class="hr">';

  if (isset($oddgrid)) {
    $output .= $output_odd;
    unset($oddgrid);
  }
  // TODO: https://api.drupal.org/api/drupal/core%21modules%21views%21src%21Plugin%21views%21area%21Text.php/function/Text%3A%3Arender/8.7.x
  // return render($output);
  $outputt = [];
  $outputt = [
    '#type' => 'processed_text',
    '#text' => $output,
    '#format' => 'full_html',
  ];
  //return render($outputt);
  return $output;
}

function jellomatrix_output_splicegrid_scalepattern($scale_increments, $scaled, $primes, $tone, $interval) {
  $output = '';
  if (isset($scaled)) {
    $output .= '<div class="begintext"><p><h3>Scale Pattern:</h3></p>';
    //$output .= '<p>Whether you look at each row individually, or look at each diagonal row (in forward or backward \'slash\' ';
    //$output .= 'directions) you will notice that the order of numbers is consistent on every row (or each direction of diagonal rows) ';
    //$output .= 'and that only the starting number differs from row to row.  I refer to this as a \'scale\'.  If the scale were ';
    //$output .= 'to be played in a circle consisting of the numbers of the first \'tone\' value, the shape formed would be the ';
    //$output .= 'same regardless of which number you start with.';
    //$output .= '</p>';
    //$output .= '<p><img src="/sites/default/files/h_circle.png?t='. time().'" />';
    //$output .= '&nbsp;<img src="/sites/default/files/f_circle.png?t='. time().'" />';
    //$output .= '&nbsp;<img src="/sites/default/files/b_circle.png?t='. time().'" /></p><div class="endtext"><br></div>';
    //$output .= '<div class="begintext"><p><h3>Experimental Pattern:</h3></p><p><img src="/sites/default/files/circle_grid.png?t='. time().'" /></p><div class="endtext"><br></div>';
    //$output .= '<p><strong>' . $scaled . '...</strong></p><div class="endtext"><br></div>';
    $output .= '<p><strong>This tool is meant as a proof of concept and not as a complete set of waveforms that are possible (although I am working on it!).</strong></p><div class="endtext"><br></div>';
    $output .= '<p><strong>RED</strong> = Start of wave.</p>';
    $output .= '<p><strong>EVEN Waves</strong></p>';
    if (isset($scale_increments)) {
      foreach ($scale_increments as $i=>$increment) {
        $explode = explode(':', $increment);
        $t = $explode[0];
        $jump = $explode[1];
        $direction = $explode[2];
        $scale_direction = $explode[3];
        $color = $explode[4];
        if ($jump %2 == 0) {
          $output .= '<p><strong>Starting ' . $t . ':</strong> scale direction = ' . $scale_direction . ', rhythm = ' . $jump . ', initial vertical = ' . $direction . ', color = ' . $color . '.</p>';
        }
        if ($jump %2 != 0) {
          $odd_waves = 1;
        }
      }
    }
    if (isset($odd_waves)){
      $output .= '<p><strong>ODD Waves</strong></p>';
    }
    unset($odd_waves);
    if (isset($scale_increments)) {
      foreach ($scale_increments as $i=>$increment) {
        $explode = explode(':', $increment);
        $t = $explode[0];
        $jump = $explode[1];
        $direction = $explode[2];
        $scale_direction = $explode[3];
        $color = $explode[4];
        if ($jump %2 != 0) {
          $output .= '<p><strong>Starting ' . $t . ':</strong> scale direction = ' . $scale_direction . ', rhythm = ' . $jump . ', initial vertical = ' . $direction . ', color = ' . $color . '.</p>';
        }
      }
    }
  }
  $output .= '<p></p><br></div>';

  return $output;
}

function jellomatrix_output_splicegrid_harmonics($increment_original, $harmonics, $primes, $tone, $interval, $frequency) {
  $notea_pairing = [];
  $noteb_pairing = [];
  $note_pairing = [];
  $note_assembly = [];
  $lambdoma_map = [];
  $output = '';
  // First output the original harmonics with $columns and $rows.
  // Now output the differences between different integers.
  $output .= '<div class="endtable begintext"><h2>ODD/EVEN: Differences and Harmonics</h2>';
  $output .= '<p>These increment calculations show the relationships of the numbers in the grid by relating them to the ones in front of them (forward) and behind them (backwards) using the "tone" value as the base in the numbering system.</p><div class="endtext"><br></div>';
  $output .= '<p>The diagonal increments still go down the row, but show the relationships between the number and the one diagonally above (forward) it and below it (backward).</p><div class="endtext"><br></div>';
  $output .= '<p>The bold letters at the end of each row represent the Lambdona Notes that the ratios the repeating increments create.  Here is some inspiration regarding the Lambdoma note coorespondences:</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/wZj7gUIO-2k" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p><div class="endtext"><br></div>';
  foreach($increment_original as $k=>$increment) {
    if ($k == 'row') {
      $r = '<h3>Row</h3>';
      foreach ($increment as $ke => $direction) {
        if ($ke == 'forward') {
          $r .= '<h4>Forward (Odd/Even) (x,y)|(x+1,y)</h4>';
          $r .= '<div class="begintext"><p>As alluded to above, if you look at the number grid below, what I have noticed is that I can usually find \'vortex activity\' starting and ending with rows that oscillate between \'0\' and another integer.  So in this section, the vortex arrays are between "zero" and "infinity". In addition, between these rows, it seems to be important to have the intervals mirror one another as you move towards the center.</p></div>';
          $count = 1;
          $r .= '<table class="table"><tr>';
          foreach ($direction as $row) {
            $r .= '<td class="tdgridltfirst">Row ' . $count . ': </td>';

            foreach ($row as $key => $item) {
              $test = $row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $r .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $r .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $r .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
              if ($key == 5) {
                $five = $item;
              }
              if ($key == 6) {
                $six = $item;
              }
              if ($key == 7) {
                $seven = $item;
              }
            }
            if (isset($two) && isset($zero) && $zero == $two) {
              $upper = $zero;
            } else {
              unset($upper);
            }
            if (isset($three) && $one == $three) {
              $lower = $one;
            } else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                //dpm($explode[3]);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $r .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[] = $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $r .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zcee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zdee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeffsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgeesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbeeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $r .= '</tr>';
            $count++;
          }
          $r .= '</table>';
          $r .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
          
              $r .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $r .= '</ol><hr>';
          $r .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['r'][] = $note_order;
          }
        }
        if ($ke == 'backward') {
          unset($note_order);
          $rd = '<h4>Backward (Odd/Even) (x,y)|(x-1,y)</h4>';
          $count = 1;
          $rd .= '<table class="table"><tr>';
          foreach ($direction as $row) {
            $rd .= '<td class="tdgridltfirst">Row ' . $count . ': </td>';

            foreach ($row as $key => $item) {
              $test = $row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $rd .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $rd .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $rd .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
            }
            if (isset($two) && isset($zero) && $zero == $two) {
              $upper = $zero;
            } else {
              unset($upper);
            }
            if (isset($three) && $one == $three) {
              $lower = $one;
            } else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rd .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rd .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rd .= '</tr>';
            $count++;
          }
          $rd .= '</table>';
          $rd .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rd .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rd .= '</ol><hr>';
          $rd .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rd'][] = $note_order;
          }
        }
      }
    }
    if ($k == 'lrdiag') {
      $lr = '<h3>Left to Right Diagonals across a Row</h3>';
      foreach ($increment as $ke=>$direction) {
        if ($ke == 'forward') {
          unset($note_order);
          $lr .= '<h4>Forward (Odd/Even) (x,y)|(x+1,y+1)</h4>';
          $count = 1;
          $lr .= '<table class="table"><tr>';
          foreach ($direction as $row) {
            $lr .= '<td class="tdgridlt">LR Row ' . $count .': </td>';
            foreach ($row as $key=>$item) {
              $test = $row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $lr .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $lr .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $lr .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
            }
            if (isset($two) && isset($zero) && $zero == $two) {
              $upper = $zero;
            }
            else {
              unset($upper);
            }
            if (isset($three) && $one == $three) {
              $lower = $one;
            }
            else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $lr .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $lr .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zcee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zdee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeffsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgeesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbeeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $lr .= '</tr>';
            $count++;
          }
          $lr .= '</table>';
          $lr .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $lr .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $lr .= '</ol><hr>';
          $lr .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['lr'][] = $note_order;
          }
        }
        if ($ke == 'backward') {
          unset($note_order);
          $lrd = '<h4>Backward (Odd/Even) (x,y)|(x-1,y-1)</h4>';
          $count = 1;
          $lrd .= '<table class="table"><tr>';
          foreach ($direction as $row) {
            $lrd .= '<td class="tdgridlt">LR Row ' . $count .': </td>';
            foreach ($row as $key=>$item) {
              $test = $row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $lrd .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $lrd .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $lrd .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
            }
            if (isset($two) && isset($zero) && $zero == $two) {
              $upper = $zero;
            }
            else {
              unset($upper);
            }
            if (isset($three) && $one == $three) {
              $lower = $one;
            }
            else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $lrd .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $lrd .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $lrd .= '</tr>';
            $count++;
          }
          $lrd .= '</table>';
          $lrd .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $lrd .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $lrd .= '</ol><hr>';
          $lrd .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
           $note_assembly[$ke]['lrd'][] = $note_order;
          }
        }
      }
    }
    if ($k == 'rldiag') {
      $rl = '<h3>Right to Left Diagonals across a Row</h3>';
      foreach ($increment as $ke=>$direction) {
        if ($ke == 'forward') {
          unset($note_order);
          $rl .= '<h4>Forward (Odd/Even) (x,y)|(x+1,y-1)</h4>';
          $count = 1;
          $rl .= '<table class="table"><tr>';
          foreach ($direction as $row) {
            $rl .= '<td class="tdgridlt">RL Row ' . $count .': </td>';
            foreach ($row as $key=>$item) {
              $test = $row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $rl .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $rl .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $rl .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
            }
            if (isset($two) && isset($zero) && $zero == $two) {
              $upper = $zero;
            }
            else {
              unset($upper);
            }
            if (isset($three) && $one == $three) {
              $lower = $one;
            }
            else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rl .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rl .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zcee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zdee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeffsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgeesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbeeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rl .= '</tr>';
            $count++;
          }
          $rl .= '</table>';
          $rl .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rl .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rl .= '</ol><hr>';
          $rl .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rl'][] = $note_order;
          }
        }
        if ($ke == 'backward') {
          unset($note_order);
          $rld = '<h4>Backward (Odd/Even) (x,y)|(x-1,y+1)</h4>';
          $count = 1;
          $rld .= '<table class="table"><tr>';
          foreach ($direction as $row) {
            $rld .= '<td class="tdgridlt">RL Row ' . $count .': </td>';
            foreach ($row as $key=>$item) {
              $test = $row;
              unset($clink); $clink = ''; $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $rld .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $rld .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $rld .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
            }
            if (isset($two) && isset($zero) && $zero == $two) {
              $upper = $zero;
            }
            else {
              unset($upper);
            }
            if (isset($three) && $one == $three) {
              $lower = $one;
            }
            else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rld .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rld .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rld .= '</tr>';
            $count++;
          }
          $rld .= '</table>';
          $rld .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rld .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rld .= '</ol><hr>';
          $rld .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rld'][] = $note_order;
          }
        }
      }
    }
  }

  /*$output .= '<table><tr><th>k</th><th>ke</th><th>key</th><th>row</th><th>note</th><th>lower</th><th>upper</th></tr>';
  foreach($lambdoma_map as $k => $data) {
    foreach($data as $ke => $stuff) {
      foreach ($stuff as $key => $counts) {
        foreach ($counts as $count => $values) {
          $output .= "<tr><td>" . $k . "</td><td>" . $ke . "</td><td>" . $key . "</td><td>" . $count . "</td><td>" . $values['key'] . "</td><td>" . $values['lower'] . "</td><td>" . $values['upper'] . "</td></tr>";
        }
      }
    }
  }
  $output .= "</table>";*/

  $map = [];
  foreach ($lambdoma_map as $k => $data) {
    foreach ($data as $ke => $stuff) {
      //if ($ke = 'forward' || $k = 'row') {*/
      foreach ($stuff as $key => $counts) {
        foreach ($counts as $count => $values) {
          //dpm($values);
          for ($u = 0; $u <= 16; $u++) {
            for ($l = 0; $l <= 16; $l++) {
              if (!in_array($values['upper'] . ':' . $values['lower'] . ':' . $values['class'] . ':' . $values['frequency'] . ':' . $values['key'], $map)) {
                $map[] = $values['upper'] . ':' . $values['lower'] . ':' . $values['class'] . ':' . $values['frequency'] . ':' . $values['key'];
              }
            }
          }
        }
      }
      //}
    }
  }
  
  

  $output .= $r;
  $output .= $rd;

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';
  
  $output .= $rl;
  $output .= $rld;

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';
  $output .= $lr;
  $output .= $lrd;

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  $output .= '<hr class="hr">';
  
  //dpm($note_assembly);
  /*if (isset($note_assembly['forward']['r'][0]) && isset($note_assembly['backward']['rd'][0])) {
    $array_size  = count($note_assembly['forward']['r'][0]);
    for ($i= 0; $i<$array_size; $i++) {
      $note_assembly['pairings']['horizontal'][] = array($note_assembly['forward']['r'][0][$i], $note_assembly['backward']['rd'][0][$i]);
    }
  }
  if (isset($note_assembly['forward']['rl'][0]) && isset($note_assembly['backward']['rld'][0])) {
    $array_size  = count($note_assembly['forward']['rl'][0]);
    for ($i= 0; $i<$array_size; $i++) {
      $note_assembly['pairings']['backslash'][] = array($note_assembly['forward']['rl'][0][$i], $note_assembly['backward']['rld'][0][$i]);
    }
  }
  if (isset($note_assembly['forward']['lr'][0]) && isset($note_assembly['backward']['lrd'][0])) {
    $array_size  = count($note_assembly['forward']['r'][0]);
    for ($i= 0; $i<$array_size; $i++) {
      $note_assembly['pairings']['forwardslash'][] = array($note_assembly['forward']['lr'][0][$i], $note_assembly['backward']['lrd'][0][$i]);
    }
  }*/
  
  /*foreach ($note_assembly as $ke => $directions) {
    foreach ($directions as $direction => $dir_arrays) {
      foreach ($dir_arrays as $freqs) {
        if ($direction == 'r' || $direction == 'rl' || $direction == 'lr' || $direction == 'rd' || $direction == 'rld' || $direction == 'lrd') {
          
          
          //Path to output file
          $filePath = 'sites/default/files/' . $ke . $tone . '_' . $interval . $direction . '.wav';
          
          //Open a handle to our file in write mode, truncate the file if it exists
          $fileHandle = fopen($filePath, 'wb');
          
          // Calculate variable dependent fields
          if ($ke == 'pairings') {
            $channels = 2; //Stereo
          }
          if ($ke != 'pairings') {
            $channels = 1; //Mono
          }
          $bitDepth = 8; //8bit
          $sampleRate = 44100; //CD quality
          $blockAlign = ($channels * ($bitDepth/8));
          $averageBytesPerSecond = $sampleRate * $blockAlign;
          
          
          if ($channels == 1) {
            $input = $freqs;
            /* 
             * Header chunk
             * dwFileLength will be calculated at the end, based upon the length of the audio data
             *
            $header = [
                'sGroupID' => 'RIFF',
                'dwFileLength' => 0,
                'sRiffType' => 'WAVE'
            ];
            
            /*
             * Format chunk
             *
            $fmtChunk = [
                'sGroupID' => 'fmt',
                'dwChunkSize' => 16,
                'wFormatTag' => 1,
                'wChannels' => $channels,
                'dwSamplesPerSec' => $sampleRate,
                'dwAvgBytesPerSec' => $averageBytesPerSecond,
                'wBlockAlign' => $blockAlign,
                'dwBitsPerSample' => $bitDepth
            ];
            
            /*
             * Map all fields to pack flags
             * WAV format uses little-endian byte order
             *
            $fieldFormatMap = [
                'sGroupID' => 'A4',
                'dwFileLength'=> 'V',
                'sRiffType' => 'A4',
                'dwChunkSize' => 'V',
                'wFormatTag' => 'v',
                'wChannels' => 'v',
                'dwSamplesPerSec' => 'V',
                'dwAvgBytesPerSec' => 'V',
                'wBlockAlign' => 'v',
                'dwBitsPerSample' => 'v' //Some resources say this is a uint but it's not - stay woke.
            ];
          }
          /*if ($channels == 2) {
            $input = $freqs;
            /*
             * Header chunk
             * dwFileLength will be calculated at the end, based upon the length of the audio data
             *
            $header = [
                'sGroupID' => 'RIFF',
                'dwFileLength' => 0,
                'sRiffType' => 'WAVE'
            ];
            
            /*
             * Format chunk
             *
            $fmtChunk = [
                'sGroupID' => 'fmt',
                'dwChunkSize' => 16,
                'wFormatTag' => 1,
                'wChannels' => $channels,
                'dwSamplesPerSec' => $sampleRate,
                'dwAvgBytesPerSec' => $averageBytesPerSecond,
                'wBlockAlign' => $blockAlign,
                'dwBitsPerSample' => $bitDepth
            ];
            
            /*
             * Map all fields to pack flags
             * WAV format uses little-endian byte order
             *
            $fieldFormatMap = [
                'sGroupID' => 'A4',
                'dwFileLength'=> 'V',
                'sRiffType' => 'A4',
                'dwChunkSize' => 'V',
                'wFormatTag' => 'v',
                'wChannels' => 'v',
                'dwSamplesPerSec' => 'V',
                'dwAvgBytesPerSec' => 'V',
                'wBlockAlign' => 'v',
                'dwBitsPerSample' => 'v' //Some resources say this is a uint but it's not - stay woke.
            ];
          }*/
          
          
          /*
           * Pack and write our values
           * Keep track of how many bytes we write so we can update the dwFileLength in the header
           *
          $dwFileLength = 0;
          foreach($header as $currKey=>$currValue)
          {
            if(!array_key_exists($currKey, $fieldFormatMap))
            {
              die('Unrecognized field '.$currKey);
            }
            
            $currPackFlag = $fieldFormatMap[$currKey];
            $currOutput = pack($currPackFlag, $currValue);
            $dwFileLength += fwrite($fileHandle, $currOutput);
          }
          
          foreach($fmtChunk as $currKey=>$currValue)
          {
            if(!array_key_exists($currKey, $fieldFormatMap))
            {
              die('Unrecognized field '.$currKey);
            }
            
            $currPackFlag = $fieldFormatMap[$currKey];
            $currOutput = pack($currPackFlag, $currValue);
            $dwFileLength += fwrite($fileHandle, $currOutput);
          }
          
          /*
           * Set up our data chunk
           * As we write data, the dwChunkSize in this struct will be updated, be sure to pack and overwrite
           * after audio data has been written
           *
          $dataChunk = [
              'sGroupID' => 'data',
              'dwChunkSize' => 0
          ];
          
          //Write sGroupID
          $dwFileLength += fwrite($fileHandle, pack($fieldFormatMap['sGroupID'], $dataChunk['sGroupID']));
          
          //Save a reference to the position in the file of the dwChunkSize field so we can overwrite later
          $dataChunkSizePosition = $dwFileLength;
          
          //Write our empty dwChunkSize field
          $dwFileLength += fwrite($fileHandle, pack($fieldFormatMap['dwChunkSize'], $dataChunk['dwChunkSize']));
          
          /*
           8-bit audio: -128 to 127 (because of 2’s complement)
           *
          $maxAmplitude = 127;
          
          //Loop through input
          foreach($input as $currNote)
          {
            $currHz = $currNote;
            $currMillis = 1000;
            
            /*
             * Each "tick" should be 1 second divided by our sample rate. Since we're counting in milliseconds, use
             * 1000/$sampleRate
             *
            $timeIncrement = 1000/$sampleRate;
            
            /*
             * Define how much each tick should advance the sine function. 360deg/(sample rate/frequency)
             *
            if ($currHz == 0) {
              $currHz = 7.83;
            }
            $waveIncrement = 360/($sampleRate/$currHz);
            
            /*
             * Run the sine function until we have written all the samples to fill the current note time
             *
            $elapsed = 0;
            $x = 0;
            while($elapsed<$currMillis)
            {
              /*
               * The sine wave math
               * $maxAmplitude*.95 lowers the output a bit so we're not right up at 0db
               *
              $currAmplitude = ($maxAmplitude)-number_format(sin(deg2rad($x))*($maxAmplitude*.95));
              
              //Increment our position in the wave
              $x+=$waveIncrement;
              
              //Write the sample and increment our byte counts
              $currBytesWritten = fwrite($fileHandle, pack('c', $currAmplitude));
              $dataChunk['dwChunkSize'] += $currBytesWritten;
              $dwFileLength  += $currBytesWritten;
              
              //Update the time counter
              $elapsed += $timeIncrement;
            }
          }
          
          /*
           * Seek to our dwFileLength and overwrite it with our final value. Make sure to subtract 8 for the
           * sGroupID and sRiffType fields in the header.
           *
          fseek($fileHandle, 4);
          fwrite($fileHandle, pack($fieldFormatMap['dwFileLength'], ($dwFileLength-8)));
          
          //Seek to our dwChunkSize and overwrite it with our final value
          fseek($fileHandle, $dataChunkSizePosition);
          fwrite($fileHandle, pack($fieldFormatMap['dwChunkSize'], $dataChunk['dwChunkSize']));
          fclose($fileHandle);
          
        }
      }
    }
  }*/
  
  
  

  return $output;
}

function jellomatrix_output_splicegrid_derivatives($increments, $primes, $tone, $interval, $harmonics, $frequency) {
  $lambdoma_map = [];
  $note_assembly = [];
  $output = '';
  // Now output the differences between different integers.
  $output .= '<div class="endtable begintext"><h2>ODD+EVEN: Derivatives</h2>';
  $output .= '<p>The bold letters at the end of each row represent the Lambdona Notes that the ratios of repeating increments create.</><div class="endtext"><br></div>';

  foreach($increments as $k=>$increment) {
    if ($k == 'row') {
      $r = '<h3>ODD+EVEN: Original Matrix</h3>';
      foreach ($increment as $ke => $direction) {
        if ($ke == 'forward') {
          $r .= '';
          $r .= '<p></p><div class="endtext"><br></div>';
          $count = 1;
          $r .= '<table class="table"><tr>';
          foreach ($direction as $spliced_row) {
            $r .= '<td class="tdgridltfirst">Row ' . $count . ': </td>';
            foreach ($spliced_row as $key => $item) {
              $test = $spliced_row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $r .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $r .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $r .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
              if ($key == 5) {
                $five = $item;
              }
              if ($key == 6) {
                $six = $item;
              }
              if ($key == 7) {
                $seven = $item;
              }
            }

            if (isset($three) && isset($one) && $three == $one) {
              $upper = $one;
            } else {
              unset($upper);
            }
            if (isset($four) && $two == $four) {
              $lower = $two;
            } else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $r .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $r .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zcee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zdee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeffsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgeesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbeeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $r .= '</tr>';
            $count++;
          }
          $r .= '</table>';
          $r .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $r .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $r .= '</ol><hr>';
          $r .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['r'][] = $note_order;
          }
        }

        if ($ke == 'derivative') {
          unset($note_order);
          $rd = '<h4>First Derivative (Odd/Even)</h4>';
          $count = 1;
          $rd .= '<table class="table"><tr>';
          foreach ($direction as $spliced_row) {
            $rd .= '<td class="tdgridltfirst">Row ' . $count . ': </td>';
            foreach ($spliced_row as $key => $item) {
              $test = $spliced_row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $rd .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $rd .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $rd .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
            }

            if (isset($three) && isset($one) && $three == $one) {
              $upper = $one;
            } else {
              unset($upper);
            }
            if (isset($four) && $two == $four) {
              $lower = $two;
            } else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rd .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rd .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }

            $rd .= '</tr>';
            $count++;
          }
          $rd .= '</table>';
          $rd .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rd .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rd .= '</ol><hr>';
          $rd .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rd'][] = $note_order;
          }
        }


        if ($ke == 'derivative_2') {
          unset($note_order);
          $rd2 = '<h4>Second Derivative (Odd/Even)</h4>';
          $count = 1;
          $rd2 .= '<table class="table"><tr>';
          foreach ($direction as $spliced_row) {
            $rd2 .= '<td class="tdgridltfirst">Row ' . $count . ': </td>';
            foreach ($spliced_row as $key => $item) {
              $test = $spliced_row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $rd2 .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $rd2 .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $rd2 .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
            }

            if (isset($three) && isset($one) && $three == $one) {
              $upper = $one;
            } else {
              unset($upper);
            }
            if (isset($four) && $two == $four) {
              $lower = $two;
            } else {
              unset($lower);
            }
            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rd2 .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rd2 .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rd2 .= '</tr>';
            $count++;
          }
          $rd2 .= '</table>';
          $rd2 .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rd2 .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rd2 .= '</ol><hr>';
          $rd2 .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rd2'][] = $note_order;
          }
        }
      }
    }
  }
///BOOKMARK
  $output .= $r;


  /*$output .= '<table><tr><th>k</th><th>ke</th><th>key</th><th>row</th><th>note</th><th>lower</th><th>upper</th></tr>';
  foreach($lambdoma_map as $k => $data) {
    foreach($data as $ke => $stuff) {
      foreach ($stuff as $key => $counts) {
        foreach ($counts as $count => $values) {
          $output .= "<tr><td>" . $k . "</td><td>" . $ke . "</td><td>" . $key . "</td><td>" . $count . "</td><td>" . $values['key'] . "</td><td>" . $values['lower'] . "</td><td>" . $values['upper'] . "</td></tr>";
        }
      }
    }
  }
  $output .= "</table>";*/

  $map = [];
  foreach ($lambdoma_map as $k => $data) {
    foreach ($data as $ke => $stuff) {
      //if ($ke = 'forward' || $k = 'row') {*/
      foreach ($stuff as $key => $counts) {
        foreach ($counts as $count => $values) {
          for ($u = 0; $u <= 16; $u++) {
            for ($l = 0; $l <= 16; $l++) {
              if (!in_array($values['upper'] . ':' . $values['lower'] . ':' . $values['class'] . ':' . $values['frequency'] . ':' . $values['key'], $map)) {
                $map[] = $values['upper'] . ':' . $values['lower'] . ':' . $values['class'] . ':' . $values['frequency'] . ':' . $values['key'];
              }
            }
          }
        }
      }
      //}
    }
  }
  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  $output .= $rd;

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  $output .= $rd2;

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  $output .= '</div><hr class="hr"><br></div>';

  // Now output the differences between different integers.
  $output .= '<div class="endtable begintext"><h2>PRIMES: Derivatives</h2>';
  $output .= '<p>The bold letters at the end of each row represent the Lambdona Notes that the ratios of repeating increments create.</p><div class="endtext"><br></div>';

  foreach($increments as $k=>$increment) {
    if ($k == 'row') {
      $r = '<h3>PRIMES: Original Matrix</h3>';
      foreach ($increment as $ke=>$direction) {
        if ($ke == 'forward') {
          unset($note_order);
          $r .= '';
          $r .= '<p></p><div class="endtext"><br></div>';
          $count = 1;
          $r .= '<table class="table"><tr>';
          foreach ($direction as $spliced_row) {
            $r .= '<td class="tdgridltfirst">Row ' . $count .': </td>';
            foreach ($spliced_row as $key=>$item) {
              if (in_array($item, $primes)) {
                $r .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              if (!in_array($item, $primes)) {
                $r .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
            }

            if (isset($three) && isset($one) && $three == $one) {
              $upper = $one;
            } else {
              unset($upper);
            }
            if (isset($four) && $two == $four) {
              $lower = $two;
            } else {
              unset($lower);
            }

            ////dpm($upper);
            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $r .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $r .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zcee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zdee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeffsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgeesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbeeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $r .= '</tr>';
            $count++;
          }
          $r .= '</table>';
          $r .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $r .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $r .= '</ol><hr>';
          $r .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['r'][] = $note_order;
          }
        }
        if ($ke == 'derivative') {
          unset($note_order);
          $rd = '<h4>First Derivative (Primes)</h4>';
          $count = 1;
          $rd .= '<table class="table"><tr>';
          foreach ($direction as $spliced_row) {
            $rd .= '<td class="tdgridltfirst">Row ' . $count .': </td>';
            foreach ($spliced_row as $key=>$item) {
              if (in_array($item, $primes)) {
                $rd .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              if (!in_array($item, $primes)) {
                $rd .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
            }

            if (isset($three) && isset($one) && $three == $one) {
              $upper = $one;
            } else {
              unset($upper);
            }
            if (isset($four) && $two == $four) {
              $lower = $two;
            } else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rd .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rd .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rd .= '</tr>';
            $count++;
          }
          $rd .= '</table>';
          $rd .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rd .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rd .= '</ol><hr>';
          $rd .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rd'][] = $note_order;
          }
        }
        if ($ke == 'derivative_2') {
          unset($note_order);
          $rd2 = '<h4>Second Derivative (Primes)</h4>';
          $count = 1;
          $rd2 .= '<table class="table"><tr>';
          foreach ($direction as $spliced_row) {
            $rd2 .= '<td class="tdgridltfirst">Row ' . $count .': </td>';
            foreach ($spliced_row as $key=>$item) {
              if (in_array($item, $primes)) {
                $rd2 .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              if (!in_array($item, $primes)) {
                $rd2 .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
            }

            if (isset($three) && isset($one) && $three == $one) {
              $upper = $one;
            } else {
              unset($upper);
            }
            if (isset($four) && $two == $four) {
              $lower = $two;
            } else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rd2 .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rd2 .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rd2 .= '</tr>';
            $count++;
          }
          $rd2 .= '</table>';
          $rd2 .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rd2 .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rd2 .= '</ol><hr>';
          $rd2 .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rd2'][] = $note_order;
          }
        }
      }
    }
  }
  $output .= $r;

  /*$output .= '<table><tr><th>k</th><th>ke</th><th>key</th><th>row</th><th>note</th><th>lower</th><th>upper</th></tr>';
  foreach($lambdoma_map as $k => $data) {
    foreach($data as $ke => $stuff) {
      foreach ($stuff as $key => $counts) {
        foreach ($counts as $count => $values) {
          $output .= "<tr><td>" . $k . "</td><td>" . $ke . "</td><td>" . $key . "</td><td>" . $count . "</td><td>" . $values['key'] . "</td><td>" . $values['lower'] . "</td><td>" . $values['upper'] . "</td></tr>";
        }
      }
    }
  }
  $output .= "</table>";*/

  $map = [];
  foreach ($lambdoma_map as $k => $data) {
    foreach ($data as $ke => $stuff) {
      //if ($ke = 'forward' || $k = 'row') {*/
      foreach ($stuff as $key => $counts) {
        foreach ($counts as $count => $values) {
          for ($u = 0; $u <= 16; $u++) {
            for ($l = 0; $l <= 16; $l++) {
              if (!in_array($values['upper'] . ':' . $values['lower'] . ':' . $values['class'] . ':' . $values['frequency'] . ':' . $values['key'], $map)) {
                $map[] = $values['upper'] . ':' . $values['lower'] . ':' . $values['class'] . ':' . $values['frequency'] . ':' . $values['key'];
              }
            }
          }
        }
      }
      //}
    }
  }

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {

    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  $output .= $rd;

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  $output .= $rd2;

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  //dpm($note_assembly);
  
  return $output;
}

function jellomatrix_output_splicegrid_derivative_harmonics($increment_original, $harmonics, $primes, $tone, $interval, $frequency) {

  $note_assembly = [];  
  $lambdoma_map = [];
  $output = '';

  // PRIMARY MATRIX DERIVATIVES.

  // Increment_PRIME: with the prime_matrix grid and the prime_increments variable.

  // First output the original harmonics with $columns and $rows.
  // Now output the differences between different integers.
  $note_order = [];
  $output .= '<div class="endtable begintext"><h2>PRIMES: Differences and Harmonics</h2>';
  $output .= '<p>The bold letters at the end of each row represent the Lambdona Notes that the ratios of repeating increment_prime_original create.</p><div class="endtext"><br></div>';
  foreach($increment_original as $k=>$increment_prime) {
    if ($k == 'rldiag') {
      $r = '<h3>Row</h3>';
      foreach ($increment_prime as $ke=>$direction) {
        if ($ke == 'forward') {
          unset($note_order);
          $r .= '<h4>Forward (Primes) (x,y)|(x+1,y)</h4>';
          $count = 1;
          $r .= '<table class="table"><tr>';
          foreach ($direction as $row) {
            $r .= '<td class="tdgridltfirst">Row ' . $count .': </td>';
            foreach ($row as $key=>$item) {
              if (in_array($item, $primes)) {
                $r .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              if (!in_array($item, $primes)) {
                $r .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
            }
            if (isset($two) && isset($zero) && $zero == $two) {
              $upper = $zero;
            }
            else {
              unset($upper);
            }
            if (isset($three) && $one == $three) {
              $lower = $one;
            }
            else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $r .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $r .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zcee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zdee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeffsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgeesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbeeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $r .= '</tr>';
            $count++;
          }
          $r .= '</table>';
          $r .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $r .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $r .= '</ol><hr>';
          $r .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['r'][] = $note_order;
          }
        }
        if ($ke == 'backward') {
          unset($note_order);
          $rd = '<h4>Backward (Primes) (x,y)|(x-1,y)</h4>';
          $count = 1;
          $rd .= '<table class="table"><tr>';
          foreach ($direction as $row) {
            $rd .= '<td class="tdgridltfirst">Row ' . $count .': </td>';
            foreach ($row as $key=>$item) {
              if (in_array($item, $primes)) {
                $rd .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              if (!in_array($item, $primes)) {
                $rd .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
            }
            if (isset($two) && isset($zero) && $zero == $two) {
              $upper = $zero;
            }
            else {
              unset($upper);
            }
            if (isset($three) && $one == $three) {
              $lower = $one;
            }
            else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rd .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rd .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rd .= '</tr>';
            $count++;
          }
          $rd .= '</table>';
          $rd .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rd .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rd .= '</ol><hr>';
          $rd .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rd'][] = $note_order;
          }
        }
      }
    }
    if ($k == 'row') {
      $lr = '<h3>Left to Right Diagonals across a Row</h3>';
      foreach ($increment_prime as $ke=>$direction) {
        if ($ke == 'forward') {
          unset($note_order);
          $lr .= '<h4>Forward (Odd/Even) (x,y)|(x+1,y+1)</h4>';
          $count = 1;
          $lr .= '<table class="table"><tr>';
          foreach ($direction as $row) {
            $lr .= '<td class="tdgridlt">LR Row ' . $count .': </td>';
            foreach ($row as $key=>$item) {
              $test = $row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $lr .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $lr .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $lr .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
            }
            if (isset($two) && isset($zero) && $zero == $two) {
              $upper = $zero;
            }
            else {
              unset($upper);
            }
            if (isset($three) && $one == $three) {
              $lower = $one;
            }
            else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $lr .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $lr .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zcee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zdee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeffsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgeesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbeeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $lr .= '</tr>';
            $count++;
          }
          $lr .= '</table>';
          $lr .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $lr .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $lr .= '</ol><hr>';
          $lr .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['lr'][] = $note_order;
          }
        }
        if ($ke == 'backward') {
          unset($note_order);
          $lrd = '<h4>Backward (x,y)|(x-1,y-1)</h4>';
          $count = 1;
          $lrd .= '<table class="table"><tr>';
          foreach ($direction as $row) {
            $lrd .= '<td class="tdgridlt">LR Row ' . $count .': </td>';
            foreach ($row as $key=>$item) {
              $test = $row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $lrd .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $lrd .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $lrd .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
            }
            if (isset($two) && isset($zero) && $zero == $two) {
              $upper = $zero;
            }
            else {
              unset($upper);
            }
            if (isset($three) && $one == $three) {
              $lower = $one;
            }
            else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $lrd .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $lrd .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $lrd .= '</tr>';
            $count++;
          }
          $lrd .= '</table>';
          $lrd .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $lrd .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $lrd .= '</ol><hr>';
          $lrd .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['lrd'][] = $note_order;
          }
        }
      }
    }
    if ($k == 'lrdiag') {
      $rl = '<h3>Right to Left Diagonals across a Row</h3>';
      foreach ($increment_prime as $ke=>$direction) {
        if ($ke == 'forward') {
          unset($note_order);
          $rl .= '<h4>Forward (Primes) (x,y)|(x+1,y-1)</h4>';
          $count = 1;
          $rl .= '<table class="table"><tr>';
          foreach ($direction as $row) {
            $rl .= '<td class="tdgridlt">RL Row ' . $count .': </td>';
            foreach ($row as $key=>$item) {
              if (in_array($item, $primes)) {
                $rl .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              if (!in_array($item, $primes)) {
                $rl .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
            }
            if (isset($two) && isset($zero) && $zero == $two) {
              $upper = $zero;
            }
            else {
              unset($upper);
            }
            if (isset($three) && $one == $three) {
              $lower = $one;
            }
            else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rl .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rl .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zcee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zdee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeffsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgeesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbeeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rl .= '</tr>';
            $count++;
          }
          $rl .= '</table>';
          $rl .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rl .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rl .= '</ol><hr>';
          $rl .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rl'][] = $note_order;
          }
        }
        if ($ke == 'backward') {
          unset($note_order);
          $rld = '<h4>Backward (Primes) (x,y)|(x-1,y+1)</h4>';
          $count = 1;
          $rld .= '<table class="table"><tr>';
          foreach ($direction as $row) {
            $rld .= '<td class="tdgridlt">RL Row ' . $count .': </td>';
            foreach ($row as $key=>$item) {
              if (in_array($item, $primes)) {
                $rld .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              if (!in_array($item, $primes)) {
                $rld .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
            }
            if (isset($two) && isset($zero) && $zero == $two) {
              $upper = $zero;
            }
            else {
              unset($upper);
            }
            if (isset($three) && $one == $three) {
              $lower = $one;
            }
            else {
              unset($lower);
            }

            if (isset($upper)) {
              foreach ($harmonics as $note) {
                
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rld .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rld .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rld .= '</tr>';
            $count++;
          }
          $rld .= '</table>';
          $rld .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rld .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rld .= '</ol><hr>';
          $rld .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rld'][] = $note_order;
          }
        }
      }
    }
  }
  $output .= $r;
  $output .= $rd;


  /*$output .= '<table><tr><th>k</th><th>ke</th><th>key</th><th>row</th><th>note</th><th>lower</th><th>upper</th></tr>';
  foreach($lambdoma_map as $k => $data) {
    foreach($data as $ke => $stuff) {
      foreach ($stuff as $key => $counts) {
        foreach ($counts as $count => $values) {
          $output .= "<tr><td>" . $k . "</td><td>" . $ke . "</td><td>" . $key . "</td><td>" . $count . "</td><td>" . $values['key'] . "</td><td>" . $values['lower'] . "</td><td>" . $values['upper'] . "</td></tr>";
        }
      }
    }
  }
  $output .= "</table>";*/

  $map = [];
  foreach ($lambdoma_map as $k => $data) {
    foreach ($data as $ke => $stuff) {
      //if ($ke = 'forward' || $k = 'row') {*/
      foreach ($stuff as $key => $counts) {
        foreach ($counts as $count => $values) {
          for ($u = 0; $u <= 16; $u++) {
            for ($l = 0; $l <= 16; $l++) {
              if (!in_array($values['upper'] . ':' . $values['lower'] . ':' . $values['class'] . ':' . $values['frequency'] . ':' . $values['key'], $map)) {
                $map[] = $values['upper'] . ':' . $values['lower'] . ':' . $values['class'] . ':' . $values['frequency'] . ':' . $values['key'];
              }
            }
          }
        }
      }
      //}
    }
  }

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  $output .= $rl;
  $output .= $rld;

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  $output .= $lr;
  $output .= $lrd;

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  $output .= '<hr class="hr">';

  //dpm($note_assembly);
  
 
  return $output;
}

function jellomatrix_output_splicegrid_derivative_oddeven($increments_prime, $primes, $tone, $interval, $harmonics, $frequency) {
  $lambdoma_map = [];
  $note_assembly = [];
  $output = '';
  // Now output the differences between different integers.
  $output .= '<div class="endtable begintext"><h2>PRIMARY MATRIX DERIVATIVES ODD+EVEN: Derivatives</h2>';
  $output .= '<p>The bold letters at the end of each row represent the Lambdona Notes that the ratios of repeating PRIMARY MATRIX increments create.</p><div class="endtext"><br></div>';

  foreach($increments_prime as $k=>$increment_prime) {
    if ($k == 'row') {
      $r = '<h3>PRIME (Odd/Even): Original Matrix</h3>';
      foreach ($increment_prime as $ke=>$direction) {
        if ($ke == 'forward') {
          $r .= '';
          $r .= '<p></p><div class="endtext"><br></div>';
          $count = 1;
          $r .= '<table class="table"><tr>';
          foreach ($direction as $prime_row) {
            $r .= '<td class="tdgridltfirst">Row ' . $count .': </td>';
            foreach ($prime_row as $key=>$item) {
              $test = $prime_row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $r .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $r .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $r .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
            }

            if (isset($three) && isset($one) && $three == $one) {
              $upper = $one;
            } else {
              unset($upper);
            }
            if (isset($four) && $two == $four) {
              $lower = $two;
            } else {
              unset($lower);
            }


            if (isset($upper)) {
              foreach ($harmonics as $note) {
                
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $r .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $r .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zcee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zdee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeffsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgeesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbeeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $r .= '</tr>';
            $count++;
          }
          $r .= '</table>';
          $r .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $r .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $r .= '</ol><hr>';
          $r .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['r'][] = $note_order;
          }
        }
        if ($ke == 'derivative') {
          unset($note_order);
          $rd = '<h4>First Derivative: (Odd/Even)</h4>';
          $count = 1;
          $rd .= '<table class="table"><tr>';
          foreach ($direction as $prime_row) {
            $rd .= '<td class="tdgridltfirst">Row ' . $count .': </td>';
            foreach ($prime_row as $key=>$item) {
              $test = $prime_row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $rd .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $rd .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $rd .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
            }

            if (isset($three) && isset($one) && $three == $one) {
              $upper = $one;
            } else {
              unset($upper);
            }
            if (isset($four) && $two == $four) {
              $lower = $two;
            } else {
              unset($lower);
            }


            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rd .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rd .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rd .= '</tr>';
            $count++;
          }
          $rd .= '</table>';
          $rd .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rd .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rd .= '</ol><hr>';
          $rd .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rd'][] = $note_order;
          }
        }
        if ($ke == 'derivative_2') {
          unset($note_order);
          $rd2 = '<h4>Second Derivative: (Odd/Even)</h4>';
          $count = 1;
          $rd2 .= '<table class="table"><tr>';
          foreach ($direction as $prime_row) {
            $rd2 .= '<td class="tdgridltfirst">Row ' . $count .': </td>';
            foreach ($prime_row as $key=>$item) {
              $test = $prime_row;
              unset($clink); $clink = '';
              if (is_array($test)) {
                $a = array_pop($test);
                $b = array_pop($test);
      
                if (is_numeric($a) && ($a) % 2 == 0 && ($b) % 2 == 0) {
                  $clink = 'highlight';
                }
                elseif (is_numeric($a) && ($a) % 2 != 0 && ($b) % 2 != 0) {
                  $clink = 'highlight';
                }
              }  
              if (isset($clink) && $clink == 'highlight') {
                $rd2 .= '<td class="tdgrid highlight">' . $item . '</td>';
              }
              elseif (($item) % 2 == 0) {
                $rd2 .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              elseif (($item) % 2 != 0) {
                $rd2 .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
            }

            if (isset($three) && isset($one) && $three == $one) {
              $upper = $one;
            } else {
              unset($upper);
            }
            if (isset($four) && $two == $four) {
              $lower = $two;
            } else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rd2 .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rd2 .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rd2 .= '</tr>';
            $count++;
          }
          $rd2 .= '</table>';
          $rd2 .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rd2 .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rd2 .= '</ol><hr>';
          $rd2 .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rd2'][] = $note_order;
          }
        }
      }
    }
  }
  $output .= $r;


  /*$output .= '<table><tr><th>k</th><th>ke</th><th>key</th><th>row</th><th>note</th><th>lower</th><th>upper</th></tr>';
  foreach($lambdoma_map as $k => $data) {
    foreach($data as $ke => $stuff) {
      foreach ($stuff as $key => $counts) {
        foreach ($counts as $count => $values) {
          $output .= "<tr><td>" . $k . "</td><td>" . $ke . "</td><td>" . $key . "</td><td>" . $count . "</td><td>" . $values['key'] . "</td><td>" . $values['lower'] . "</td><td>" . $values['upper'] . "</td></tr>";
        }
      }
    }
  }
  $output .= "</table>";*/

  $map = [];
  foreach ($lambdoma_map as $k => $data) {
    foreach ($data as $ke => $stuff) {
      //if ($ke = 'forward' || $k = 'row') {*/
      foreach ($stuff as $key => $counts) {
        foreach ($counts as $count => $values) {
          for ($u = 0; $u <= 16; $u++) {
            for ($l = 0; $l <= 16; $l++) {
              if (!in_array($values['upper'] . ':' . $values['lower'] . ':' . $values['class'] . ':' . $values['frequency'] . ':' . $values['key'], $map)) {
                $map[] = $values['upper'] . ':' . $values['lower'] . ':' . $values['class'] . ':' . $values['frequency'] . ':' . $values['key'];
              }
            }
          }
        }
      }
      //}
    }
  }

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  if (isset($rd)) {
    $output .= $rd;
  }

  if (isset($rd2)) {
    $output .= $rd2;
  }


  $output .= '</div><hr class="hr"><br>';
  //dpm($note_assembly);
  return $output;
}

function jellomatrix_output_splicegrid_derivative_primes($increments_prime, $primes, $tone, $interval, $harmonics, $frequency) {
  $lambdoma_map = [];
  $note_assembly = [];
  $note_order = [];

  $output = '';
  // Now output the differences between different integers.
  $output .= '<div class="endtable begintext"><h2>PRIMARY MATRIX DERIVATIVES PRIMES: Derivatives</h2>';
  $output .= '<p>The bold letters at the end of each row represent the Lambdona Notes that the ratios of repeating PRIMARY MATRIX increments create.</p><div class="endtext"><br></div>';

  foreach($increments_prime as $k=>$increment_prime) {
    if ($k == 'row') {
      $r = '<h3>PRIMARY MATRIX: (Primes) Original Matrix</h3>';
      foreach ($increment_prime as $ke=>$direction) {
        if ($ke == 'forward') {
          $r .= '';
          $r .= '<p></p><div class="endtext"><br></div>';
          $count = 1;
          $r .= '<table class="table"><tr>';
          foreach ($direction as $prime_row) {
            $r .= '<td class="tdgridltfirst">Row ' . $count .': </td>';
            foreach ($prime_row as $key=>$item) {
              if (in_array($item, $primes)) {
                $r .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              if (!in_array($item, $primes)) {
                $r .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
            }

            if (isset($three) && isset($one) && $three == $one) {
              $upper = $one;
            } else {
              unset($upper);
            }
            if (isset($four) && $two == $four) {
              $lower = $two;
            } else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $r .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $r .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zcee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zdee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zeffsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zgeesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbeeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'zbee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $r .= '</tr>';
            $count++;
          }
          $r .= '</table>';
          $r .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $r .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $r .= '</ol><hr>';
          $r .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['r'][] = $note_order;
          }
        }
        if ($ke == 'derivative') {
          unset($note_order);
          $rd = '<h4>First Derivative: (Primes)</h4>';
          $count = 1;
          $rd .= '<table class="table"><tr>';
          foreach ($direction as $prime_row) {
            $rd .= '<td class="tdgridltfirst">Row ' . $count .': </td>';
            foreach ($prime_row as $key=>$item) {
              if (in_array($item, $primes)) {
                $rd .= '<td class="tdgrid subhighlight">' . $item . '</td>';
              }
              if (!in_array($item, $primes)) {
                $rd .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
            }

            if (isset($three) && isset($one) && $three == $one) {
              $upper = $one;
            } else {
              unset($upper);
            }
            if (isset($four) && $two == $four) {
              $lower = $two;
            } else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rd .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower;
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rd .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rd .= '</tr>';
            $count++;
          }
          $rd .= '</table>';
          $rd .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rd .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rd .= '</ol><hr>';
          $rd .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rd'][] = $note_order;
          }
        }
        if ($ke == 'derivative_2') {
          unset($note_order);
          $rd2 = '<h4>Second Derivative: (Primes)</h4>';
          $count = 1;
          $rd2 .= '<table class="table"><tr>';
          foreach ($direction as $prime_row) {
            $rd2 .= '<td class="tdgridltfirst">Row ' . $count .': </td>';
            foreach ($prime_row as $key=>$item) {
              if (in_array($item, $primes)) {
              }
              if (!in_array($item, $primes)) {
                $rd2 .= '<td class="tdgrid">' . $item . '</td>';
              }
              if ($key == 0) {
                $zero = $item;
              }
              if ($key == 1) {
                $one = $item;
              }
              if ($key == 2) {
                $two = $item;
              }
              if ($key == 3) {
                $three = $item;
              }
              if ($key == 4) {
                $four = $item;
              }
            }

            if (isset($three) && isset($one) && $three == $one) {
              $upper = $one;
            } else {
              unset($upper);
            }
            if (isset($four) && $two == $four) {
              $lower = $two;
            } else {
              unset($lower);
            }

            if (isset($upper)) {
              
              foreach ($harmonics as $note) {
                $explode = explode(':', $note);
                if (isset($lower) && $explode[0] == $upper && $explode[1] == $lower && !empty($explode[2])) {
                  $rd2 .= '<td class="tdgrid"><strong>' . $explode[2] . '</strong></td>';
                  $note_order[]= $explode[3];
                  $lower = (int)$lower;
                  $upper = (int)$upper; $added = $upper+$lower; 
                  if (is_numeric($upper) && is_numeric($lower)) {
                    $rd2 .= '<td>' . $upper . '+' . $lower . '=<strong>' . $added . '</strong></td>';
                  }
                  $lambdoma_map[$k][$ke][$key][$count]['lower'] = $explode[0];
                  $lambdoma_map[$k][$ke][$key][$count]['upper'] = $explode[1];
                  $lambdoma_map[$k][$ke][$key][$count]['key'] = $explode[2]; 
                  if ($explode[2] == 'origin') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'black';
                  }
                  if ($explode[2] == 'C') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'cee';
                  }
                  elseif ($explode[2] == 'C#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ceesharp';
                  }
                  elseif ($explode[2] == 'D') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'dee';
                  }
                  elseif ($explode[2] == 'Eb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eeeflat';
                  }
                  elseif ($explode[2] == 'E') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eee';
                  }
                  elseif ($explode[2] == 'F') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'eff';
                  }
                  elseif ($explode[2] == 'F#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'effsharp';
                  }
                  elseif ($explode[2] == 'G') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'gee';
                  }
                  elseif ($explode[2] == 'G#') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'geesharp';
                  }
                  elseif ($explode[2] == 'A') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'ay';
                  }
                  elseif ($explode[2] == 'Bb') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'beeflat';
                  }
                  elseif ($explode[2] == 'B') {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'bee';
                  }
                  else {
                    $lambdoma_map[$k][$ke][$key][$count]['class'] = 'darkslategray';
                  }
                  if (isset($explode[3])) {
                    $lambdoma_map[$k][$ke][$key][$count]['frequency'] = $explode[3];
                  }
                }
              }
            }
            $rd2 .= '</tr>';
            $count++;
          }
          $rd2 .= '</table>';
          $rd2 .= '<h3>Order of frequencies: based on a ' . $frequency . 'Hz baseline or "C"</h3><ol>';
          if (isset($note_order)) {
            foreach ($note_order as $key => $hz) {
              
              $rd2 .= '<li>' . $hz . 'Hz</li>';
            }
          }
          $rd2 .= '</ol><hr>';
          $rd2 .= '<div class="endtext"><br></div>';
          if (isset($note_order)) {
            $note_assembly[$ke]['rd2'][] = $note_order;
          }
        }
      }
    }
  }
  $output .= $r;

  /*$output .= '<table><tr><th>k</th><th>ke</th><th>key</th><th>row</th><th>note</th><th>lower</th><th>upper</th></tr>';
  foreach($lambdoma_map as $k => $data) {
    foreach($data as $ke => $stuff) {
      foreach ($stuff as $key => $counts) {
        foreach ($counts as $count => $values) {
          $output .= "<tr><td>" . $k . "</td><td>" . $ke . "</td><td>" . $key . "</td><td>" . $count . "</td><td>" . $values['key'] . "</td><td>" . $values['lower'] . "</td><td>" . $values['upper'] . "</td></tr>";
        }
      }
    }
  }
  $output .= "</table>";*/
  $map = [];
  foreach ($lambdoma_map as $k => $data) {
    foreach ($data as $ke => $stuff) {
      //if ($ke = 'forward' || $k = 'row') {*/
        foreach ($stuff as $key => $counts) {
          foreach ($counts as $count => $values) {
            //dpm($values);
            for ($u = 0; $u <= 16; $u++) {
              for ($l = 0; $l <= 16; $l++) {
                if (!in_array($values['upper'] . ':' . $values['lower'] . ':' . $values['class'] . ':' . $values['frequency'] . ':' . $values['key'], $map)) {
                  $map[] = $values['upper'] . ':' . $values['lower'] . ':' . $values['class'] . ':' . $values['frequency'] . ':' . $values['key'];
                }
              }
            }
          }
        }
      //}
    }
  }
  
  //dpm($map);

  
  $output .= '<h3>Lambdoma Keyboard (<a href="http://lambdoma.com" target="_blank">Barbara Hero</a>) colored in with the notes in the harmonics table/s above:</h3><table><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr>';
  for ($u=0; $u<=16; $u++) {
    $output .= '<tr>';
    $output .= '<td>' . $u . '</td>';

    
    for ($l = 0; $l <= 16; $l++) {
      $class = 'white';
      foreach ($map as $n => $unexploded) {
        $exploded = explode(':', $unexploded);
        if ($exploded[0] == $l && $exploded[1] == $u && !empty($explode[2])) {
          $class = $exploded[2];
          $frequency = $exploded[3];
          //$output .= '<td>' . $u . '</td>';
        }
        if ($class == 'white') {
          if ($l == 0) {
            $class = 'lightgray';
          }
          elseif ($u == 0) {
            $class = 'lightgray';
          }
        }
      }
      $output .= '<td class ="' . $class . '">' . $u . '/' . $l . '<br>';
      if (isset($frequency) && $frequency != 'INF' && $class != 'white' && $class != 'lightgray') {
        $output .= intval($frequency) . 'Hz</td>';
      }
      elseif (isset($frequency) && $frequency == 'INF') {
        $output .= 'INF</td>';
      }
      else {
        $output .= '-</td>';
      }
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  if (isset($rd)) {
    $output .= $rd;
  }
  if (isset($rd2)) {
    $output .= $rd2;
  }

  $output .= '</div><hr class="hr"><br>';

  $output .= '<h2>Solving for the 3D: extrapolating the matrix into 3 dimensions creating a fabric that is infinitely scalable in 6 directions: a sample using waveform pairs form the 13/20 matrix:</h2>';
  $output .= '<img src="/sites/default/files/2019-07/jellomatrix_1320_3d_0.png" width="100%" height="auto" /><hr>';

  $output .= '<div class="begintext"><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img alt="Creative Commons License" class="commons" src="http://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">Matrix Tool</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="http://jellobrain.com" property="cc:attributionName" rel="cc:attributionURL">Ana Willem</a> is licensed from 2007 - current under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.<br />Based on a work at <a xmlns:dct="http://purl.org/dc/terms/" href="http://jellobrain.com" rel="dct:source">http://jellobrain.com</a>.</div><hr class="hr">';
  //dpm($note_assembly);
  
  //dpm($note_assembly);
  return $output;
}
